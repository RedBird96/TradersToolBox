<UserControl x:Name="uQuotes"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
             xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
             xmlns:ViewModels="clr-namespace:TradersToolbox.ViewModels"
             xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
             xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
             xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
             xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
             xmlns:dialogs="clr-namespace:TradersToolbox.Views.DialogWindows"
             xmlns:dxct="http://schemas.devexpress.com/winfx/2008/xaml/charts/themekeys"
             xmlns:views="clr-namespace:TradersToolbox.Views"
             xmlns:customcontrols="clr-namespace:TradersToolbox.CustomControls"
             x:Class="TradersToolbox.Views.QuotesView"
             mc:Ignorable="d" 
             d:DesignHeight="500" d:DesignWidth="200">
    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="boolToVis"/>
        
        <Style TargetType="GroupBox">
                <Setter Property="Margin" Value="4 2"/>
                <Setter Property="HeaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" FontWeight="Medium"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        <Style x:Key="TabItemStyle" TargetType="dx:DXTabItem">
            <Setter Property="Header" Value="{Binding Title}"/>
            <Setter Property="Content" Value="{Binding}"/>
        </Style>
        <DataTemplate x:Key="TabItemHeaderTemplate">
                <TextBlock Text="{Binding}" FontWeight="Medium"/>
            </DataTemplate>
            <DataTemplate x:Key="TabItemContentTemplate">
                <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <dxb:BarManager Margin="0,3" Visibility="{Binding SymbolSearchEnabled, Converter={StaticResource boolToVis}}"
                        CreateStandardLayout="True"
                        Style="{DynamicResource {dxct:ChartToolbarThemeKey ResourceKey=BarManager}}">
                    <dxb:BarManager.Bars>
                        <dxb:Bar ShowDragWidget="False" IsMultiLine="True" AllowCollapse="False" AllowHide="False" AllowRemove="False">


                            <dxb:BarEditItem EditWidth="100" Hint="Enter Symbol" EditValueChanged="{DXEvent 'SearchSymbol(@sender)'}" >
                                <dxb:BarEditItem.EditSettings>
                                    <customcontrols:PopupBaseEditSettingsEx
                                            IsTextEditable="True"
                                            AllowNullInput="True"
                                            ShowPopupIfReadOnly="False"
                                            AcceptsReturn="True"
                                            >
                                        <customcontrols:PopupBaseEditSettingsEx.PopupContentTemplate>
                                            <ControlTemplate>
                                                <Grid Height="300" Width="300">

                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="Auto"/>
                                                        <RowDefinition Height="*"/>
                                                    </Grid.RowDefinitions>

                                                    <TextBlock Text="Type in a symbol to search" />


                                                    <dxg:GridControl Grid.Row="1"  MouseDoubleClick="{DXEvent 'SelectSymbol(@sender,@args)'}" ItemsSource="{Binding SearchResults}">
                                                        <dxg:GridControl.Columns>
                                                            <dxg:GridColumn AllowEditing="False" FieldName="Ticker" />
                                                            <dxg:GridColumn AllowEditing="False" FieldName="Description" />
                                                        </dxg:GridControl.Columns>
                                                        <dxg:GridControl.View>
                                                            <dxg:TableView ShowGroupPanel="False"  Loaded="{DXEvent 'TableLoaded(@sender)'}"  AutoWidth="True" />
                                                        </dxg:GridControl.View>
                                                    </dxg:GridControl>
                                                </Grid>
                                            </ControlTemplate>
                                        </customcontrols:PopupBaseEditSettingsEx.PopupContentTemplate>
                                    </customcontrols:PopupBaseEditSettingsEx>
                                </dxb:BarEditItem.EditSettings>
                            </dxb:BarEditItem>
                        </dxb:Bar>
                    </dxb:BarManager.Bars>
                </dxb:BarManager>

                <dxg:GridControl Grid.Row="1" ItemsSource="{Binding Quotes}" ShowBorder="False" dx:ScrollBarExtensions.ScrollBarMode="TouchOverlap" AutoExpandAllGroups="True"
                         SelectedItem="{Binding SelectedRow, Mode=TwoWay}">
                    <dxg:GridControl.GroupSummary>
                        <dxg:GridSummaryItem SummaryType="Count" />
                    </dxg:GridControl.GroupSummary>
                    <dxg:GridControl.View>
                        <dxg:TableView ShowTotalSummary="False" AllowEditing="False" AllowColumnMoving="False" NavigationStyle="Row" AllowPerPixelScrolling="True"
                               ShowGroupPanel="False" ShowColumnHeaders="True" ShowBandsPanel="False"
                               ShowIndicator="False" ShowHorizontalLines="False" AllowScrollAnimation="True"
                               HighlightItemOnHover="True" UseEvenRowBackground="True" AllowFixedGroups="True"
                               AllowBestFit="True" BestFitArea="All" BestFitMode="AllRows" AutoWidth="True">
                            <dxmvvm:Interaction.Behaviors>
                                <dxmvvm:EventToCommand EventName="RowDoubleClick" Command="{Binding SendMessageCommand}" CommandParameter="1"/>
                            </dxmvvm:Interaction.Behaviors>
                            <!--<dxg:TableView.RowCellMenuCustomizations>
                                <dxb:BarButtonItem Content="Open" Command="{Binding SendMessageCommand, ElementName=uQuotes}" CommandParameter="0"/>
                                <dxb:BarButtonItem Content="Open in new window" Command="{Binding SendMessageCommand, ElementName=uQuotes}" CommandParameter="1"/>
                            </dxg:TableView.RowCellMenuCustomizations>-->
                            <dxg:TableView.FormatConditions>
                                <dxg:FormatCondition Expression="[NetChangePct] &gt; 0" FieldName="NetChangePct">
                                    <dx:Format Foreground="#FF00B500" TextDecorations="{x:Null}"/>
                                </dxg:FormatCondition>
                                <dxg:FormatCondition Expression="[NetChangePct] &lt; 0" FieldName="NetChangePct">
                                    <dx:Format Foreground="Red" TextDecorations="{x:Null}"/>
                                </dxg:FormatCondition>

                                <dxg:FormatCondition Expression="[MarketOpenedNetChangePct] &gt; 0" FieldName="MarketOpenedNetChangePct">
                                    <dx:Format Foreground="#FF00B500" TextDecorations="{x:Null}"/>
                                </dxg:FormatCondition>
                                <dxg:FormatCondition Expression="[MarketOpenedNetChangePct] &lt; 0" FieldName="MarketOpenedNetChangePct">
                                    <dx:Format Foreground="Red" TextDecorations="{x:Null}"/>
                                </dxg:FormatCondition>

                                <dxg:FormatCondition Expression="[ScanResult] == 3" FieldName="ScanString">
                                    <dx:Format Foreground="Gray" TextDecorations="{x:Null}"/>
                                </dxg:FormatCondition>
                                <dxg:FormatCondition Expression="[ScanResult] == 2" FieldName="ScanString">
                                    <dx:Format Foreground="#FF00B500" TextDecorations="{x:Null}"/>
                                </dxg:FormatCondition>
                                <dxg:FormatCondition Expression="[ScanResult] == 1" FieldName="ScanString">
                                    <dx:Format Foreground="Red" TextDecorations="{x:Null}"/>
                                </dxg:FormatCondition>
                                <!--<dxg:FormatCondition Expression="[PriceDif] &lt; '0'" FieldName="LastPrice">
                            <dx:Format Foreground="Red" TextDecorations="{x:Null}"/>
                        </dxg:FormatCondition>-->
                            </dxg:TableView.FormatConditions>
                        </dxg:TableView>
                    </dxg:GridControl.View>
                    <dxg:GridColumn FieldName="Symbol" Header="Symbol" CellToolTipBinding="{Binding Description}"/>
                    <dxg:GridColumn FieldName="LastPrice" Header="Price" HorizontalHeaderContentAlignment="Right" Visible="{Binding UseExtendedHours}">
                        <dxg:GridColumn.EditSettings>
                            <dxe:TextEditSettings DisplayFormat="N2"/>
                        </dxg:GridColumn.EditSettings>
                    </dxg:GridColumn>
                    <dxg:GridColumn FieldName="MarketOpenedLastPrice" Header="Price" HorizontalHeaderContentAlignment="Right" Visible="{DXBinding !UseExtendedHours}">
                        <dxg:GridColumn.EditSettings>
                            <dxe:TextEditSettings DisplayFormat="N2"/>
                        </dxg:GridColumn.EditSettings>
                    </dxg:GridColumn>
                    <dxg:GridColumn FieldName="NetChangePct" Header="Change %" HorizontalHeaderContentAlignment="Right" Visible="{Binding UseExtendedHours}">
                        <dxg:GridColumn.EditSettings>
                            <dxe:TextEditSettings DisplayFormat="{}{0:+#0.0000;-#0.0000;0.00}%"/>
                        </dxg:GridColumn.EditSettings>
                    </dxg:GridColumn>
                    <dxg:GridColumn FieldName="MarketOpenedNetChangePct" Header="Change %" HorizontalHeaderContentAlignment="Right" Visible="{DXBinding !UseExtendedHours}">
                        <dxg:GridColumn.EditSettings>
                            <dxe:TextEditSettings DisplayFormat="{}{0:+#0.0000;-#0.0000;0.00}%"/>
                        </dxg:GridColumn.EditSettings>
                    </dxg:GridColumn>
                    <dxg:GridColumn FieldName="ScanResult" Header="ScanResult" HorizontalHeaderContentAlignment="Center" Visible="False"/>
                    <dxg:GridColumn FieldName="ScanString" Header="Scan" HorizontalHeaderContentAlignment="Center" Visible="{Binding ScanColumnVisible}"/>

                </dxg:GridControl>


            </Grid>
            </DataTemplate>
        
    </UserControl.Resources>
    <dxmvvm:Interaction.Behaviors>
        <dxmvvm:WindowService x:Name="OptimizationWindow">
            <dxmvvm:WindowService.WindowStyle>
                <Style TargetType="{x:Type dx:ThemedWindow}">
                    <Setter Property="MinWidth" Value="950"/>
                    <Setter Property="MinHeight" Value="600"/>
                    <Setter Property="Width" Value="950"/>
                    <Setter Property="Height" Value="600"/>
                    <!--<Setter Property="Width" Value="{Binding WindowWidth, Mode=TwoWay}"/>
                    <Setter Property="Height" Value="{Binding WindowHeight, Mode=TwoWay}"/>-->
                    <Setter Property="UseLayoutRounding" Value="True" />
                    <Setter Property="TitleAlignment" Value="Center" />
                    <Setter Property="Title" Value="Scanner" />
                </Style>
            </dxmvvm:WindowService.WindowStyle>
        </dxmvvm:WindowService>
    </dxmvvm:Interaction.Behaviors>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <dxb:BarManager
                        CreateStandardLayout="True"
                        Style="{DynamicResource {dxct:ChartToolbarThemeKey ResourceKey=BarManager}}">
            <dxb:BarManager.Bars>
                <dxb:Bar ShowDragWidget="False">
                    <dxb:BarButtonItem Command="{Binding CreateWatchlistCommand}" ToolTip="Create New Watchlist"  Glyph="{dx:DXImage Images/Data/CreateModelDifferences_32x32.png}"/>
                    <dxb:BarButtonItem Command="{Binding LoadWatchlistCommand}" ToolTip="Load Watchlist" Style="{DynamicResource {dxct:ChartToolbarThemeKey ResourceKey=LoadTemplateItem}}"/>

                    <dxb:BarItemSeparator/>

                    <dxb:BarButtonItem ToolTip="Save Watchlist" Command="{Binding SaveWatchlistCommand}" Style="{DynamicResource {dxct:ChartToolbarThemeKey ResourceKey=SaveAsTemplateItem}}"/>
                    <dxb:BarButtonItem ToolTip="Delete Highlighted Symbol" Command="{Binding RemoveItemCommand}"  Glyph="{dx:DXImage Images/Snap/RemoveFooter_32x32.png}"/>
                    <dxb:BarButtonItem ToolTip="Clear All" Command="{Binding ClearWatchlistCommand}"  Glyph="{dx:DXImage Images/Actions/Close_32x32.png}"/>

                    <dxb:BarItemSeparator/>

                    <dxb:BarButtonItem ToolTip="Scanner" Command="{Binding ScanCommand}" Glyph="{dx:DXImage 'SvgImages/Dashboards/EnableSearch.svg'}"/>

                </dxb:Bar>
            </dxb:BarManager.Bars>
        </dxb:BarManager>

        <dx:DXTabControl Padding="0"
            Grid.Row="1"
            ItemsSource="{Binding Watchlists}"
            TabHidden="{DXEvent 'TabRemoved(@sender,@args)'}"
            SelectedIndex="{Binding SelectedWatchlist, Mode=TwoWay}"
            ItemContainerStyle="{StaticResource TabItemStyle}"
            ItemHeaderTemplate="{StaticResource TabItemHeaderTemplate}"
            ItemTemplate="{StaticResource TabItemContentTemplate}" AllowMerging="True"
           >
            <dx:DXTabControl.View>
                <dx:TabControlStretchView       
                    HideButtonShowMode="InAllTabs" 
                    SingleTabItemHideMode="Hide"/>
            </dx:DXTabControl.View>
        </dx:DXTabControl>


        <StackPanel Grid.Row="1" Orientation="Vertical" VerticalAlignment="Bottom">
            <Border x:Name="BorderError" CornerRadius="7"  Background="Red" Margin="5" Visibility="Collapsed" BorderBrush="White" BorderThickness="1">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="auto"/>
                    </Grid.ColumnDefinitions>

                    <TextBlock x:Name="TbError" Text="Error description" Margin="3" Foreground="White" TextWrapping="Wrap" FontSize="11"/>

                    <Button Width="12" Height="12" Grid.Column="1" Padding="1 1 0 0" Click="ButtonDeleteError_Click" Background="Transparent" BorderThickness="0"
                            Margin="5,0,5,0" Focusable="False" Style="{DynamicResource ButtonStyle1}">
                        <Button.Resources>
                            <Style x:Key="FocusVisual">
                                <Setter Property="Control.Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                            <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
                            <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
                            <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#50BEE6FD"/>
                            <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
                            <SolidColorBrush x:Key="Button.Pressed.Background" Color="#50C4E5F6"/>
                            <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
                            <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
                            <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
                            <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
                            <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
                                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                <Setter Property="VerticalContentAlignment" Value="Center"/>
                                <Setter Property="Padding" Value="1"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsDefaulted" Value="true">
                                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                </Trigger>
                                                <Trigger Property="IsMouseOver" Value="true">
                                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                                                </Trigger>
                                                <Trigger Property="IsPressed" Value="true">
                                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                                                </Trigger>
                                                <Trigger Property="IsEnabled" Value="false">
                                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Button.Resources>
                        <Path Stroke="White" StrokeThickness="1.5" StrokeStartLineCap="Round" StrokeEndLineCap="Round" Data="M0,0 L10,10 M10,0 L0,10"/>
                    </Button>
                </Grid>
            </Border>
        </StackPanel>
    </Grid>
  
</UserControl>
