/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PolygonIO.Client;
using PolygonIO.Model;

namespace PolygonIO.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICryptoApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Aggregates (Bars)
        /// </summary>
        /// <remarks>
        /// Get aggregate bars for a cryptocurrency pair over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoTicker">The ticker symbol of the currency pair.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet (string cryptoTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null);

        /// <summary>
        /// Aggregates (Bars)
        /// </summary>
        /// <remarks>
        /// Get aggregate bars for a cryptocurrency pair over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoTicker">The ticker symbol of the currency pair.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGetWithHttpInfo (string cryptoTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Aggregates (Bars)
        /// </summary>
        /// <remarks>
        /// Get aggregate bars for a cryptocurrency pair over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoTicker">The ticker symbol of the currency pair.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGetAsync (string cryptoTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null);

        /// <summary>
        /// Aggregates (Bars)
        /// </summary>
        /// <remarks>
        /// Get aggregate bars for a cryptocurrency pair over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoTicker">The ticker symbol of the currency pair.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGetAsyncWithHttpInfo (string cryptoTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CryptoApi : ICryptoApi
    {
        private PolygonIO.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CryptoApi(String basePath)
        {
            this.Configuration = new PolygonIO.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PolygonIO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoApi"/> class
        /// </summary>
        /// <returns></returns>
        public CryptoApi()
        {
            this.Configuration = PolygonIO.Client.Configuration.Default;

            ExceptionFactory = PolygonIO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CryptoApi(PolygonIO.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PolygonIO.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PolygonIO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PolygonIO.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PolygonIO.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Aggregates (Bars) Get aggregate bars for a cryptocurrency pair over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoTicker">The ticker symbol of the currency pair.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet (string cryptoTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null)
        {
             ApiResponse<InlineResponse20019> localVarResponse = V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGetWithHttpInfo(cryptoTicker, multiplier, timespan, from, to, unadjusted, sort, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Aggregates (Bars) Get aggregate bars for a cryptocurrency pair over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoTicker">The ticker symbol of the currency pair.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse< InlineResponse20019 > V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGetWithHttpInfo (string cryptoTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null)
        {
            // verify the required parameter 'cryptoTicker' is set
            if (cryptoTicker == null)
                throw new ApiException(400, "Missing required parameter 'cryptoTicker' when calling CryptoApi->V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'multiplier' is set
            if (multiplier == null)
                throw new ApiException(400, "Missing required parameter 'multiplier' when calling CryptoApi->V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'timespan' is set
            if (timespan == null)
                throw new ApiException(400, "Missing required parameter 'timespan' when calling CryptoApi->V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CryptoApi->V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CryptoApi->V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet");

            var localVarPath = "/v2/aggs/ticker/{cryptoTicker}/range/{multiplier}/{timespan}/{from}/{to}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cryptoTicker != null) localVarPathParams.Add("cryptoTicker", this.Configuration.ApiClient.ParameterToString(cryptoTicker)); // path parameter
            if (multiplier != null) localVarPathParams.Add("multiplier", this.Configuration.ApiClient.ParameterToString(multiplier)); // path parameter
            if (timespan != null) localVarPathParams.Add("timespan", this.Configuration.ApiClient.ParameterToString(timespan)); // path parameter
            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        /// Aggregates (Bars) Get aggregate bars for a cryptocurrency pair over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoTicker">The ticker symbol of the currency pair.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGetAsync (string cryptoTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null)
        {
             ApiResponse<InlineResponse20019> localVarResponse = await V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGetAsyncWithHttpInfo(cryptoTicker, multiplier, timespan, from, to, unadjusted, sort, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Aggregates (Bars) Get aggregate bars for a cryptocurrency pair over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoTicker">The ticker symbol of the currency pair.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGetAsyncWithHttpInfo (string cryptoTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null)
        {
            // verify the required parameter 'cryptoTicker' is set
            if (cryptoTicker == null)
                throw new ApiException(400, "Missing required parameter 'cryptoTicker' when calling CryptoApi->V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'multiplier' is set
            if (multiplier == null)
                throw new ApiException(400, "Missing required parameter 'multiplier' when calling CryptoApi->V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'timespan' is set
            if (timespan == null)
                throw new ApiException(400, "Missing required parameter 'timespan' when calling CryptoApi->V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CryptoApi->V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CryptoApi->V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet");

            var localVarPath = "/v2/aggs/ticker/{cryptoTicker}/range/{multiplier}/{timespan}/{from}/{to}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cryptoTicker != null) localVarPathParams.Add("cryptoTicker", this.Configuration.ApiClient.ParameterToString(cryptoTicker)); // path parameter
            if (multiplier != null) localVarPathParams.Add("multiplier", this.Configuration.ApiClient.ParameterToString(multiplier)); // path parameter
            if (timespan != null) localVarPathParams.Add("timespan", this.Configuration.ApiClient.ParameterToString(timespan)); // path parameter
            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

    }
}
