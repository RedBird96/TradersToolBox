/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PolygonIO.Client;
using PolygonIO.Model;

namespace PolygonIO.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICurrenciesForexApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Real-time Currency Conversion
        /// </summary>
        /// <remarks>
        /// Get currency conversions using the latest market conversion rates. Note than you can convert in both directions. For example USD to CAD or CAD to USD. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <param name="amount">The amount to convert, with a decimal. (optional)</param>
        /// <param name="precision">The decimal precision of the conversion. Defaults to 2 which is 2 decimal places accuracy. (optional)</param>
        /// <returns>InlineResponse20025</returns>
        InlineResponse20025 V1ConversionFromToGet (string from, string to, int? amount = null, int? precision = null);

        /// <summary>
        /// Real-time Currency Conversion
        /// </summary>
        /// <remarks>
        /// Get currency conversions using the latest market conversion rates. Note than you can convert in both directions. For example USD to CAD or CAD to USD. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <param name="amount">The amount to convert, with a decimal. (optional)</param>
        /// <param name="precision">The decimal precision of the conversion. Defaults to 2 which is 2 decimal places accuracy. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        ApiResponse<InlineResponse20025> V1ConversionFromToGetWithHttpInfo (string from, string to, int? amount = null, int? precision = null);
        /// <summary>
        /// Historic Forex Ticks
        /// </summary>
        /// <remarks>
        /// Get historic ticks for a forex currency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the currency pair.  Example: For **USD/JPY** the &#x60;from&#x60; would be **USD**. </param>
        /// <param name="to">The \&quot;to\&quot; symbol of the currency pair.  Example: For **USD/JPY** the &#x60;to&#x60; would be **JPY**. </param>
        /// <param name="date">The date/day of the historic ticks to retrieve.</param>
        /// <param name="offset">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 10000. (optional)</param>
        /// <returns>InlineResponse20024</returns>
        InlineResponse20024 V1HistoricForexFromToDateGet (string from, string to, DateTime? date, int? offset = null, int? limit = null);

        /// <summary>
        /// Historic Forex Ticks
        /// </summary>
        /// <remarks>
        /// Get historic ticks for a forex currency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the currency pair.  Example: For **USD/JPY** the &#x60;from&#x60; would be **USD**. </param>
        /// <param name="to">The \&quot;to\&quot; symbol of the currency pair.  Example: For **USD/JPY** the &#x60;to&#x60; would be **JPY**. </param>
        /// <param name="date">The date/day of the historic ticks to retrieve.</param>
        /// <param name="offset">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 10000. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        ApiResponse<InlineResponse20024> V1HistoricForexFromToDateGetWithHttpInfo (string from, string to, DateTime? date, int? offset = null, int? limit = null);
        /// <summary>
        /// Last Quote for a Currency Pair
        /// </summary>
        /// <remarks>
        /// Get the last quote tick for a forex currency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 V1LastQuoteCurrenciesFromToGet (string from, string to);

        /// <summary>
        /// Last Quote for a Currency Pair
        /// </summary>
        /// <remarks>
        /// Get the last quote tick for a forex currency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> V1LastQuoteCurrenciesFromToGetWithHttpInfo (string from, string to);
        /// <summary>
        /// Previous Close
        /// </summary>
        /// <remarks>
        /// Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified forex pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forexTicker">The ticker symbol of the currency pair.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>InlineResponse20028</returns>
        InlineResponse20028 V2AggsTickerForexTickerPrevGet (string forexTicker, bool? unadjusted = null);

        /// <summary>
        /// Previous Close
        /// </summary>
        /// <remarks>
        /// Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified forex pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forexTicker">The ticker symbol of the currency pair.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        ApiResponse<InlineResponse20028> V2AggsTickerForexTickerPrevGetWithHttpInfo (string forexTicker, bool? unadjusted = null);
        /// <summary>
        /// Aggregates (Bars)
        /// </summary>
        /// <remarks>
        /// Get aggregate bars for a forex pair over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forexTicker">The ticker symbol of the currency pair.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>InlineResponse20029</returns>
        InlineResponse20029 V2AggsTickerForexTickerRangeMultiplierTimespanFromToGet (string forexTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null);

        /// <summary>
        /// Aggregates (Bars)
        /// </summary>
        /// <remarks>
        /// Get aggregate bars for a forex pair over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forexTicker">The ticker symbol of the currency pair.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        ApiResponse<InlineResponse20029> V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetWithHttpInfo (string forexTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null);
        /// <summary>
        /// Snapshot - Gainers/Losers
        /// </summary>
        /// <remarks>
        /// Get the current top 20 gainers or losers of the day in forex markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>InlineResponse20031</returns>
        InlineResponse20031 V2SnapshotLocaleGlobalMarketsForexDirectionGet (string direction);

        /// <summary>
        /// Snapshot - Gainers/Losers
        /// </summary>
        /// <remarks>
        /// Get the current top 20 gainers or losers of the day in forex markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        ApiResponse<InlineResponse20031> V2SnapshotLocaleGlobalMarketsForexDirectionGetWithHttpInfo (string direction);
        /// <summary>
        /// Snapshot - All Tickers
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded forex symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>InlineResponse20031</returns>
        InlineResponse20031 V2SnapshotLocaleGlobalMarketsForexTickersGet (List<string> tickers = null);

        /// <summary>
        /// Snapshot - All Tickers
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded forex symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        ApiResponse<InlineResponse20031> V2SnapshotLocaleGlobalMarketsForexTickersGetWithHttpInfo (List<string> tickers = null);
        /// <summary>
        /// Snapshot - Ticker
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded currency symbol. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The forex ticker.</param>
        /// <returns>InlineResponse20030</returns>
        InlineResponse20030 V2SnapshotLocaleGlobalMarketsForexTickersTickerGet (string ticker);

        /// <summary>
        /// Snapshot - Ticker
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded currency symbol. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The forex ticker.</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        ApiResponse<InlineResponse20030> V2SnapshotLocaleGlobalMarketsForexTickersTickerGetWithHttpInfo (string ticker);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Real-time Currency Conversion
        /// </summary>
        /// <remarks>
        /// Get currency conversions using the latest market conversion rates. Note than you can convert in both directions. For example USD to CAD or CAD to USD. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <param name="amount">The amount to convert, with a decimal. (optional)</param>
        /// <param name="precision">The decimal precision of the conversion. Defaults to 2 which is 2 decimal places accuracy. (optional)</param>
        /// <returns>Task of InlineResponse20025</returns>
        System.Threading.Tasks.Task<InlineResponse20025> V1ConversionFromToGetAsync (string from, string to, int? amount = null, int? precision = null);

        /// <summary>
        /// Real-time Currency Conversion
        /// </summary>
        /// <remarks>
        /// Get currency conversions using the latest market conversion rates. Note than you can convert in both directions. For example USD to CAD or CAD to USD. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <param name="amount">The amount to convert, with a decimal. (optional)</param>
        /// <param name="precision">The decimal precision of the conversion. Defaults to 2 which is 2 decimal places accuracy. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> V1ConversionFromToGetAsyncWithHttpInfo (string from, string to, int? amount = null, int? precision = null);
        /// <summary>
        /// Historic Forex Ticks
        /// </summary>
        /// <remarks>
        /// Get historic ticks for a forex currency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the currency pair.  Example: For **USD/JPY** the &#x60;from&#x60; would be **USD**. </param>
        /// <param name="to">The \&quot;to\&quot; symbol of the currency pair.  Example: For **USD/JPY** the &#x60;to&#x60; would be **JPY**. </param>
        /// <param name="date">The date/day of the historic ticks to retrieve.</param>
        /// <param name="offset">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 10000. (optional)</param>
        /// <returns>Task of InlineResponse20024</returns>
        System.Threading.Tasks.Task<InlineResponse20024> V1HistoricForexFromToDateGetAsync (string from, string to, DateTime? date, int? offset = null, int? limit = null);

        /// <summary>
        /// Historic Forex Ticks
        /// </summary>
        /// <remarks>
        /// Get historic ticks for a forex currency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the currency pair.  Example: For **USD/JPY** the &#x60;from&#x60; would be **USD**. </param>
        /// <param name="to">The \&quot;to\&quot; symbol of the currency pair.  Example: For **USD/JPY** the &#x60;to&#x60; would be **JPY**. </param>
        /// <param name="date">The date/day of the historic ticks to retrieve.</param>
        /// <param name="offset">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 10000. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> V1HistoricForexFromToDateGetAsyncWithHttpInfo (string from, string to, DateTime? date, int? offset = null, int? limit = null);
        /// <summary>
        /// Last Quote for a Currency Pair
        /// </summary>
        /// <remarks>
        /// Get the last quote tick for a forex currency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> V1LastQuoteCurrenciesFromToGetAsync (string from, string to);

        /// <summary>
        /// Last Quote for a Currency Pair
        /// </summary>
        /// <remarks>
        /// Get the last quote tick for a forex currency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> V1LastQuoteCurrenciesFromToGetAsyncWithHttpInfo (string from, string to);
        /// <summary>
        /// Previous Close
        /// </summary>
        /// <remarks>
        /// Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified forex pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forexTicker">The ticker symbol of the currency pair.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of InlineResponse20028</returns>
        System.Threading.Tasks.Task<InlineResponse20028> V2AggsTickerForexTickerPrevGetAsync (string forexTicker, bool? unadjusted = null);

        /// <summary>
        /// Previous Close
        /// </summary>
        /// <remarks>
        /// Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified forex pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forexTicker">The ticker symbol of the currency pair.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> V2AggsTickerForexTickerPrevGetAsyncWithHttpInfo (string forexTicker, bool? unadjusted = null);
        /// <summary>
        /// Aggregates (Bars)
        /// </summary>
        /// <remarks>
        /// Get aggregate bars for a forex pair over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forexTicker">The ticker symbol of the currency pair.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>Task of InlineResponse20029</returns>
        System.Threading.Tasks.Task<InlineResponse20029> V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetAsync (string forexTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null);

        /// <summary>
        /// Aggregates (Bars)
        /// </summary>
        /// <remarks>
        /// Get aggregate bars for a forex pair over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forexTicker">The ticker symbol of the currency pair.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetAsyncWithHttpInfo (string forexTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null);
        /// <summary>
        /// Snapshot - Gainers/Losers
        /// </summary>
        /// <remarks>
        /// Get the current top 20 gainers or losers of the day in forex markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>Task of InlineResponse20031</returns>
        System.Threading.Tasks.Task<InlineResponse20031> V2SnapshotLocaleGlobalMarketsForexDirectionGetAsync (string direction);

        /// <summary>
        /// Snapshot - Gainers/Losers
        /// </summary>
        /// <remarks>
        /// Get the current top 20 gainers or losers of the day in forex markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> V2SnapshotLocaleGlobalMarketsForexDirectionGetAsyncWithHttpInfo (string direction);
        /// <summary>
        /// Snapshot - All Tickers
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded forex symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>Task of InlineResponse20031</returns>
        System.Threading.Tasks.Task<InlineResponse20031> V2SnapshotLocaleGlobalMarketsForexTickersGetAsync (List<string> tickers = null);

        /// <summary>
        /// Snapshot - All Tickers
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded forex symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> V2SnapshotLocaleGlobalMarketsForexTickersGetAsyncWithHttpInfo (List<string> tickers = null);
        /// <summary>
        /// Snapshot - Ticker
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded currency symbol. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The forex ticker.</param>
        /// <returns>Task of InlineResponse20030</returns>
        System.Threading.Tasks.Task<InlineResponse20030> V2SnapshotLocaleGlobalMarketsForexTickersTickerGetAsync (string ticker);

        /// <summary>
        /// Snapshot - Ticker
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded currency symbol. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The forex ticker.</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20030>> V2SnapshotLocaleGlobalMarketsForexTickersTickerGetAsyncWithHttpInfo (string ticker);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CurrenciesForexApi : ICurrenciesForexApi
    {
        private PolygonIO.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesForexApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CurrenciesForexApi(String basePath)
        {
            this.Configuration = new PolygonIO.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PolygonIO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesForexApi"/> class
        /// </summary>
        /// <returns></returns>
        public CurrenciesForexApi()
        {
            this.Configuration = PolygonIO.Client.Configuration.Default;

            ExceptionFactory = PolygonIO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesForexApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CurrenciesForexApi(PolygonIO.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PolygonIO.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PolygonIO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PolygonIO.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PolygonIO.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Real-time Currency Conversion Get currency conversions using the latest market conversion rates. Note than you can convert in both directions. For example USD to CAD or CAD to USD. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <param name="amount">The amount to convert, with a decimal. (optional)</param>
        /// <param name="precision">The decimal precision of the conversion. Defaults to 2 which is 2 decimal places accuracy. (optional)</param>
        /// <returns>InlineResponse20025</returns>
        public InlineResponse20025 V1ConversionFromToGet (string from, string to, int? amount = null, int? precision = null)
        {
             ApiResponse<InlineResponse20025> localVarResponse = V1ConversionFromToGetWithHttpInfo(from, to, amount, precision);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Real-time Currency Conversion Get currency conversions using the latest market conversion rates. Note than you can convert in both directions. For example USD to CAD or CAD to USD. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <param name="amount">The amount to convert, with a decimal. (optional)</param>
        /// <param name="precision">The decimal precision of the conversion. Defaults to 2 which is 2 decimal places accuracy. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        public ApiResponse< InlineResponse20025 > V1ConversionFromToGetWithHttpInfo (string from, string to, int? amount = null, int? precision = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CurrenciesForexApi->V1ConversionFromToGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CurrenciesForexApi->V1ConversionFromToGet");

            var localVarPath = "/v1/conversion/{from}/{to}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (amount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "amount", amount)); // query parameter
            if (precision != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "precision", precision)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ConversionFromToGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20025) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
        }

        /// <summary>
        /// Real-time Currency Conversion Get currency conversions using the latest market conversion rates. Note than you can convert in both directions. For example USD to CAD or CAD to USD. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <param name="amount">The amount to convert, with a decimal. (optional)</param>
        /// <param name="precision">The decimal precision of the conversion. Defaults to 2 which is 2 decimal places accuracy. (optional)</param>
        /// <returns>Task of InlineResponse20025</returns>
        public async System.Threading.Tasks.Task<InlineResponse20025> V1ConversionFromToGetAsync (string from, string to, int? amount = null, int? precision = null)
        {
             ApiResponse<InlineResponse20025> localVarResponse = await V1ConversionFromToGetAsyncWithHttpInfo(from, to, amount, precision);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Real-time Currency Conversion Get currency conversions using the latest market conversion rates. Note than you can convert in both directions. For example USD to CAD or CAD to USD. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <param name="amount">The amount to convert, with a decimal. (optional)</param>
        /// <param name="precision">The decimal precision of the conversion. Defaults to 2 which is 2 decimal places accuracy. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> V1ConversionFromToGetAsyncWithHttpInfo (string from, string to, int? amount = null, int? precision = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CurrenciesForexApi->V1ConversionFromToGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CurrenciesForexApi->V1ConversionFromToGet");

            var localVarPath = "/v1/conversion/{from}/{to}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (amount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "amount", amount)); // query parameter
            if (precision != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "precision", precision)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ConversionFromToGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20025) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
        }

        /// <summary>
        /// Historic Forex Ticks Get historic ticks for a forex currency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the currency pair.  Example: For **USD/JPY** the &#x60;from&#x60; would be **USD**. </param>
        /// <param name="to">The \&quot;to\&quot; symbol of the currency pair.  Example: For **USD/JPY** the &#x60;to&#x60; would be **JPY**. </param>
        /// <param name="date">The date/day of the historic ticks to retrieve.</param>
        /// <param name="offset">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 10000. (optional)</param>
        /// <returns>InlineResponse20024</returns>
        public InlineResponse20024 V1HistoricForexFromToDateGet (string from, string to, DateTime? date, int? offset = null, int? limit = null)
        {
             ApiResponse<InlineResponse20024> localVarResponse = V1HistoricForexFromToDateGetWithHttpInfo(from, to, date, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Historic Forex Ticks Get historic ticks for a forex currency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the currency pair.  Example: For **USD/JPY** the &#x60;from&#x60; would be **USD**. </param>
        /// <param name="to">The \&quot;to\&quot; symbol of the currency pair.  Example: For **USD/JPY** the &#x60;to&#x60; would be **JPY**. </param>
        /// <param name="date">The date/day of the historic ticks to retrieve.</param>
        /// <param name="offset">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 10000. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        public ApiResponse< InlineResponse20024 > V1HistoricForexFromToDateGetWithHttpInfo (string from, string to, DateTime? date, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CurrenciesForexApi->V1HistoricForexFromToDateGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CurrenciesForexApi->V1HistoricForexFromToDateGet");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling CurrenciesForexApi->V1HistoricForexFromToDateGet");

            var localVarPath = "/v1/historic/forex/{from}/{to}/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1HistoricForexFromToDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20024) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        /// Historic Forex Ticks Get historic ticks for a forex currency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the currency pair.  Example: For **USD/JPY** the &#x60;from&#x60; would be **USD**. </param>
        /// <param name="to">The \&quot;to\&quot; symbol of the currency pair.  Example: For **USD/JPY** the &#x60;to&#x60; would be **JPY**. </param>
        /// <param name="date">The date/day of the historic ticks to retrieve.</param>
        /// <param name="offset">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 10000. (optional)</param>
        /// <returns>Task of InlineResponse20024</returns>
        public async System.Threading.Tasks.Task<InlineResponse20024> V1HistoricForexFromToDateGetAsync (string from, string to, DateTime? date, int? offset = null, int? limit = null)
        {
             ApiResponse<InlineResponse20024> localVarResponse = await V1HistoricForexFromToDateGetAsyncWithHttpInfo(from, to, date, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Historic Forex Ticks Get historic ticks for a forex currency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the currency pair.  Example: For **USD/JPY** the &#x60;from&#x60; would be **USD**. </param>
        /// <param name="to">The \&quot;to\&quot; symbol of the currency pair.  Example: For **USD/JPY** the &#x60;to&#x60; would be **JPY**. </param>
        /// <param name="date">The date/day of the historic ticks to retrieve.</param>
        /// <param name="offset">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 10000. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> V1HistoricForexFromToDateGetAsyncWithHttpInfo (string from, string to, DateTime? date, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CurrenciesForexApi->V1HistoricForexFromToDateGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CurrenciesForexApi->V1HistoricForexFromToDateGet");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling CurrenciesForexApi->V1HistoricForexFromToDateGet");

            var localVarPath = "/v1/historic/forex/{from}/{to}/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1HistoricForexFromToDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20024) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        /// Last Quote for a Currency Pair Get the last quote tick for a forex currency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 V1LastQuoteCurrenciesFromToGet (string from, string to)
        {
             ApiResponse<InlineResponse20026> localVarResponse = V1LastQuoteCurrenciesFromToGetWithHttpInfo(from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Last Quote for a Currency Pair Get the last quote tick for a forex currency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public ApiResponse< InlineResponse20026 > V1LastQuoteCurrenciesFromToGetWithHttpInfo (string from, string to)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CurrenciesForexApi->V1LastQuoteCurrenciesFromToGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CurrenciesForexApi->V1LastQuoteCurrenciesFromToGet");

            var localVarPath = "/v1/last_quote/currencies/{from}/{to}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1LastQuoteCurrenciesFromToGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20026) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        /// Last Quote for a Currency Pair Get the last quote tick for a forex currency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> V1LastQuoteCurrenciesFromToGetAsync (string from, string to)
        {
             ApiResponse<InlineResponse20026> localVarResponse = await V1LastQuoteCurrenciesFromToGetAsyncWithHttpInfo(from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Last Quote for a Currency Pair Get the last quote tick for a forex currency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> V1LastQuoteCurrenciesFromToGetAsyncWithHttpInfo (string from, string to)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CurrenciesForexApi->V1LastQuoteCurrenciesFromToGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CurrenciesForexApi->V1LastQuoteCurrenciesFromToGet");

            var localVarPath = "/v1/last_quote/currencies/{from}/{to}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1LastQuoteCurrenciesFromToGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20026) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        /// Previous Close Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified forex pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forexTicker">The ticker symbol of the currency pair.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>InlineResponse20028</returns>
        public InlineResponse20028 V2AggsTickerForexTickerPrevGet (string forexTicker, bool? unadjusted = null)
        {
             ApiResponse<InlineResponse20028> localVarResponse = V2AggsTickerForexTickerPrevGetWithHttpInfo(forexTicker, unadjusted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Previous Close Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified forex pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forexTicker">The ticker symbol of the currency pair.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        public ApiResponse< InlineResponse20028 > V2AggsTickerForexTickerPrevGetWithHttpInfo (string forexTicker, bool? unadjusted = null)
        {
            // verify the required parameter 'forexTicker' is set
            if (forexTicker == null)
                throw new ApiException(400, "Missing required parameter 'forexTicker' when calling CurrenciesForexApi->V2AggsTickerForexTickerPrevGet");

            var localVarPath = "/v2/aggs/ticker/{forexTicker}/prev";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (forexTicker != null) localVarPathParams.Add("forexTicker", this.Configuration.ApiClient.ParameterToString(forexTicker)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsTickerForexTickerPrevGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20028) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        /// Previous Close Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified forex pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forexTicker">The ticker symbol of the currency pair.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of InlineResponse20028</returns>
        public async System.Threading.Tasks.Task<InlineResponse20028> V2AggsTickerForexTickerPrevGetAsync (string forexTicker, bool? unadjusted = null)
        {
             ApiResponse<InlineResponse20028> localVarResponse = await V2AggsTickerForexTickerPrevGetAsyncWithHttpInfo(forexTicker, unadjusted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Previous Close Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified forex pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forexTicker">The ticker symbol of the currency pair.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> V2AggsTickerForexTickerPrevGetAsyncWithHttpInfo (string forexTicker, bool? unadjusted = null)
        {
            // verify the required parameter 'forexTicker' is set
            if (forexTicker == null)
                throw new ApiException(400, "Missing required parameter 'forexTicker' when calling CurrenciesForexApi->V2AggsTickerForexTickerPrevGet");

            var localVarPath = "/v2/aggs/ticker/{forexTicker}/prev";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (forexTicker != null) localVarPathParams.Add("forexTicker", this.Configuration.ApiClient.ParameterToString(forexTicker)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsTickerForexTickerPrevGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20028) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        /// Aggregates (Bars) Get aggregate bars for a forex pair over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forexTicker">The ticker symbol of the currency pair.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>InlineResponse20029</returns>
        public InlineResponse20029 V2AggsTickerForexTickerRangeMultiplierTimespanFromToGet (string forexTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null)
        {
             ApiResponse<InlineResponse20029> localVarResponse = V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetWithHttpInfo(forexTicker, multiplier, timespan, from, to, unadjusted, sort, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Aggregates (Bars) Get aggregate bars for a forex pair over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forexTicker">The ticker symbol of the currency pair.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        public ApiResponse< InlineResponse20029 > V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetWithHttpInfo (string forexTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null)
        {
            // verify the required parameter 'forexTicker' is set
            if (forexTicker == null)
                throw new ApiException(400, "Missing required parameter 'forexTicker' when calling CurrenciesForexApi->V2AggsTickerForexTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'multiplier' is set
            if (multiplier == null)
                throw new ApiException(400, "Missing required parameter 'multiplier' when calling CurrenciesForexApi->V2AggsTickerForexTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'timespan' is set
            if (timespan == null)
                throw new ApiException(400, "Missing required parameter 'timespan' when calling CurrenciesForexApi->V2AggsTickerForexTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CurrenciesForexApi->V2AggsTickerForexTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CurrenciesForexApi->V2AggsTickerForexTickerRangeMultiplierTimespanFromToGet");

            var localVarPath = "/v2/aggs/ticker/{forexTicker}/range/{multiplier}/{timespan}/{from}/{to}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (forexTicker != null) localVarPathParams.Add("forexTicker", this.Configuration.ApiClient.ParameterToString(forexTicker)); // path parameter
            if (multiplier != null) localVarPathParams.Add("multiplier", this.Configuration.ApiClient.ParameterToString(multiplier)); // path parameter
            if (timespan != null) localVarPathParams.Add("timespan", this.Configuration.ApiClient.ParameterToString(timespan)); // path parameter
            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsTickerForexTickerRangeMultiplierTimespanFromToGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20029) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
        }

        /// <summary>
        /// Aggregates (Bars) Get aggregate bars for a forex pair over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forexTicker">The ticker symbol of the currency pair.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>Task of InlineResponse20029</returns>
        public async System.Threading.Tasks.Task<InlineResponse20029> V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetAsync (string forexTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null)
        {
             ApiResponse<InlineResponse20029> localVarResponse = await V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetAsyncWithHttpInfo(forexTicker, multiplier, timespan, from, to, unadjusted, sort, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Aggregates (Bars) Get aggregate bars for a forex pair over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forexTicker">The ticker symbol of the currency pair.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetAsyncWithHttpInfo (string forexTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null)
        {
            // verify the required parameter 'forexTicker' is set
            if (forexTicker == null)
                throw new ApiException(400, "Missing required parameter 'forexTicker' when calling CurrenciesForexApi->V2AggsTickerForexTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'multiplier' is set
            if (multiplier == null)
                throw new ApiException(400, "Missing required parameter 'multiplier' when calling CurrenciesForexApi->V2AggsTickerForexTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'timespan' is set
            if (timespan == null)
                throw new ApiException(400, "Missing required parameter 'timespan' when calling CurrenciesForexApi->V2AggsTickerForexTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CurrenciesForexApi->V2AggsTickerForexTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CurrenciesForexApi->V2AggsTickerForexTickerRangeMultiplierTimespanFromToGet");

            var localVarPath = "/v2/aggs/ticker/{forexTicker}/range/{multiplier}/{timespan}/{from}/{to}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (forexTicker != null) localVarPathParams.Add("forexTicker", this.Configuration.ApiClient.ParameterToString(forexTicker)); // path parameter
            if (multiplier != null) localVarPathParams.Add("multiplier", this.Configuration.ApiClient.ParameterToString(multiplier)); // path parameter
            if (timespan != null) localVarPathParams.Add("timespan", this.Configuration.ApiClient.ParameterToString(timespan)); // path parameter
            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsTickerForexTickerRangeMultiplierTimespanFromToGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20029) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
        }

        /// <summary>
        /// Snapshot - Gainers/Losers Get the current top 20 gainers or losers of the day in forex markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>InlineResponse20031</returns>
        public InlineResponse20031 V2SnapshotLocaleGlobalMarketsForexDirectionGet (string direction)
        {
             ApiResponse<InlineResponse20031> localVarResponse = V2SnapshotLocaleGlobalMarketsForexDirectionGetWithHttpInfo(direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Snapshot - Gainers/Losers Get the current top 20 gainers or losers of the day in forex markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        public ApiResponse< InlineResponse20031 > V2SnapshotLocaleGlobalMarketsForexDirectionGetWithHttpInfo (string direction)
        {
            // verify the required parameter 'direction' is set
            if (direction == null)
                throw new ApiException(400, "Missing required parameter 'direction' when calling CurrenciesForexApi->V2SnapshotLocaleGlobalMarketsForexDirectionGet");

            var localVarPath = "/v2/snapshot/locale/global/markets/forex/{direction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (direction != null) localVarPathParams.Add("direction", this.Configuration.ApiClient.ParameterToString(direction)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleGlobalMarketsForexDirectionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20031>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20031) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20031)));
        }

        /// <summary>
        /// Snapshot - Gainers/Losers Get the current top 20 gainers or losers of the day in forex markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>Task of InlineResponse20031</returns>
        public async System.Threading.Tasks.Task<InlineResponse20031> V2SnapshotLocaleGlobalMarketsForexDirectionGetAsync (string direction)
        {
             ApiResponse<InlineResponse20031> localVarResponse = await V2SnapshotLocaleGlobalMarketsForexDirectionGetAsyncWithHttpInfo(direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Snapshot - Gainers/Losers Get the current top 20 gainers or losers of the day in forex markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> V2SnapshotLocaleGlobalMarketsForexDirectionGetAsyncWithHttpInfo (string direction)
        {
            // verify the required parameter 'direction' is set
            if (direction == null)
                throw new ApiException(400, "Missing required parameter 'direction' when calling CurrenciesForexApi->V2SnapshotLocaleGlobalMarketsForexDirectionGet");

            var localVarPath = "/v2/snapshot/locale/global/markets/forex/{direction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (direction != null) localVarPathParams.Add("direction", this.Configuration.ApiClient.ParameterToString(direction)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleGlobalMarketsForexDirectionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20031>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20031) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20031)));
        }

        /// <summary>
        /// Snapshot - All Tickers Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded forex symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>InlineResponse20031</returns>
        public InlineResponse20031 V2SnapshotLocaleGlobalMarketsForexTickersGet (List<string> tickers = null)
        {
             ApiResponse<InlineResponse20031> localVarResponse = V2SnapshotLocaleGlobalMarketsForexTickersGetWithHttpInfo(tickers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Snapshot - All Tickers Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded forex symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        public ApiResponse< InlineResponse20031 > V2SnapshotLocaleGlobalMarketsForexTickersGetWithHttpInfo (List<string> tickers = null)
        {

            var localVarPath = "/v2/snapshot/locale/global/markets/forex/tickers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tickers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tickers", tickers)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleGlobalMarketsForexTickersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20031>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20031) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20031)));
        }

        /// <summary>
        /// Snapshot - All Tickers Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded forex symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>Task of InlineResponse20031</returns>
        public async System.Threading.Tasks.Task<InlineResponse20031> V2SnapshotLocaleGlobalMarketsForexTickersGetAsync (List<string> tickers = null)
        {
             ApiResponse<InlineResponse20031> localVarResponse = await V2SnapshotLocaleGlobalMarketsForexTickersGetAsyncWithHttpInfo(tickers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Snapshot - All Tickers Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded forex symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> V2SnapshotLocaleGlobalMarketsForexTickersGetAsyncWithHttpInfo (List<string> tickers = null)
        {

            var localVarPath = "/v2/snapshot/locale/global/markets/forex/tickers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tickers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tickers", tickers)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleGlobalMarketsForexTickersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20031>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20031) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20031)));
        }

        /// <summary>
        /// Snapshot - Ticker Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded currency symbol. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The forex ticker.</param>
        /// <returns>InlineResponse20030</returns>
        public InlineResponse20030 V2SnapshotLocaleGlobalMarketsForexTickersTickerGet (string ticker)
        {
             ApiResponse<InlineResponse20030> localVarResponse = V2SnapshotLocaleGlobalMarketsForexTickersTickerGetWithHttpInfo(ticker);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Snapshot - Ticker Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded currency symbol. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The forex ticker.</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        public ApiResponse< InlineResponse20030 > V2SnapshotLocaleGlobalMarketsForexTickersTickerGetWithHttpInfo (string ticker)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling CurrenciesForexApi->V2SnapshotLocaleGlobalMarketsForexTickersTickerGet");

            var localVarPath = "/v2/snapshot/locale/global/markets/forex/tickers/{ticker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleGlobalMarketsForexTickersTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20030>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20030) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20030)));
        }

        /// <summary>
        /// Snapshot - Ticker Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded currency symbol. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The forex ticker.</param>
        /// <returns>Task of InlineResponse20030</returns>
        public async System.Threading.Tasks.Task<InlineResponse20030> V2SnapshotLocaleGlobalMarketsForexTickersTickerGetAsync (string ticker)
        {
             ApiResponse<InlineResponse20030> localVarResponse = await V2SnapshotLocaleGlobalMarketsForexTickersTickerGetAsyncWithHttpInfo(ticker);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Snapshot - Ticker Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded currency symbol. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The forex ticker.</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20030>> V2SnapshotLocaleGlobalMarketsForexTickersTickerGetAsyncWithHttpInfo (string ticker)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling CurrenciesForexApi->V2SnapshotLocaleGlobalMarketsForexTickersTickerGet");

            var localVarPath = "/v2/snapshot/locale/global/markets/forex/tickers/{ticker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleGlobalMarketsForexTickersTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20030>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20030) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20030)));
        }

    }
}
