/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PolygonIO.Client;
using PolygonIO.Model;

namespace PolygonIO.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICurrenciesCryptoApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Historic Crypto Trades
        /// </summary>
        /// <remarks>
        /// Get historic trade ticks for a cryptocurrency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the crypto pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the crypto pair.</param>
        /// <param name="date">The date/day of the historic ticks to retrieve.</param>
        /// <param name="offset">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 10000. (optional)</param>
        /// <returns>InlineResponse20035</returns>
        InlineResponse20035 V1HistoricCryptoFromToDateGet (string from, string to, DateTime? date, int? offset = null, int? limit = null);

        /// <summary>
        /// Historic Crypto Trades
        /// </summary>
        /// <remarks>
        /// Get historic trade ticks for a cryptocurrency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the crypto pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the crypto pair.</param>
        /// <param name="date">The date/day of the historic ticks to retrieve.</param>
        /// <param name="offset">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 10000. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        ApiResponse<InlineResponse20035> V1HistoricCryptoFromToDateGetWithHttpInfo (string from, string to, DateTime? date, int? offset = null, int? limit = null);
        /// <summary>
        /// Last Trade for a Crypto Pair
        /// </summary>
        /// <remarks>
        /// Get the last trade tick for a cryptocurrency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <returns>InlineResponse20033</returns>
        InlineResponse20033 V1LastCryptoFromToGet (string from, string to);

        /// <summary>
        /// Last Trade for a Crypto Pair
        /// </summary>
        /// <remarks>
        /// Get the last trade tick for a cryptocurrency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        ApiResponse<InlineResponse20033> V1LastCryptoFromToGetWithHttpInfo (string from, string to);
        /// <summary>
        /// Crypto Exchanges
        /// </summary>
        /// <remarks>
        /// Get a list of cryptocurrency exchanges which are supported by Polygon.io. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20032&gt;</returns>
        List<InlineResponse20032> V1MetaCryptoExchangesGet ();

        /// <summary>
        /// Crypto Exchanges
        /// </summary>
        /// <remarks>
        /// Get a list of cryptocurrency exchanges which are supported by Polygon.io. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20032&gt;</returns>
        ApiResponse<List<InlineResponse20032>> V1MetaCryptoExchangesGetWithHttpInfo ();
        /// <summary>
        /// Daily Open/Close
        /// </summary>
        /// <remarks>
        /// Get the open, close prices of a cryptocurrency symbol on a certain day. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <param name="date">The date of the requested open/close in the format YYYY-MM-DD.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>InlineResponse20034</returns>
        InlineResponse20034 V1OpenCloseCryptoFromToDateGet (string from, string to, DateTime? date, bool? unadjusted = null);

        /// <summary>
        /// Daily Open/Close
        /// </summary>
        /// <remarks>
        /// Get the open, close prices of a cryptocurrency symbol on a certain day. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <param name="date">The date of the requested open/close in the format YYYY-MM-DD.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        ApiResponse<InlineResponse20034> V1OpenCloseCryptoFromToDateGetWithHttpInfo (string from, string to, DateTime? date, bool? unadjusted = null);
        /// <summary>
        /// Grouped Daily (Bars)
        /// </summary>
        /// <remarks>
        /// Get the daily open, high, low, and close (OHLC) for the entire cryptocurrency markets. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>InlineResponse20036</returns>
        InlineResponse20036 V2AggsGroupedLocaleGlobalMarketCryptoDateGet (string date, bool? unadjusted = null);

        /// <summary>
        /// Grouped Daily (Bars)
        /// </summary>
        /// <remarks>
        /// Get the daily open, high, low, and close (OHLC) for the entire cryptocurrency markets. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        ApiResponse<InlineResponse20036> V2AggsGroupedLocaleGlobalMarketCryptoDateGetWithHttpInfo (string date, bool? unadjusted = null);
        /// <summary>
        /// Grouped Daily (Bars)
        /// </summary>
        /// <remarks>
        /// Get the daily open, high, low, and close (OHLC) for the entire forex markets. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>InlineResponse20027</returns>
        InlineResponse20027 V2AggsGroupedLocaleGlobalMarketFxDateGet (string date, bool? unadjusted = null);

        /// <summary>
        /// Grouped Daily (Bars)
        /// </summary>
        /// <remarks>
        /// Get the daily open, high, low, and close (OHLC) for the entire forex markets. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        ApiResponse<InlineResponse20027> V2AggsGroupedLocaleGlobalMarketFxDateGetWithHttpInfo (string date, bool? unadjusted = null);
        /// <summary>
        /// Previous Close
        /// </summary>
        /// <remarks>
        /// Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified cryptocurrency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoTicker">The ticker symbol of the currency pair.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>InlineResponse20037</returns>
        InlineResponse20037 V2AggsTickerCryptoTickerPrevGet (string cryptoTicker, bool? unadjusted = null);

        /// <summary>
        /// Previous Close
        /// </summary>
        /// <remarks>
        /// Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified cryptocurrency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoTicker">The ticker symbol of the currency pair.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        ApiResponse<InlineResponse20037> V2AggsTickerCryptoTickerPrevGetWithHttpInfo (string cryptoTicker, bool? unadjusted = null);
        /// <summary>
        /// Snapshot - Gainers/Losers
        /// </summary>
        /// <remarks>
        /// Get the current top 20 gainers or losers of the day in cryptocurrency markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>InlineResponse20041</returns>
        InlineResponse20041 V2SnapshotLocaleGlobalMarketsCryptoDirectionGet (string direction);

        /// <summary>
        /// Snapshot - Gainers/Losers
        /// </summary>
        /// <remarks>
        /// Get the current top 20 gainers or losers of the day in cryptocurrency markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        ApiResponse<InlineResponse20041> V2SnapshotLocaleGlobalMarketsCryptoDirectionGetWithHttpInfo (string direction);
        /// <summary>
        /// Snapshot - All Tickers
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded cryptocurrency symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>InlineResponse20038</returns>
        InlineResponse20038 V2SnapshotLocaleGlobalMarketsCryptoTickersGet (List<string> tickers = null);

        /// <summary>
        /// Snapshot - All Tickers
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded cryptocurrency symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        ApiResponse<InlineResponse20038> V2SnapshotLocaleGlobalMarketsCryptoTickersGetWithHttpInfo (List<string> tickers = null);
        /// <summary>
        /// Snapshot - Ticker Full Book (L2)
        /// </summary>
        /// <remarks>
        /// Get the current level 2 book of a single ticker. This is the combined book from all of the exchanges. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The cryptocurrency ticker.</param>
        /// <returns>InlineResponse20040</returns>
        InlineResponse20040 V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGet (string ticker);

        /// <summary>
        /// Snapshot - Ticker Full Book (L2)
        /// </summary>
        /// <remarks>
        /// Get the current level 2 book of a single ticker. This is the combined book from all of the exchanges. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The cryptocurrency ticker.</param>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        ApiResponse<InlineResponse20040> V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGetWithHttpInfo (string ticker);
        /// <summary>
        /// Snapshot - Ticker
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded cryptocurrency symbol. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Ticker of the snapshot</param>
        /// <returns>InlineResponse20039</returns>
        InlineResponse20039 V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGet (string ticker);

        /// <summary>
        /// Snapshot - Ticker
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded cryptocurrency symbol. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Ticker of the snapshot</param>
        /// <returns>ApiResponse of InlineResponse20039</returns>
        ApiResponse<InlineResponse20039> V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGetWithHttpInfo (string ticker);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Historic Crypto Trades
        /// </summary>
        /// <remarks>
        /// Get historic trade ticks for a cryptocurrency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the crypto pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the crypto pair.</param>
        /// <param name="date">The date/day of the historic ticks to retrieve.</param>
        /// <param name="offset">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 10000. (optional)</param>
        /// <returns>Task of InlineResponse20035</returns>
        System.Threading.Tasks.Task<InlineResponse20035> V1HistoricCryptoFromToDateGetAsync (string from, string to, DateTime? date, int? offset = null, int? limit = null);

        /// <summary>
        /// Historic Crypto Trades
        /// </summary>
        /// <remarks>
        /// Get historic trade ticks for a cryptocurrency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the crypto pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the crypto pair.</param>
        /// <param name="date">The date/day of the historic ticks to retrieve.</param>
        /// <param name="offset">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 10000. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> V1HistoricCryptoFromToDateGetAsyncWithHttpInfo (string from, string to, DateTime? date, int? offset = null, int? limit = null);
        /// <summary>
        /// Last Trade for a Crypto Pair
        /// </summary>
        /// <remarks>
        /// Get the last trade tick for a cryptocurrency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <returns>Task of InlineResponse20033</returns>
        System.Threading.Tasks.Task<InlineResponse20033> V1LastCryptoFromToGetAsync (string from, string to);

        /// <summary>
        /// Last Trade for a Crypto Pair
        /// </summary>
        /// <remarks>
        /// Get the last trade tick for a cryptocurrency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> V1LastCryptoFromToGetAsyncWithHttpInfo (string from, string to);
        /// <summary>
        /// Crypto Exchanges
        /// </summary>
        /// <remarks>
        /// Get a list of cryptocurrency exchanges which are supported by Polygon.io. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20032&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20032>> V1MetaCryptoExchangesGetAsync ();

        /// <summary>
        /// Crypto Exchanges
        /// </summary>
        /// <remarks>
        /// Get a list of cryptocurrency exchanges which are supported by Polygon.io. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20032&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20032>>> V1MetaCryptoExchangesGetAsyncWithHttpInfo ();
        /// <summary>
        /// Daily Open/Close
        /// </summary>
        /// <remarks>
        /// Get the open, close prices of a cryptocurrency symbol on a certain day. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <param name="date">The date of the requested open/close in the format YYYY-MM-DD.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of InlineResponse20034</returns>
        System.Threading.Tasks.Task<InlineResponse20034> V1OpenCloseCryptoFromToDateGetAsync (string from, string to, DateTime? date, bool? unadjusted = null);

        /// <summary>
        /// Daily Open/Close
        /// </summary>
        /// <remarks>
        /// Get the open, close prices of a cryptocurrency symbol on a certain day. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <param name="date">The date of the requested open/close in the format YYYY-MM-DD.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> V1OpenCloseCryptoFromToDateGetAsyncWithHttpInfo (string from, string to, DateTime? date, bool? unadjusted = null);
        /// <summary>
        /// Grouped Daily (Bars)
        /// </summary>
        /// <remarks>
        /// Get the daily open, high, low, and close (OHLC) for the entire cryptocurrency markets. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of InlineResponse20036</returns>
        System.Threading.Tasks.Task<InlineResponse20036> V2AggsGroupedLocaleGlobalMarketCryptoDateGetAsync (string date, bool? unadjusted = null);

        /// <summary>
        /// Grouped Daily (Bars)
        /// </summary>
        /// <remarks>
        /// Get the daily open, high, low, and close (OHLC) for the entire cryptocurrency markets. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> V2AggsGroupedLocaleGlobalMarketCryptoDateGetAsyncWithHttpInfo (string date, bool? unadjusted = null);
        /// <summary>
        /// Grouped Daily (Bars)
        /// </summary>
        /// <remarks>
        /// Get the daily open, high, low, and close (OHLC) for the entire forex markets. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of InlineResponse20027</returns>
        System.Threading.Tasks.Task<InlineResponse20027> V2AggsGroupedLocaleGlobalMarketFxDateGetAsync (string date, bool? unadjusted = null);

        /// <summary>
        /// Grouped Daily (Bars)
        /// </summary>
        /// <remarks>
        /// Get the daily open, high, low, and close (OHLC) for the entire forex markets. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> V2AggsGroupedLocaleGlobalMarketFxDateGetAsyncWithHttpInfo (string date, bool? unadjusted = null);
        /// <summary>
        /// Previous Close
        /// </summary>
        /// <remarks>
        /// Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified cryptocurrency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoTicker">The ticker symbol of the currency pair.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of InlineResponse20037</returns>
        System.Threading.Tasks.Task<InlineResponse20037> V2AggsTickerCryptoTickerPrevGetAsync (string cryptoTicker, bool? unadjusted = null);

        /// <summary>
        /// Previous Close
        /// </summary>
        /// <remarks>
        /// Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified cryptocurrency pair. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoTicker">The ticker symbol of the currency pair.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20037>> V2AggsTickerCryptoTickerPrevGetAsyncWithHttpInfo (string cryptoTicker, bool? unadjusted = null);
        /// <summary>
        /// Snapshot - Gainers/Losers
        /// </summary>
        /// <remarks>
        /// Get the current top 20 gainers or losers of the day in cryptocurrency markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>Task of InlineResponse20041</returns>
        System.Threading.Tasks.Task<InlineResponse20041> V2SnapshotLocaleGlobalMarketsCryptoDirectionGetAsync (string direction);

        /// <summary>
        /// Snapshot - Gainers/Losers
        /// </summary>
        /// <remarks>
        /// Get the current top 20 gainers or losers of the day in cryptocurrency markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20041>> V2SnapshotLocaleGlobalMarketsCryptoDirectionGetAsyncWithHttpInfo (string direction);
        /// <summary>
        /// Snapshot - All Tickers
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded cryptocurrency symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>Task of InlineResponse20038</returns>
        System.Threading.Tasks.Task<InlineResponse20038> V2SnapshotLocaleGlobalMarketsCryptoTickersGetAsync (List<string> tickers = null);

        /// <summary>
        /// Snapshot - All Tickers
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded cryptocurrency symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20038>> V2SnapshotLocaleGlobalMarketsCryptoTickersGetAsyncWithHttpInfo (List<string> tickers = null);
        /// <summary>
        /// Snapshot - Ticker Full Book (L2)
        /// </summary>
        /// <remarks>
        /// Get the current level 2 book of a single ticker. This is the combined book from all of the exchanges. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The cryptocurrency ticker.</param>
        /// <returns>Task of InlineResponse20040</returns>
        System.Threading.Tasks.Task<InlineResponse20040> V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGetAsync (string ticker);

        /// <summary>
        /// Snapshot - Ticker Full Book (L2)
        /// </summary>
        /// <remarks>
        /// Get the current level 2 book of a single ticker. This is the combined book from all of the exchanges. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The cryptocurrency ticker.</param>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGetAsyncWithHttpInfo (string ticker);
        /// <summary>
        /// Snapshot - Ticker
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded cryptocurrency symbol. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Ticker of the snapshot</param>
        /// <returns>Task of InlineResponse20039</returns>
        System.Threading.Tasks.Task<InlineResponse20039> V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGetAsync (string ticker);

        /// <summary>
        /// Snapshot - Ticker
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded cryptocurrency symbol. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Ticker of the snapshot</param>
        /// <returns>Task of ApiResponse (InlineResponse20039)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20039>> V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGetAsyncWithHttpInfo (string ticker);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CurrenciesCryptoApi : ICurrenciesCryptoApi
    {
        private PolygonIO.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesCryptoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CurrenciesCryptoApi(String basePath)
        {
            this.Configuration = new PolygonIO.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PolygonIO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesCryptoApi"/> class
        /// </summary>
        /// <returns></returns>
        public CurrenciesCryptoApi()
        {
            this.Configuration = PolygonIO.Client.Configuration.Default;

            ExceptionFactory = PolygonIO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesCryptoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CurrenciesCryptoApi(PolygonIO.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PolygonIO.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PolygonIO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PolygonIO.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PolygonIO.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Historic Crypto Trades Get historic trade ticks for a cryptocurrency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the crypto pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the crypto pair.</param>
        /// <param name="date">The date/day of the historic ticks to retrieve.</param>
        /// <param name="offset">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 10000. (optional)</param>
        /// <returns>InlineResponse20035</returns>
        public InlineResponse20035 V1HistoricCryptoFromToDateGet (string from, string to, DateTime? date, int? offset = null, int? limit = null)
        {
             ApiResponse<InlineResponse20035> localVarResponse = V1HistoricCryptoFromToDateGetWithHttpInfo(from, to, date, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Historic Crypto Trades Get historic trade ticks for a cryptocurrency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the crypto pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the crypto pair.</param>
        /// <param name="date">The date/day of the historic ticks to retrieve.</param>
        /// <param name="offset">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 10000. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        public ApiResponse< InlineResponse20035 > V1HistoricCryptoFromToDateGetWithHttpInfo (string from, string to, DateTime? date, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CurrenciesCryptoApi->V1HistoricCryptoFromToDateGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CurrenciesCryptoApi->V1HistoricCryptoFromToDateGet");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling CurrenciesCryptoApi->V1HistoricCryptoFromToDateGet");

            var localVarPath = "/v1/historic/crypto/{from}/{to}/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1HistoricCryptoFromToDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20035>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20035) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20035)));
        }

        /// <summary>
        /// Historic Crypto Trades Get historic trade ticks for a cryptocurrency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the crypto pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the crypto pair.</param>
        /// <param name="date">The date/day of the historic ticks to retrieve.</param>
        /// <param name="offset">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 10000. (optional)</param>
        /// <returns>Task of InlineResponse20035</returns>
        public async System.Threading.Tasks.Task<InlineResponse20035> V1HistoricCryptoFromToDateGetAsync (string from, string to, DateTime? date, int? offset = null, int? limit = null)
        {
             ApiResponse<InlineResponse20035> localVarResponse = await V1HistoricCryptoFromToDateGetAsyncWithHttpInfo(from, to, date, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Historic Crypto Trades Get historic trade ticks for a cryptocurrency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the crypto pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the crypto pair.</param>
        /// <param name="date">The date/day of the historic ticks to retrieve.</param>
        /// <param name="offset">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 10000. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> V1HistoricCryptoFromToDateGetAsyncWithHttpInfo (string from, string to, DateTime? date, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CurrenciesCryptoApi->V1HistoricCryptoFromToDateGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CurrenciesCryptoApi->V1HistoricCryptoFromToDateGet");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling CurrenciesCryptoApi->V1HistoricCryptoFromToDateGet");

            var localVarPath = "/v1/historic/crypto/{from}/{to}/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1HistoricCryptoFromToDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20035>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20035) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20035)));
        }

        /// <summary>
        /// Last Trade for a Crypto Pair Get the last trade tick for a cryptocurrency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <returns>InlineResponse20033</returns>
        public InlineResponse20033 V1LastCryptoFromToGet (string from, string to)
        {
             ApiResponse<InlineResponse20033> localVarResponse = V1LastCryptoFromToGetWithHttpInfo(from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Last Trade for a Crypto Pair Get the last trade tick for a cryptocurrency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        public ApiResponse< InlineResponse20033 > V1LastCryptoFromToGetWithHttpInfo (string from, string to)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CurrenciesCryptoApi->V1LastCryptoFromToGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CurrenciesCryptoApi->V1LastCryptoFromToGet");

            var localVarPath = "/v1/last/crypto/{from}/{to}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1LastCryptoFromToGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20033>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20033) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20033)));
        }

        /// <summary>
        /// Last Trade for a Crypto Pair Get the last trade tick for a cryptocurrency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <returns>Task of InlineResponse20033</returns>
        public async System.Threading.Tasks.Task<InlineResponse20033> V1LastCryptoFromToGetAsync (string from, string to)
        {
             ApiResponse<InlineResponse20033> localVarResponse = await V1LastCryptoFromToGetAsyncWithHttpInfo(from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Last Trade for a Crypto Pair Get the last trade tick for a cryptocurrency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> V1LastCryptoFromToGetAsyncWithHttpInfo (string from, string to)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CurrenciesCryptoApi->V1LastCryptoFromToGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CurrenciesCryptoApi->V1LastCryptoFromToGet");

            var localVarPath = "/v1/last/crypto/{from}/{to}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1LastCryptoFromToGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20033>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20033) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20033)));
        }

        /// <summary>
        /// Crypto Exchanges Get a list of cryptocurrency exchanges which are supported by Polygon.io. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20032&gt;</returns>
        public List<InlineResponse20032> V1MetaCryptoExchangesGet ()
        {
             ApiResponse<List<InlineResponse20032>> localVarResponse = V1MetaCryptoExchangesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Crypto Exchanges Get a list of cryptocurrency exchanges which are supported by Polygon.io. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20032&gt;</returns>
        public ApiResponse< List<InlineResponse20032> > V1MetaCryptoExchangesGetWithHttpInfo ()
        {

            var localVarPath = "/v1/meta/crypto-exchanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MetaCryptoExchangesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20032>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20032>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20032>)));
        }

        /// <summary>
        /// Crypto Exchanges Get a list of cryptocurrency exchanges which are supported by Polygon.io. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20032&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20032>> V1MetaCryptoExchangesGetAsync ()
        {
             ApiResponse<List<InlineResponse20032>> localVarResponse = await V1MetaCryptoExchangesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Crypto Exchanges Get a list of cryptocurrency exchanges which are supported by Polygon.io. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20032&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20032>>> V1MetaCryptoExchangesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/meta/crypto-exchanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MetaCryptoExchangesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20032>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20032>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20032>)));
        }

        /// <summary>
        /// Daily Open/Close Get the open, close prices of a cryptocurrency symbol on a certain day. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <param name="date">The date of the requested open/close in the format YYYY-MM-DD.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>InlineResponse20034</returns>
        public InlineResponse20034 V1OpenCloseCryptoFromToDateGet (string from, string to, DateTime? date, bool? unadjusted = null)
        {
             ApiResponse<InlineResponse20034> localVarResponse = V1OpenCloseCryptoFromToDateGetWithHttpInfo(from, to, date, unadjusted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Daily Open/Close Get the open, close prices of a cryptocurrency symbol on a certain day. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <param name="date">The date of the requested open/close in the format YYYY-MM-DD.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        public ApiResponse< InlineResponse20034 > V1OpenCloseCryptoFromToDateGetWithHttpInfo (string from, string to, DateTime? date, bool? unadjusted = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CurrenciesCryptoApi->V1OpenCloseCryptoFromToDateGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CurrenciesCryptoApi->V1OpenCloseCryptoFromToDateGet");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling CurrenciesCryptoApi->V1OpenCloseCryptoFromToDateGet");

            var localVarPath = "/v1/open-close/crypto/{from}/{to}/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OpenCloseCryptoFromToDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20034>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20034) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20034)));
        }

        /// <summary>
        /// Daily Open/Close Get the open, close prices of a cryptocurrency symbol on a certain day. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <param name="date">The date of the requested open/close in the format YYYY-MM-DD.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of InlineResponse20034</returns>
        public async System.Threading.Tasks.Task<InlineResponse20034> V1OpenCloseCryptoFromToDateGetAsync (string from, string to, DateTime? date, bool? unadjusted = null)
        {
             ApiResponse<InlineResponse20034> localVarResponse = await V1OpenCloseCryptoFromToDateGetAsyncWithHttpInfo(from, to, date, unadjusted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Daily Open/Close Get the open, close prices of a cryptocurrency symbol on a certain day. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; symbol of the pair.</param>
        /// <param name="to">The \&quot;to\&quot; symbol of the pair.</param>
        /// <param name="date">The date of the requested open/close in the format YYYY-MM-DD.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> V1OpenCloseCryptoFromToDateGetAsyncWithHttpInfo (string from, string to, DateTime? date, bool? unadjusted = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CurrenciesCryptoApi->V1OpenCloseCryptoFromToDateGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CurrenciesCryptoApi->V1OpenCloseCryptoFromToDateGet");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling CurrenciesCryptoApi->V1OpenCloseCryptoFromToDateGet");

            var localVarPath = "/v1/open-close/crypto/{from}/{to}/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OpenCloseCryptoFromToDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20034>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20034) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20034)));
        }

        /// <summary>
        /// Grouped Daily (Bars) Get the daily open, high, low, and close (OHLC) for the entire cryptocurrency markets. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>InlineResponse20036</returns>
        public InlineResponse20036 V2AggsGroupedLocaleGlobalMarketCryptoDateGet (string date, bool? unadjusted = null)
        {
             ApiResponse<InlineResponse20036> localVarResponse = V2AggsGroupedLocaleGlobalMarketCryptoDateGetWithHttpInfo(date, unadjusted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Grouped Daily (Bars) Get the daily open, high, low, and close (OHLC) for the entire cryptocurrency markets. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        public ApiResponse< InlineResponse20036 > V2AggsGroupedLocaleGlobalMarketCryptoDateGetWithHttpInfo (string date, bool? unadjusted = null)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling CurrenciesCryptoApi->V2AggsGroupedLocaleGlobalMarketCryptoDateGet");

            var localVarPath = "/v2/aggs/grouped/locale/global/market/crypto/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsGroupedLocaleGlobalMarketCryptoDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20036>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20036) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20036)));
        }

        /// <summary>
        /// Grouped Daily (Bars) Get the daily open, high, low, and close (OHLC) for the entire cryptocurrency markets. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of InlineResponse20036</returns>
        public async System.Threading.Tasks.Task<InlineResponse20036> V2AggsGroupedLocaleGlobalMarketCryptoDateGetAsync (string date, bool? unadjusted = null)
        {
             ApiResponse<InlineResponse20036> localVarResponse = await V2AggsGroupedLocaleGlobalMarketCryptoDateGetAsyncWithHttpInfo(date, unadjusted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Grouped Daily (Bars) Get the daily open, high, low, and close (OHLC) for the entire cryptocurrency markets. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> V2AggsGroupedLocaleGlobalMarketCryptoDateGetAsyncWithHttpInfo (string date, bool? unadjusted = null)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling CurrenciesCryptoApi->V2AggsGroupedLocaleGlobalMarketCryptoDateGet");

            var localVarPath = "/v2/aggs/grouped/locale/global/market/crypto/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsGroupedLocaleGlobalMarketCryptoDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20036>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20036) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20036)));
        }

        /// <summary>
        /// Grouped Daily (Bars) Get the daily open, high, low, and close (OHLC) for the entire forex markets. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>InlineResponse20027</returns>
        public InlineResponse20027 V2AggsGroupedLocaleGlobalMarketFxDateGet (string date, bool? unadjusted = null)
        {
             ApiResponse<InlineResponse20027> localVarResponse = V2AggsGroupedLocaleGlobalMarketFxDateGetWithHttpInfo(date, unadjusted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Grouped Daily (Bars) Get the daily open, high, low, and close (OHLC) for the entire forex markets. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        public ApiResponse< InlineResponse20027 > V2AggsGroupedLocaleGlobalMarketFxDateGetWithHttpInfo (string date, bool? unadjusted = null)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling CurrenciesCryptoApi->V2AggsGroupedLocaleGlobalMarketFxDateGet");

            var localVarPath = "/v2/aggs/grouped/locale/global/market/fx/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsGroupedLocaleGlobalMarketFxDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20027>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20027) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20027)));
        }

        /// <summary>
        /// Grouped Daily (Bars) Get the daily open, high, low, and close (OHLC) for the entire forex markets. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of InlineResponse20027</returns>
        public async System.Threading.Tasks.Task<InlineResponse20027> V2AggsGroupedLocaleGlobalMarketFxDateGetAsync (string date, bool? unadjusted = null)
        {
             ApiResponse<InlineResponse20027> localVarResponse = await V2AggsGroupedLocaleGlobalMarketFxDateGetAsyncWithHttpInfo(date, unadjusted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Grouped Daily (Bars) Get the daily open, high, low, and close (OHLC) for the entire forex markets. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> V2AggsGroupedLocaleGlobalMarketFxDateGetAsyncWithHttpInfo (string date, bool? unadjusted = null)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling CurrenciesCryptoApi->V2AggsGroupedLocaleGlobalMarketFxDateGet");

            var localVarPath = "/v2/aggs/grouped/locale/global/market/fx/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsGroupedLocaleGlobalMarketFxDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20027>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20027) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20027)));
        }

        /// <summary>
        /// Previous Close Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified cryptocurrency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoTicker">The ticker symbol of the currency pair.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>InlineResponse20037</returns>
        public InlineResponse20037 V2AggsTickerCryptoTickerPrevGet (string cryptoTicker, bool? unadjusted = null)
        {
             ApiResponse<InlineResponse20037> localVarResponse = V2AggsTickerCryptoTickerPrevGetWithHttpInfo(cryptoTicker, unadjusted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Previous Close Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified cryptocurrency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoTicker">The ticker symbol of the currency pair.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        public ApiResponse< InlineResponse20037 > V2AggsTickerCryptoTickerPrevGetWithHttpInfo (string cryptoTicker, bool? unadjusted = null)
        {
            // verify the required parameter 'cryptoTicker' is set
            if (cryptoTicker == null)
                throw new ApiException(400, "Missing required parameter 'cryptoTicker' when calling CurrenciesCryptoApi->V2AggsTickerCryptoTickerPrevGet");

            var localVarPath = "/v2/aggs/ticker/{cryptoTicker}/prev";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cryptoTicker != null) localVarPathParams.Add("cryptoTicker", this.Configuration.ApiClient.ParameterToString(cryptoTicker)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsTickerCryptoTickerPrevGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20037>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20037) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20037)));
        }

        /// <summary>
        /// Previous Close Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified cryptocurrency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoTicker">The ticker symbol of the currency pair.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of InlineResponse20037</returns>
        public async System.Threading.Tasks.Task<InlineResponse20037> V2AggsTickerCryptoTickerPrevGetAsync (string cryptoTicker, bool? unadjusted = null)
        {
             ApiResponse<InlineResponse20037> localVarResponse = await V2AggsTickerCryptoTickerPrevGetAsyncWithHttpInfo(cryptoTicker, unadjusted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Previous Close Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified cryptocurrency pair. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoTicker">The ticker symbol of the currency pair.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20037>> V2AggsTickerCryptoTickerPrevGetAsyncWithHttpInfo (string cryptoTicker, bool? unadjusted = null)
        {
            // verify the required parameter 'cryptoTicker' is set
            if (cryptoTicker == null)
                throw new ApiException(400, "Missing required parameter 'cryptoTicker' when calling CurrenciesCryptoApi->V2AggsTickerCryptoTickerPrevGet");

            var localVarPath = "/v2/aggs/ticker/{cryptoTicker}/prev";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cryptoTicker != null) localVarPathParams.Add("cryptoTicker", this.Configuration.ApiClient.ParameterToString(cryptoTicker)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsTickerCryptoTickerPrevGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20037>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20037) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20037)));
        }

        /// <summary>
        /// Snapshot - Gainers/Losers Get the current top 20 gainers or losers of the day in cryptocurrency markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>InlineResponse20041</returns>
        public InlineResponse20041 V2SnapshotLocaleGlobalMarketsCryptoDirectionGet (string direction)
        {
             ApiResponse<InlineResponse20041> localVarResponse = V2SnapshotLocaleGlobalMarketsCryptoDirectionGetWithHttpInfo(direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Snapshot - Gainers/Losers Get the current top 20 gainers or losers of the day in cryptocurrency markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        public ApiResponse< InlineResponse20041 > V2SnapshotLocaleGlobalMarketsCryptoDirectionGetWithHttpInfo (string direction)
        {
            // verify the required parameter 'direction' is set
            if (direction == null)
                throw new ApiException(400, "Missing required parameter 'direction' when calling CurrenciesCryptoApi->V2SnapshotLocaleGlobalMarketsCryptoDirectionGet");

            var localVarPath = "/v2/snapshot/locale/global/markets/crypto/{direction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (direction != null) localVarPathParams.Add("direction", this.Configuration.ApiClient.ParameterToString(direction)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleGlobalMarketsCryptoDirectionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20041>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20041) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20041)));
        }

        /// <summary>
        /// Snapshot - Gainers/Losers Get the current top 20 gainers or losers of the day in cryptocurrency markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>Task of InlineResponse20041</returns>
        public async System.Threading.Tasks.Task<InlineResponse20041> V2SnapshotLocaleGlobalMarketsCryptoDirectionGetAsync (string direction)
        {
             ApiResponse<InlineResponse20041> localVarResponse = await V2SnapshotLocaleGlobalMarketsCryptoDirectionGetAsyncWithHttpInfo(direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Snapshot - Gainers/Losers Get the current top 20 gainers or losers of the day in cryptocurrency markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20041>> V2SnapshotLocaleGlobalMarketsCryptoDirectionGetAsyncWithHttpInfo (string direction)
        {
            // verify the required parameter 'direction' is set
            if (direction == null)
                throw new ApiException(400, "Missing required parameter 'direction' when calling CurrenciesCryptoApi->V2SnapshotLocaleGlobalMarketsCryptoDirectionGet");

            var localVarPath = "/v2/snapshot/locale/global/markets/crypto/{direction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (direction != null) localVarPathParams.Add("direction", this.Configuration.ApiClient.ParameterToString(direction)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleGlobalMarketsCryptoDirectionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20041>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20041) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20041)));
        }

        /// <summary>
        /// Snapshot - All Tickers Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded cryptocurrency symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>InlineResponse20038</returns>
        public InlineResponse20038 V2SnapshotLocaleGlobalMarketsCryptoTickersGet (List<string> tickers = null)
        {
             ApiResponse<InlineResponse20038> localVarResponse = V2SnapshotLocaleGlobalMarketsCryptoTickersGetWithHttpInfo(tickers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Snapshot - All Tickers Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded cryptocurrency symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        public ApiResponse< InlineResponse20038 > V2SnapshotLocaleGlobalMarketsCryptoTickersGetWithHttpInfo (List<string> tickers = null)
        {

            var localVarPath = "/v2/snapshot/locale/global/markets/crypto/tickers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tickers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tickers", tickers)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleGlobalMarketsCryptoTickersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20038>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20038) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20038)));
        }

        /// <summary>
        /// Snapshot - All Tickers Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded cryptocurrency symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>Task of InlineResponse20038</returns>
        public async System.Threading.Tasks.Task<InlineResponse20038> V2SnapshotLocaleGlobalMarketsCryptoTickersGetAsync (List<string> tickers = null)
        {
             ApiResponse<InlineResponse20038> localVarResponse = await V2SnapshotLocaleGlobalMarketsCryptoTickersGetAsyncWithHttpInfo(tickers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Snapshot - All Tickers Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded cryptocurrency symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20038>> V2SnapshotLocaleGlobalMarketsCryptoTickersGetAsyncWithHttpInfo (List<string> tickers = null)
        {

            var localVarPath = "/v2/snapshot/locale/global/markets/crypto/tickers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tickers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tickers", tickers)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleGlobalMarketsCryptoTickersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20038>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20038) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20038)));
        }

        /// <summary>
        /// Snapshot - Ticker Full Book (L2) Get the current level 2 book of a single ticker. This is the combined book from all of the exchanges. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The cryptocurrency ticker.</param>
        /// <returns>InlineResponse20040</returns>
        public InlineResponse20040 V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGet (string ticker)
        {
             ApiResponse<InlineResponse20040> localVarResponse = V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGetWithHttpInfo(ticker);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Snapshot - Ticker Full Book (L2) Get the current level 2 book of a single ticker. This is the combined book from all of the exchanges. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The cryptocurrency ticker.</param>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        public ApiResponse< InlineResponse20040 > V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGetWithHttpInfo (string ticker)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling CurrenciesCryptoApi->V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGet");

            var localVarPath = "/v2/snapshot/locale/global/markets/crypto/tickers/{ticker}/book";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20040>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20040) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20040)));
        }

        /// <summary>
        /// Snapshot - Ticker Full Book (L2) Get the current level 2 book of a single ticker. This is the combined book from all of the exchanges. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The cryptocurrency ticker.</param>
        /// <returns>Task of InlineResponse20040</returns>
        public async System.Threading.Tasks.Task<InlineResponse20040> V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGetAsync (string ticker)
        {
             ApiResponse<InlineResponse20040> localVarResponse = await V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGetAsyncWithHttpInfo(ticker);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Snapshot - Ticker Full Book (L2) Get the current level 2 book of a single ticker. This is the combined book from all of the exchanges. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The cryptocurrency ticker.</param>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGetAsyncWithHttpInfo (string ticker)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling CurrenciesCryptoApi->V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGet");

            var localVarPath = "/v2/snapshot/locale/global/markets/crypto/tickers/{ticker}/book";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20040>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20040) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20040)));
        }

        /// <summary>
        /// Snapshot - Ticker Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded cryptocurrency symbol. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Ticker of the snapshot</param>
        /// <returns>InlineResponse20039</returns>
        public InlineResponse20039 V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGet (string ticker)
        {
             ApiResponse<InlineResponse20039> localVarResponse = V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGetWithHttpInfo(ticker);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Snapshot - Ticker Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded cryptocurrency symbol. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Ticker of the snapshot</param>
        /// <returns>ApiResponse of InlineResponse20039</returns>
        public ApiResponse< InlineResponse20039 > V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGetWithHttpInfo (string ticker)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling CurrenciesCryptoApi->V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGet");

            var localVarPath = "/v2/snapshot/locale/global/markets/crypto/tickers/{ticker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20039>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20039) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20039)));
        }

        /// <summary>
        /// Snapshot - Ticker Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded cryptocurrency symbol. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Ticker of the snapshot</param>
        /// <returns>Task of InlineResponse20039</returns>
        public async System.Threading.Tasks.Task<InlineResponse20039> V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGetAsync (string ticker)
        {
             ApiResponse<InlineResponse20039> localVarResponse = await V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGetAsyncWithHttpInfo(ticker);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Snapshot - Ticker Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded cryptocurrency symbol. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Ticker of the snapshot</param>
        /// <returns>Task of ApiResponse (InlineResponse20039)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20039>> V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGetAsyncWithHttpInfo (string ticker)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling CurrenciesCryptoApi->V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGet");

            var localVarPath = "/v2/snapshot/locale/global/markets/crypto/tickers/{ticker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20039>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20039) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20039)));
        }

    }
}
