/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PolygonIO.Client;
using PolygonIO.Model;

namespace PolygonIO.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IReferenceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Market Status
        /// </summary>
        /// <remarks>
        /// Get the current trading status of the exchanges and overall financial markets. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 V1MarketstatusNowGet ();

        /// <summary>
        /// Market Status
        /// </summary>
        /// <remarks>
        /// Get the current trading status of the exchanges and overall financial markets. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> V1MarketstatusNowGetWithHttpInfo ();
        /// <summary>
        /// Market Holidays
        /// </summary>
        /// <remarks>
        /// Get upcoming market holidays and their open/close times. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20010&gt;</returns>
        List<InlineResponse20010> V1MarketstatusUpcomingGet ();

        /// <summary>
        /// Market Holidays
        /// </summary>
        /// <remarks>
        /// Get upcoming market holidays and their open/close times. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20010&gt;</returns>
        ApiResponse<List<InlineResponse20010>> V1MarketstatusUpcomingGetWithHttpInfo ();
        /// <summary>
        /// Ticker Details
        /// </summary>
        /// <remarks>
        /// Get details for a ticker symbol&#x27;s company/entity.  This provides  a general overview of the entity with information such as name,  sector, exchange, logo and similar companies. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 V1MetaSymbolsStocksTickerCompanyGet (string stocksTicker);

        /// <summary>
        /// Ticker Details
        /// </summary>
        /// <remarks>
        /// Get details for a ticker symbol&#x27;s company/entity.  This provides  a general overview of the entity with information such as name,  sector, exchange, logo and similar companies. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> V1MetaSymbolsStocksTickerCompanyGetWithHttpInfo (string stocksTicker);
        /// <summary>
        /// Ticker News
        /// </summary>
        /// <remarks>
        /// Get the most recent news articles relating to a stock ticker symbol, including a summary of the article and a link to the original source. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="perpage">The maximum number of results to be returned on each page, max 50 and default 50.  (optional)</param>
        /// <param name="page">Which page of results to return.  (optional)</param>
        /// <returns>List&lt;InlineResponse2004&gt;</returns>
        List<InlineResponse2004> V1MetaSymbolsStocksTickerNewsGet (string stocksTicker, int? perpage = null, int? page = null);

        /// <summary>
        /// Ticker News
        /// </summary>
        /// <remarks>
        /// Get the most recent news articles relating to a stock ticker symbol, including a summary of the article and a link to the original source. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="perpage">The maximum number of results to be returned on each page, max 50 and default 50.  (optional)</param>
        /// <param name="page">Which page of results to return.  (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2004&gt;</returns>
        ApiResponse<List<InlineResponse2004>> V1MetaSymbolsStocksTickerNewsGetWithHttpInfo (string stocksTicker, int? perpage = null, int? page = null);
        /// <summary>
        /// Stock Dividends
        /// </summary>
        /// <remarks>
        /// Get a list of historical dividends for a stock, including the relevant dates and the amount of the dividend. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 V2ReferenceDividendsStocksTickerGet (string stocksTicker);

        /// <summary>
        /// Stock Dividends
        /// </summary>
        /// <remarks>
        /// Get a list of historical dividends for a stock, including the relevant dates and the amount of the dividend. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> V2ReferenceDividendsStocksTickerGetWithHttpInfo (string stocksTicker);
        /// <summary>
        /// Stock Financials
        /// </summary>
        /// <remarks>
        /// Get historical financial data for a stock ticker. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="limit">Limit the number of results.  (optional)</param>
        /// <param name="type">Specify a type of report to return.  Y &#x3D; Year YA &#x3D; Year annualized Q &#x3D; Quarter QA &#x3D; Quarter Annualized T &#x3D; Trailing twelve months TA &#x3D; trailing twelve months annualized  (optional)</param>
        /// <param name="sort">The direction to sort the returned results.  (optional)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 V2ReferenceFinancialsStocksTickerGet (string stocksTicker, int? limit = null, string type = null, string sort = null);

        /// <summary>
        /// Stock Financials
        /// </summary>
        /// <remarks>
        /// Get historical financial data for a stock ticker. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="limit">Limit the number of results.  (optional)</param>
        /// <param name="type">Specify a type of report to return.  Y &#x3D; Year YA &#x3D; Year annualized Q &#x3D; Quarter QA &#x3D; Quarter Annualized T &#x3D; Trailing twelve months TA &#x3D; trailing twelve months annualized  (optional)</param>
        /// <param name="sort">The direction to sort the returned results.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> V2ReferenceFinancialsStocksTickerGetWithHttpInfo (string stocksTicker, int? limit = null, string type = null, string sort = null);
        /// <summary>
        /// Locales
        /// </summary>
        /// <remarks>
        /// Get a list of locales currently supported by Polygon.io. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 V2ReferenceLocalesGet ();

        /// <summary>
        /// Locales
        /// </summary>
        /// <remarks>
        /// Get a list of locales currently supported by Polygon.io. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> V2ReferenceLocalesGetWithHttpInfo ();
        /// <summary>
        /// Markets
        /// </summary>
        /// <remarks>
        /// Get a list of markets that are currently supported by Polygon.io. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 V2ReferenceMarketsGet ();

        /// <summary>
        /// Markets
        /// </summary>
        /// <remarks>
        /// Get a list of markets that are currently supported by Polygon.io. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> V2ReferenceMarketsGetWithHttpInfo ();
        /// <summary>
        /// Stock Splits
        /// </summary>
        /// <remarks>
        /// Get a list of historical stock splits for a ticker symbol, including the execution and payment dates of the stock split, and the split ratio. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 V2ReferenceSplitsStocksTickerGet (string stocksTicker);

        /// <summary>
        /// Stock Splits
        /// </summary>
        /// <remarks>
        /// Get a list of historical stock splits for a ticker symbol, including the execution and payment dates of the stock split, and the split ratio. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> V2ReferenceSplitsStocksTickerGetWithHttpInfo (string stocksTicker);
        /// <summary>
        /// Tickers
        /// </summary>
        /// <remarks>
        /// Query all ticker symbols which are supported by Polygon.io. Returns basic reference data for each matched ticker symbol. This API includes Crypto, Forex, and Stocks/Equities. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Which field to sort by. For desc place a &#x60;-&#x60; in front of the field name.  **Example:** - &#x60;?sort&#x3D;-ticker&#x60; to sort symbols Z-A - &#x60;?sort&#x3D;type&#x60; to sort symbols by type  (optional)</param>
        /// <param name="type">Get tickers of a certain type. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v2_reference_types_anchor\&quot; alt&#x3D;\&quot;Ticker Types\&quot;&gt;Ticker Types&lt;/a&gt; for available types.  **Example** - &#x60;?type&#x3D;etp&#x60; to get all ETFs - &#x60;?type&#x3D;cs&#x60; to get all Common Stocks  (optional)</param>
        /// <param name="market">Get tickers for a specific market.  **Example:** - &#x60;?market&#x3D;stocks&#x60; to get all stock tickers - &#x60;?market&#x3D;crypto&#x60; to get all crypto tickers - &#x60;?market&#x3D;fx&#x60; to get all forex tickers  (optional)</param>
        /// <param name="locale">Get tickers for a specific region/locale.  See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v2_reference_locales_anchor\&quot; alt&#x3D;\&quot;Locales\&quot;&gt;Locales&lt;/a&gt; for a list of possible values.  **Example:** - &#x60;?locale&#x3D;us&#x60; to get all US tickers - &#x60;?locale&#x3D;g&#x60; to get all Global tickers  (optional)</param>
        /// <param name="search">Search for specific tickers by name or ticker symbol.  **Example:** - &#x60;?search&#x3D;microsoft&#x60; Search tickers for microsoft  (optional)</param>
        /// <param name="perpage">The maximum number of results to be returned on each page, max 50 and default 50.  (optional)</param>
        /// <param name="page">Which page of results to return.  (optional)</param>
        /// <param name="active">Filter for only active or inactive symbols.  (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 V2ReferenceTickersGet (string sort = null, string type = null, string market = null, string locale = null, string search = null, int? perpage = null, int? page = null, bool? active = null);

        /// <summary>
        /// Tickers
        /// </summary>
        /// <remarks>
        /// Query all ticker symbols which are supported by Polygon.io. Returns basic reference data for each matched ticker symbol. This API includes Crypto, Forex, and Stocks/Equities. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Which field to sort by. For desc place a &#x60;-&#x60; in front of the field name.  **Example:** - &#x60;?sort&#x3D;-ticker&#x60; to sort symbols Z-A - &#x60;?sort&#x3D;type&#x60; to sort symbols by type  (optional)</param>
        /// <param name="type">Get tickers of a certain type. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v2_reference_types_anchor\&quot; alt&#x3D;\&quot;Ticker Types\&quot;&gt;Ticker Types&lt;/a&gt; for available types.  **Example** - &#x60;?type&#x3D;etp&#x60; to get all ETFs - &#x60;?type&#x3D;cs&#x60; to get all Common Stocks  (optional)</param>
        /// <param name="market">Get tickers for a specific market.  **Example:** - &#x60;?market&#x3D;stocks&#x60; to get all stock tickers - &#x60;?market&#x3D;crypto&#x60; to get all crypto tickers - &#x60;?market&#x3D;fx&#x60; to get all forex tickers  (optional)</param>
        /// <param name="locale">Get tickers for a specific region/locale.  See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v2_reference_locales_anchor\&quot; alt&#x3D;\&quot;Locales\&quot;&gt;Locales&lt;/a&gt; for a list of possible values.  **Example:** - &#x60;?locale&#x3D;us&#x60; to get all US tickers - &#x60;?locale&#x3D;g&#x60; to get all Global tickers  (optional)</param>
        /// <param name="search">Search for specific tickers by name or ticker symbol.  **Example:** - &#x60;?search&#x3D;microsoft&#x60; Search tickers for microsoft  (optional)</param>
        /// <param name="perpage">The maximum number of results to be returned on each page, max 50 and default 50.  (optional)</param>
        /// <param name="page">Which page of results to return.  (optional)</param>
        /// <param name="active">Filter for only active or inactive symbols.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> V2ReferenceTickersGetWithHttpInfo (string sort = null, string type = null, string market = null, string locale = null, string search = null, int? perpage = null, int? page = null, bool? active = null);
        /// <summary>
        /// Ticker Types
        /// </summary>
        /// <remarks>
        /// Get a mapping of ticker types to their descriptive names. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 V2ReferenceTypesGet ();

        /// <summary>
        /// Ticker Types
        /// </summary>
        /// <remarks>
        /// Get a mapping of ticker types to their descriptive names. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> V2ReferenceTypesGetWithHttpInfo ();
        /// <summary>
        /// Tickers vX
        /// </summary>
        /// <remarks>
        /// Query all ticker symbols which are supported by Polygon.io. This API currently includes Stocks/Equities. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Specify a ticker symbol. Defaults to empty string which queries all tickers.  (optional)</param>
        /// <param name="type">Specify the type of the tickers. Find the types that we support via our [Ticker Types API](https://polygon.io/docs/get_v2_reference_types_anchor). Defaults to empty string which queries all types.  (optional)</param>
        /// <param name="exchange">Specify the primary exchange of the asset in the ISO code format. Find more information about the ISO codes [at the ISO org website](https://www.iso20022.org/market-identifier-codes). Defaults to empty string which queries all exchanges.  (optional)</param>
        /// <param name="cusip">Specify the CUSIP code of the asset you want to search for. Find more information about CUSIP codes [at their website](https://www.cusip.com/identifiers.html#/CUSIP). Defaults to empty string which queries all CUSIPs.  (optional)</param>
        /// <param name="date">Specify a point in time to retrieve tickers available on that date. Defaults to the most recent available date.  (optional)</param>
        /// <param name="active">Specify if the tickers returned should be actively traded on the queried date. Default is true.  (optional)</param>
        /// <param name="sort">The field to sort the results on. Default is ticker.  (optional)</param>
        /// <param name="order">The order to sort the results on. Default is asc (ascending).  (optional)</param>
        /// <param name="limit">Limit the size of the response, default is 100 and max is 500. (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 VXReferenceTickersGet (string ticker = null, string type = null, string exchange = null, string cusip = null, DateTime? date = null, bool? active = null, string sort = null, string order = null, int? limit = null);

        /// <summary>
        /// Tickers vX
        /// </summary>
        /// <remarks>
        /// Query all ticker symbols which are supported by Polygon.io. This API currently includes Stocks/Equities. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Specify a ticker symbol. Defaults to empty string which queries all tickers.  (optional)</param>
        /// <param name="type">Specify the type of the tickers. Find the types that we support via our [Ticker Types API](https://polygon.io/docs/get_v2_reference_types_anchor). Defaults to empty string which queries all types.  (optional)</param>
        /// <param name="exchange">Specify the primary exchange of the asset in the ISO code format. Find more information about the ISO codes [at the ISO org website](https://www.iso20022.org/market-identifier-codes). Defaults to empty string which queries all exchanges.  (optional)</param>
        /// <param name="cusip">Specify the CUSIP code of the asset you want to search for. Find more information about CUSIP codes [at their website](https://www.cusip.com/identifiers.html#/CUSIP). Defaults to empty string which queries all CUSIPs.  (optional)</param>
        /// <param name="date">Specify a point in time to retrieve tickers available on that date. Defaults to the most recent available date.  (optional)</param>
        /// <param name="active">Specify if the tickers returned should be actively traded on the queried date. Default is true.  (optional)</param>
        /// <param name="sort">The field to sort the results on. Default is ticker.  (optional)</param>
        /// <param name="order">The order to sort the results on. Default is asc (ascending).  (optional)</param>
        /// <param name="limit">Limit the size of the response, default is 100 and max is 500. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> VXReferenceTickersGetWithHttpInfo (string ticker = null, string type = null, string exchange = null, string cusip = null, DateTime? date = null, bool? active = null, string sort = null, string order = null, int? limit = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Market Status
        /// </summary>
        /// <remarks>
        /// Get the current trading status of the exchanges and overall financial markets. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> V1MarketstatusNowGetAsync ();

        /// <summary>
        /// Market Status
        /// </summary>
        /// <remarks>
        /// Get the current trading status of the exchanges and overall financial markets. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> V1MarketstatusNowGetAsyncWithHttpInfo ();
        /// <summary>
        /// Market Holidays
        /// </summary>
        /// <remarks>
        /// Get upcoming market holidays and their open/close times. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20010&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20010>> V1MarketstatusUpcomingGetAsync ();

        /// <summary>
        /// Market Holidays
        /// </summary>
        /// <remarks>
        /// Get upcoming market holidays and their open/close times. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20010&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20010>>> V1MarketstatusUpcomingGetAsyncWithHttpInfo ();
        /// <summary>
        /// Ticker Details
        /// </summary>
        /// <remarks>
        /// Get details for a ticker symbol&#x27;s company/entity.  This provides  a general overview of the entity with information such as name,  sector, exchange, logo and similar companies. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> V1MetaSymbolsStocksTickerCompanyGetAsync (string stocksTicker);

        /// <summary>
        /// Ticker Details
        /// </summary>
        /// <remarks>
        /// Get details for a ticker symbol&#x27;s company/entity.  This provides  a general overview of the entity with information such as name,  sector, exchange, logo and similar companies. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> V1MetaSymbolsStocksTickerCompanyGetAsyncWithHttpInfo (string stocksTicker);
        /// <summary>
        /// Ticker News
        /// </summary>
        /// <remarks>
        /// Get the most recent news articles relating to a stock ticker symbol, including a summary of the article and a link to the original source. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="perpage">The maximum number of results to be returned on each page, max 50 and default 50.  (optional)</param>
        /// <param name="page">Which page of results to return.  (optional)</param>
        /// <returns>Task of List&lt;InlineResponse2004&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2004>> V1MetaSymbolsStocksTickerNewsGetAsync (string stocksTicker, int? perpage = null, int? page = null);

        /// <summary>
        /// Ticker News
        /// </summary>
        /// <remarks>
        /// Get the most recent news articles relating to a stock ticker symbol, including a summary of the article and a link to the original source. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="perpage">The maximum number of results to be returned on each page, max 50 and default 50.  (optional)</param>
        /// <param name="page">Which page of results to return.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2004&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2004>>> V1MetaSymbolsStocksTickerNewsGetAsyncWithHttpInfo (string stocksTicker, int? perpage = null, int? page = null);
        /// <summary>
        /// Stock Dividends
        /// </summary>
        /// <remarks>
        /// Get a list of historical dividends for a stock, including the relevant dates and the amount of the dividend. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> V2ReferenceDividendsStocksTickerGetAsync (string stocksTicker);

        /// <summary>
        /// Stock Dividends
        /// </summary>
        /// <remarks>
        /// Get a list of historical dividends for a stock, including the relevant dates and the amount of the dividend. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> V2ReferenceDividendsStocksTickerGetAsyncWithHttpInfo (string stocksTicker);
        /// <summary>
        /// Stock Financials
        /// </summary>
        /// <remarks>
        /// Get historical financial data for a stock ticker. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="limit">Limit the number of results.  (optional)</param>
        /// <param name="type">Specify a type of report to return.  Y &#x3D; Year YA &#x3D; Year annualized Q &#x3D; Quarter QA &#x3D; Quarter Annualized T &#x3D; Trailing twelve months TA &#x3D; trailing twelve months annualized  (optional)</param>
        /// <param name="sort">The direction to sort the returned results.  (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> V2ReferenceFinancialsStocksTickerGetAsync (string stocksTicker, int? limit = null, string type = null, string sort = null);

        /// <summary>
        /// Stock Financials
        /// </summary>
        /// <remarks>
        /// Get historical financial data for a stock ticker. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="limit">Limit the number of results.  (optional)</param>
        /// <param name="type">Specify a type of report to return.  Y &#x3D; Year YA &#x3D; Year annualized Q &#x3D; Quarter QA &#x3D; Quarter Annualized T &#x3D; Trailing twelve months TA &#x3D; trailing twelve months annualized  (optional)</param>
        /// <param name="sort">The direction to sort the returned results.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> V2ReferenceFinancialsStocksTickerGetAsyncWithHttpInfo (string stocksTicker, int? limit = null, string type = null, string sort = null);
        /// <summary>
        /// Locales
        /// </summary>
        /// <remarks>
        /// Get a list of locales currently supported by Polygon.io. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> V2ReferenceLocalesGetAsync ();

        /// <summary>
        /// Locales
        /// </summary>
        /// <remarks>
        /// Get a list of locales currently supported by Polygon.io. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> V2ReferenceLocalesGetAsyncWithHttpInfo ();
        /// <summary>
        /// Markets
        /// </summary>
        /// <remarks>
        /// Get a list of markets that are currently supported by Polygon.io. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> V2ReferenceMarketsGetAsync ();

        /// <summary>
        /// Markets
        /// </summary>
        /// <remarks>
        /// Get a list of markets that are currently supported by Polygon.io. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> V2ReferenceMarketsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Stock Splits
        /// </summary>
        /// <remarks>
        /// Get a list of historical stock splits for a ticker symbol, including the execution and payment dates of the stock split, and the split ratio. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> V2ReferenceSplitsStocksTickerGetAsync (string stocksTicker);

        /// <summary>
        /// Stock Splits
        /// </summary>
        /// <remarks>
        /// Get a list of historical stock splits for a ticker symbol, including the execution and payment dates of the stock split, and the split ratio. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> V2ReferenceSplitsStocksTickerGetAsyncWithHttpInfo (string stocksTicker);
        /// <summary>
        /// Tickers
        /// </summary>
        /// <remarks>
        /// Query all ticker symbols which are supported by Polygon.io. Returns basic reference data for each matched ticker symbol. This API includes Crypto, Forex, and Stocks/Equities. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Which field to sort by. For desc place a &#x60;-&#x60; in front of the field name.  **Example:** - &#x60;?sort&#x3D;-ticker&#x60; to sort symbols Z-A - &#x60;?sort&#x3D;type&#x60; to sort symbols by type  (optional)</param>
        /// <param name="type">Get tickers of a certain type. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v2_reference_types_anchor\&quot; alt&#x3D;\&quot;Ticker Types\&quot;&gt;Ticker Types&lt;/a&gt; for available types.  **Example** - &#x60;?type&#x3D;etp&#x60; to get all ETFs - &#x60;?type&#x3D;cs&#x60; to get all Common Stocks  (optional)</param>
        /// <param name="market">Get tickers for a specific market.  **Example:** - &#x60;?market&#x3D;stocks&#x60; to get all stock tickers - &#x60;?market&#x3D;crypto&#x60; to get all crypto tickers - &#x60;?market&#x3D;fx&#x60; to get all forex tickers  (optional)</param>
        /// <param name="locale">Get tickers for a specific region/locale.  See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v2_reference_locales_anchor\&quot; alt&#x3D;\&quot;Locales\&quot;&gt;Locales&lt;/a&gt; for a list of possible values.  **Example:** - &#x60;?locale&#x3D;us&#x60; to get all US tickers - &#x60;?locale&#x3D;g&#x60; to get all Global tickers  (optional)</param>
        /// <param name="search">Search for specific tickers by name or ticker symbol.  **Example:** - &#x60;?search&#x3D;microsoft&#x60; Search tickers for microsoft  (optional)</param>
        /// <param name="perpage">The maximum number of results to be returned on each page, max 50 and default 50.  (optional)</param>
        /// <param name="page">Which page of results to return.  (optional)</param>
        /// <param name="active">Filter for only active or inactive symbols.  (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> V2ReferenceTickersGetAsync (string sort = null, string type = null, string market = null, string locale = null, string search = null, int? perpage = null, int? page = null, bool? active = null);

        /// <summary>
        /// Tickers
        /// </summary>
        /// <remarks>
        /// Query all ticker symbols which are supported by Polygon.io. Returns basic reference data for each matched ticker symbol. This API includes Crypto, Forex, and Stocks/Equities. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Which field to sort by. For desc place a &#x60;-&#x60; in front of the field name.  **Example:** - &#x60;?sort&#x3D;-ticker&#x60; to sort symbols Z-A - &#x60;?sort&#x3D;type&#x60; to sort symbols by type  (optional)</param>
        /// <param name="type">Get tickers of a certain type. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v2_reference_types_anchor\&quot; alt&#x3D;\&quot;Ticker Types\&quot;&gt;Ticker Types&lt;/a&gt; for available types.  **Example** - &#x60;?type&#x3D;etp&#x60; to get all ETFs - &#x60;?type&#x3D;cs&#x60; to get all Common Stocks  (optional)</param>
        /// <param name="market">Get tickers for a specific market.  **Example:** - &#x60;?market&#x3D;stocks&#x60; to get all stock tickers - &#x60;?market&#x3D;crypto&#x60; to get all crypto tickers - &#x60;?market&#x3D;fx&#x60; to get all forex tickers  (optional)</param>
        /// <param name="locale">Get tickers for a specific region/locale.  See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v2_reference_locales_anchor\&quot; alt&#x3D;\&quot;Locales\&quot;&gt;Locales&lt;/a&gt; for a list of possible values.  **Example:** - &#x60;?locale&#x3D;us&#x60; to get all US tickers - &#x60;?locale&#x3D;g&#x60; to get all Global tickers  (optional)</param>
        /// <param name="search">Search for specific tickers by name or ticker symbol.  **Example:** - &#x60;?search&#x3D;microsoft&#x60; Search tickers for microsoft  (optional)</param>
        /// <param name="perpage">The maximum number of results to be returned on each page, max 50 and default 50.  (optional)</param>
        /// <param name="page">Which page of results to return.  (optional)</param>
        /// <param name="active">Filter for only active or inactive symbols.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> V2ReferenceTickersGetAsyncWithHttpInfo (string sort = null, string type = null, string market = null, string locale = null, string search = null, int? perpage = null, int? page = null, bool? active = null);
        /// <summary>
        /// Ticker Types
        /// </summary>
        /// <remarks>
        /// Get a mapping of ticker types to their descriptive names. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> V2ReferenceTypesGetAsync ();

        /// <summary>
        /// Ticker Types
        /// </summary>
        /// <remarks>
        /// Get a mapping of ticker types to their descriptive names. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> V2ReferenceTypesGetAsyncWithHttpInfo ();
        /// <summary>
        /// Tickers vX
        /// </summary>
        /// <remarks>
        /// Query all ticker symbols which are supported by Polygon.io. This API currently includes Stocks/Equities. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Specify a ticker symbol. Defaults to empty string which queries all tickers.  (optional)</param>
        /// <param name="type">Specify the type of the tickers. Find the types that we support via our [Ticker Types API](https://polygon.io/docs/get_v2_reference_types_anchor). Defaults to empty string which queries all types.  (optional)</param>
        /// <param name="exchange">Specify the primary exchange of the asset in the ISO code format. Find more information about the ISO codes [at the ISO org website](https://www.iso20022.org/market-identifier-codes). Defaults to empty string which queries all exchanges.  (optional)</param>
        /// <param name="cusip">Specify the CUSIP code of the asset you want to search for. Find more information about CUSIP codes [at their website](https://www.cusip.com/identifiers.html#/CUSIP). Defaults to empty string which queries all CUSIPs.  (optional)</param>
        /// <param name="date">Specify a point in time to retrieve tickers available on that date. Defaults to the most recent available date.  (optional)</param>
        /// <param name="active">Specify if the tickers returned should be actively traded on the queried date. Default is true.  (optional)</param>
        /// <param name="sort">The field to sort the results on. Default is ticker.  (optional)</param>
        /// <param name="order">The order to sort the results on. Default is asc (ascending).  (optional)</param>
        /// <param name="limit">Limit the size of the response, default is 100 and max is 500. (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> VXReferenceTickersGetAsync (string ticker = null, string type = null, string exchange = null, string cusip = null, DateTime? date = null, bool? active = null, string sort = null, string order = null, int? limit = null);

        /// <summary>
        /// Tickers vX
        /// </summary>
        /// <remarks>
        /// Query all ticker symbols which are supported by Polygon.io. This API currently includes Stocks/Equities. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Specify a ticker symbol. Defaults to empty string which queries all tickers.  (optional)</param>
        /// <param name="type">Specify the type of the tickers. Find the types that we support via our [Ticker Types API](https://polygon.io/docs/get_v2_reference_types_anchor). Defaults to empty string which queries all types.  (optional)</param>
        /// <param name="exchange">Specify the primary exchange of the asset in the ISO code format. Find more information about the ISO codes [at the ISO org website](https://www.iso20022.org/market-identifier-codes). Defaults to empty string which queries all exchanges.  (optional)</param>
        /// <param name="cusip">Specify the CUSIP code of the asset you want to search for. Find more information about CUSIP codes [at their website](https://www.cusip.com/identifiers.html#/CUSIP). Defaults to empty string which queries all CUSIPs.  (optional)</param>
        /// <param name="date">Specify a point in time to retrieve tickers available on that date. Defaults to the most recent available date.  (optional)</param>
        /// <param name="active">Specify if the tickers returned should be actively traded on the queried date. Default is true.  (optional)</param>
        /// <param name="sort">The field to sort the results on. Default is ticker.  (optional)</param>
        /// <param name="order">The order to sort the results on. Default is asc (ascending).  (optional)</param>
        /// <param name="limit">Limit the size of the response, default is 100 and max is 500. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> VXReferenceTickersGetAsyncWithHttpInfo (string ticker = null, string type = null, string exchange = null, string cusip = null, DateTime? date = null, bool? active = null, string sort = null, string order = null, int? limit = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ReferenceApi : IReferenceApi
    {
        private PolygonIO.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReferenceApi(String basePath)
        {
            this.Configuration = new PolygonIO.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PolygonIO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceApi"/> class
        /// </summary>
        /// <returns></returns>
        public ReferenceApi()
        {
            this.Configuration = PolygonIO.Client.Configuration.Default;

            ExceptionFactory = PolygonIO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReferenceApi(PolygonIO.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PolygonIO.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PolygonIO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PolygonIO.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PolygonIO.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Market Status Get the current trading status of the exchanges and overall financial markets. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 V1MarketstatusNowGet ()
        {
             ApiResponse<InlineResponse20011> localVarResponse = V1MarketstatusNowGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Market Status Get the current trading status of the exchanges and overall financial markets. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse< InlineResponse20011 > V1MarketstatusNowGetWithHttpInfo ()
        {

            var localVarPath = "/v1/marketstatus/now";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MarketstatusNowGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        /// Market Status Get the current trading status of the exchanges and overall financial markets. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> V1MarketstatusNowGetAsync ()
        {
             ApiResponse<InlineResponse20011> localVarResponse = await V1MarketstatusNowGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Market Status Get the current trading status of the exchanges and overall financial markets. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> V1MarketstatusNowGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/marketstatus/now";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MarketstatusNowGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        /// Market Holidays Get upcoming market holidays and their open/close times. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20010&gt;</returns>
        public List<InlineResponse20010> V1MarketstatusUpcomingGet ()
        {
             ApiResponse<List<InlineResponse20010>> localVarResponse = V1MarketstatusUpcomingGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Market Holidays Get upcoming market holidays and their open/close times. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20010&gt;</returns>
        public ApiResponse< List<InlineResponse20010> > V1MarketstatusUpcomingGetWithHttpInfo ()
        {

            var localVarPath = "/v1/marketstatus/upcoming";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MarketstatusUpcomingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20010>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20010>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20010>)));
        }

        /// <summary>
        /// Market Holidays Get upcoming market holidays and their open/close times. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20010&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20010>> V1MarketstatusUpcomingGetAsync ()
        {
             ApiResponse<List<InlineResponse20010>> localVarResponse = await V1MarketstatusUpcomingGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Market Holidays Get upcoming market holidays and their open/close times. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20010&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20010>>> V1MarketstatusUpcomingGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/marketstatus/upcoming";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MarketstatusUpcomingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20010>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20010>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20010>)));
        }

        /// <summary>
        /// Ticker Details Get details for a ticker symbol&#x27;s company/entity.  This provides  a general overview of the entity with information such as name,  sector, exchange, logo and similar companies. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 V1MetaSymbolsStocksTickerCompanyGet (string stocksTicker)
        {
             ApiResponse<InlineResponse2003> localVarResponse = V1MetaSymbolsStocksTickerCompanyGetWithHttpInfo(stocksTicker);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ticker Details Get details for a ticker symbol&#x27;s company/entity.  This provides  a general overview of the entity with information such as name,  sector, exchange, logo and similar companies. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > V1MetaSymbolsStocksTickerCompanyGetWithHttpInfo (string stocksTicker)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling ReferenceApi->V1MetaSymbolsStocksTickerCompanyGet");

            var localVarPath = "/v1/meta/symbols/{stocksTicker}/company";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MetaSymbolsStocksTickerCompanyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Ticker Details Get details for a ticker symbol&#x27;s company/entity.  This provides  a general overview of the entity with information such as name,  sector, exchange, logo and similar companies. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> V1MetaSymbolsStocksTickerCompanyGetAsync (string stocksTicker)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await V1MetaSymbolsStocksTickerCompanyGetAsyncWithHttpInfo(stocksTicker);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ticker Details Get details for a ticker symbol&#x27;s company/entity.  This provides  a general overview of the entity with information such as name,  sector, exchange, logo and similar companies. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> V1MetaSymbolsStocksTickerCompanyGetAsyncWithHttpInfo (string stocksTicker)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling ReferenceApi->V1MetaSymbolsStocksTickerCompanyGet");

            var localVarPath = "/v1/meta/symbols/{stocksTicker}/company";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MetaSymbolsStocksTickerCompanyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Ticker News Get the most recent news articles relating to a stock ticker symbol, including a summary of the article and a link to the original source. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="perpage">The maximum number of results to be returned on each page, max 50 and default 50.  (optional)</param>
        /// <param name="page">Which page of results to return.  (optional)</param>
        /// <returns>List&lt;InlineResponse2004&gt;</returns>
        public List<InlineResponse2004> V1MetaSymbolsStocksTickerNewsGet (string stocksTicker, int? perpage = null, int? page = null)
        {
             ApiResponse<List<InlineResponse2004>> localVarResponse = V1MetaSymbolsStocksTickerNewsGetWithHttpInfo(stocksTicker, perpage, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ticker News Get the most recent news articles relating to a stock ticker symbol, including a summary of the article and a link to the original source. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="perpage">The maximum number of results to be returned on each page, max 50 and default 50.  (optional)</param>
        /// <param name="page">Which page of results to return.  (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2004&gt;</returns>
        public ApiResponse< List<InlineResponse2004> > V1MetaSymbolsStocksTickerNewsGetWithHttpInfo (string stocksTicker, int? perpage = null, int? page = null)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling ReferenceApi->V1MetaSymbolsStocksTickerNewsGet");

            var localVarPath = "/v1/meta/symbols/{stocksTicker}/news";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            if (perpage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perpage", perpage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MetaSymbolsStocksTickerNewsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2004>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2004>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2004>)));
        }

        /// <summary>
        /// Ticker News Get the most recent news articles relating to a stock ticker symbol, including a summary of the article and a link to the original source. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="perpage">The maximum number of results to be returned on each page, max 50 and default 50.  (optional)</param>
        /// <param name="page">Which page of results to return.  (optional)</param>
        /// <returns>Task of List&lt;InlineResponse2004&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2004>> V1MetaSymbolsStocksTickerNewsGetAsync (string stocksTicker, int? perpage = null, int? page = null)
        {
             ApiResponse<List<InlineResponse2004>> localVarResponse = await V1MetaSymbolsStocksTickerNewsGetAsyncWithHttpInfo(stocksTicker, perpage, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ticker News Get the most recent news articles relating to a stock ticker symbol, including a summary of the article and a link to the original source. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="perpage">The maximum number of results to be returned on each page, max 50 and default 50.  (optional)</param>
        /// <param name="page">Which page of results to return.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2004&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2004>>> V1MetaSymbolsStocksTickerNewsGetAsyncWithHttpInfo (string stocksTicker, int? perpage = null, int? page = null)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling ReferenceApi->V1MetaSymbolsStocksTickerNewsGet");

            var localVarPath = "/v1/meta/symbols/{stocksTicker}/news";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            if (perpage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perpage", perpage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MetaSymbolsStocksTickerNewsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2004>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2004>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2004>)));
        }

        /// <summary>
        /// Stock Dividends Get a list of historical dividends for a stock, including the relevant dates and the amount of the dividend. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 V2ReferenceDividendsStocksTickerGet (string stocksTicker)
        {
             ApiResponse<InlineResponse2008> localVarResponse = V2ReferenceDividendsStocksTickerGetWithHttpInfo(stocksTicker);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stock Dividends Get a list of historical dividends for a stock, including the relevant dates and the amount of the dividend. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse< InlineResponse2008 > V2ReferenceDividendsStocksTickerGetWithHttpInfo (string stocksTicker)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling ReferenceApi->V2ReferenceDividendsStocksTickerGet");

            var localVarPath = "/v2/reference/dividends/{stocksTicker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2ReferenceDividendsStocksTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// Stock Dividends Get a list of historical dividends for a stock, including the relevant dates and the amount of the dividend. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> V2ReferenceDividendsStocksTickerGetAsync (string stocksTicker)
        {
             ApiResponse<InlineResponse2008> localVarResponse = await V2ReferenceDividendsStocksTickerGetAsyncWithHttpInfo(stocksTicker);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stock Dividends Get a list of historical dividends for a stock, including the relevant dates and the amount of the dividend. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> V2ReferenceDividendsStocksTickerGetAsyncWithHttpInfo (string stocksTicker)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling ReferenceApi->V2ReferenceDividendsStocksTickerGet");

            var localVarPath = "/v2/reference/dividends/{stocksTicker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2ReferenceDividendsStocksTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// Stock Financials Get historical financial data for a stock ticker. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="limit">Limit the number of results.  (optional)</param>
        /// <param name="type">Specify a type of report to return.  Y &#x3D; Year YA &#x3D; Year annualized Q &#x3D; Quarter QA &#x3D; Quarter Annualized T &#x3D; Trailing twelve months TA &#x3D; trailing twelve months annualized  (optional)</param>
        /// <param name="sort">The direction to sort the returned results.  (optional)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 V2ReferenceFinancialsStocksTickerGet (string stocksTicker, int? limit = null, string type = null, string sort = null)
        {
             ApiResponse<InlineResponse2009> localVarResponse = V2ReferenceFinancialsStocksTickerGetWithHttpInfo(stocksTicker, limit, type, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stock Financials Get historical financial data for a stock ticker. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="limit">Limit the number of results.  (optional)</param>
        /// <param name="type">Specify a type of report to return.  Y &#x3D; Year YA &#x3D; Year annualized Q &#x3D; Quarter QA &#x3D; Quarter Annualized T &#x3D; Trailing twelve months TA &#x3D; trailing twelve months annualized  (optional)</param>
        /// <param name="sort">The direction to sort the returned results.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse< InlineResponse2009 > V2ReferenceFinancialsStocksTickerGetWithHttpInfo (string stocksTicker, int? limit = null, string type = null, string sort = null)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling ReferenceApi->V2ReferenceFinancialsStocksTickerGet");

            var localVarPath = "/v2/reference/financials/{stocksTicker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2ReferenceFinancialsStocksTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// Stock Financials Get historical financial data for a stock ticker. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="limit">Limit the number of results.  (optional)</param>
        /// <param name="type">Specify a type of report to return.  Y &#x3D; Year YA &#x3D; Year annualized Q &#x3D; Quarter QA &#x3D; Quarter Annualized T &#x3D; Trailing twelve months TA &#x3D; trailing twelve months annualized  (optional)</param>
        /// <param name="sort">The direction to sort the returned results.  (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> V2ReferenceFinancialsStocksTickerGetAsync (string stocksTicker, int? limit = null, string type = null, string sort = null)
        {
             ApiResponse<InlineResponse2009> localVarResponse = await V2ReferenceFinancialsStocksTickerGetAsyncWithHttpInfo(stocksTicker, limit, type, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stock Financials Get historical financial data for a stock ticker. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="limit">Limit the number of results.  (optional)</param>
        /// <param name="type">Specify a type of report to return.  Y &#x3D; Year YA &#x3D; Year annualized Q &#x3D; Quarter QA &#x3D; Quarter Annualized T &#x3D; Trailing twelve months TA &#x3D; trailing twelve months annualized  (optional)</param>
        /// <param name="sort">The direction to sort the returned results.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> V2ReferenceFinancialsStocksTickerGetAsyncWithHttpInfo (string stocksTicker, int? limit = null, string type = null, string sort = null)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling ReferenceApi->V2ReferenceFinancialsStocksTickerGet");

            var localVarPath = "/v2/reference/financials/{stocksTicker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2ReferenceFinancialsStocksTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// Locales Get a list of locales currently supported by Polygon.io. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 V2ReferenceLocalesGet ()
        {
             ApiResponse<InlineResponse2006> localVarResponse = V2ReferenceLocalesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Locales Get a list of locales currently supported by Polygon.io. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > V2ReferenceLocalesGetWithHttpInfo ()
        {

            var localVarPath = "/v2/reference/locales";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2ReferenceLocalesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Locales Get a list of locales currently supported by Polygon.io. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> V2ReferenceLocalesGetAsync ()
        {
             ApiResponse<InlineResponse2006> localVarResponse = await V2ReferenceLocalesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Locales Get a list of locales currently supported by Polygon.io. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> V2ReferenceLocalesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/reference/locales";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2ReferenceLocalesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Markets Get a list of markets that are currently supported by Polygon.io. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 V2ReferenceMarketsGet ()
        {
             ApiResponse<InlineResponse2005> localVarResponse = V2ReferenceMarketsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Markets Get a list of markets that are currently supported by Polygon.io. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse< InlineResponse2005 > V2ReferenceMarketsGetWithHttpInfo ()
        {

            var localVarPath = "/v2/reference/markets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2ReferenceMarketsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Markets Get a list of markets that are currently supported by Polygon.io. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> V2ReferenceMarketsGetAsync ()
        {
             ApiResponse<InlineResponse2005> localVarResponse = await V2ReferenceMarketsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Markets Get a list of markets that are currently supported by Polygon.io. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> V2ReferenceMarketsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/reference/markets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2ReferenceMarketsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Stock Splits Get a list of historical stock splits for a ticker symbol, including the execution and payment dates of the stock split, and the split ratio. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 V2ReferenceSplitsStocksTickerGet (string stocksTicker)
        {
             ApiResponse<InlineResponse2007> localVarResponse = V2ReferenceSplitsStocksTickerGetWithHttpInfo(stocksTicker);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stock Splits Get a list of historical stock splits for a ticker symbol, including the execution and payment dates of the stock split, and the split ratio. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse< InlineResponse2007 > V2ReferenceSplitsStocksTickerGetWithHttpInfo (string stocksTicker)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling ReferenceApi->V2ReferenceSplitsStocksTickerGet");

            var localVarPath = "/v2/reference/splits/{stocksTicker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2ReferenceSplitsStocksTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Stock Splits Get a list of historical stock splits for a ticker symbol, including the execution and payment dates of the stock split, and the split ratio. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> V2ReferenceSplitsStocksTickerGetAsync (string stocksTicker)
        {
             ApiResponse<InlineResponse2007> localVarResponse = await V2ReferenceSplitsStocksTickerGetAsyncWithHttpInfo(stocksTicker);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stock Splits Get a list of historical stock splits for a ticker symbol, including the execution and payment dates of the stock split, and the split ratio. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> V2ReferenceSplitsStocksTickerGetAsyncWithHttpInfo (string stocksTicker)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling ReferenceApi->V2ReferenceSplitsStocksTickerGet");

            var localVarPath = "/v2/reference/splits/{stocksTicker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2ReferenceSplitsStocksTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Tickers Query all ticker symbols which are supported by Polygon.io. Returns basic reference data for each matched ticker symbol. This API includes Crypto, Forex, and Stocks/Equities. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Which field to sort by. For desc place a &#x60;-&#x60; in front of the field name.  **Example:** - &#x60;?sort&#x3D;-ticker&#x60; to sort symbols Z-A - &#x60;?sort&#x3D;type&#x60; to sort symbols by type  (optional)</param>
        /// <param name="type">Get tickers of a certain type. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v2_reference_types_anchor\&quot; alt&#x3D;\&quot;Ticker Types\&quot;&gt;Ticker Types&lt;/a&gt; for available types.  **Example** - &#x60;?type&#x3D;etp&#x60; to get all ETFs - &#x60;?type&#x3D;cs&#x60; to get all Common Stocks  (optional)</param>
        /// <param name="market">Get tickers for a specific market.  **Example:** - &#x60;?market&#x3D;stocks&#x60; to get all stock tickers - &#x60;?market&#x3D;crypto&#x60; to get all crypto tickers - &#x60;?market&#x3D;fx&#x60; to get all forex tickers  (optional)</param>
        /// <param name="locale">Get tickers for a specific region/locale.  See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v2_reference_locales_anchor\&quot; alt&#x3D;\&quot;Locales\&quot;&gt;Locales&lt;/a&gt; for a list of possible values.  **Example:** - &#x60;?locale&#x3D;us&#x60; to get all US tickers - &#x60;?locale&#x3D;g&#x60; to get all Global tickers  (optional)</param>
        /// <param name="search">Search for specific tickers by name or ticker symbol.  **Example:** - &#x60;?search&#x3D;microsoft&#x60; Search tickers for microsoft  (optional)</param>
        /// <param name="perpage">The maximum number of results to be returned on each page, max 50 and default 50.  (optional)</param>
        /// <param name="page">Which page of results to return.  (optional)</param>
        /// <param name="active">Filter for only active or inactive symbols.  (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 V2ReferenceTickersGet (string sort = null, string type = null, string market = null, string locale = null, string search = null, int? perpage = null, int? page = null, bool? active = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = V2ReferenceTickersGetWithHttpInfo(sort, type, market, locale, search, perpage, page, active);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tickers Query all ticker symbols which are supported by Polygon.io. Returns basic reference data for each matched ticker symbol. This API includes Crypto, Forex, and Stocks/Equities. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Which field to sort by. For desc place a &#x60;-&#x60; in front of the field name.  **Example:** - &#x60;?sort&#x3D;-ticker&#x60; to sort symbols Z-A - &#x60;?sort&#x3D;type&#x60; to sort symbols by type  (optional)</param>
        /// <param name="type">Get tickers of a certain type. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v2_reference_types_anchor\&quot; alt&#x3D;\&quot;Ticker Types\&quot;&gt;Ticker Types&lt;/a&gt; for available types.  **Example** - &#x60;?type&#x3D;etp&#x60; to get all ETFs - &#x60;?type&#x3D;cs&#x60; to get all Common Stocks  (optional)</param>
        /// <param name="market">Get tickers for a specific market.  **Example:** - &#x60;?market&#x3D;stocks&#x60; to get all stock tickers - &#x60;?market&#x3D;crypto&#x60; to get all crypto tickers - &#x60;?market&#x3D;fx&#x60; to get all forex tickers  (optional)</param>
        /// <param name="locale">Get tickers for a specific region/locale.  See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v2_reference_locales_anchor\&quot; alt&#x3D;\&quot;Locales\&quot;&gt;Locales&lt;/a&gt; for a list of possible values.  **Example:** - &#x60;?locale&#x3D;us&#x60; to get all US tickers - &#x60;?locale&#x3D;g&#x60; to get all Global tickers  (optional)</param>
        /// <param name="search">Search for specific tickers by name or ticker symbol.  **Example:** - &#x60;?search&#x3D;microsoft&#x60; Search tickers for microsoft  (optional)</param>
        /// <param name="perpage">The maximum number of results to be returned on each page, max 50 and default 50.  (optional)</param>
        /// <param name="page">Which page of results to return.  (optional)</param>
        /// <param name="active">Filter for only active or inactive symbols.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > V2ReferenceTickersGetWithHttpInfo (string sort = null, string type = null, string market = null, string locale = null, string search = null, int? perpage = null, int? page = null, bool? active = null)
        {

            var localVarPath = "/v2/reference/tickers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (market != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "market", market)); // query parameter
            if (locale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locale", locale)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (perpage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perpage", perpage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2ReferenceTickersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Tickers Query all ticker symbols which are supported by Polygon.io. Returns basic reference data for each matched ticker symbol. This API includes Crypto, Forex, and Stocks/Equities. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Which field to sort by. For desc place a &#x60;-&#x60; in front of the field name.  **Example:** - &#x60;?sort&#x3D;-ticker&#x60; to sort symbols Z-A - &#x60;?sort&#x3D;type&#x60; to sort symbols by type  (optional)</param>
        /// <param name="type">Get tickers of a certain type. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v2_reference_types_anchor\&quot; alt&#x3D;\&quot;Ticker Types\&quot;&gt;Ticker Types&lt;/a&gt; for available types.  **Example** - &#x60;?type&#x3D;etp&#x60; to get all ETFs - &#x60;?type&#x3D;cs&#x60; to get all Common Stocks  (optional)</param>
        /// <param name="market">Get tickers for a specific market.  **Example:** - &#x60;?market&#x3D;stocks&#x60; to get all stock tickers - &#x60;?market&#x3D;crypto&#x60; to get all crypto tickers - &#x60;?market&#x3D;fx&#x60; to get all forex tickers  (optional)</param>
        /// <param name="locale">Get tickers for a specific region/locale.  See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v2_reference_locales_anchor\&quot; alt&#x3D;\&quot;Locales\&quot;&gt;Locales&lt;/a&gt; for a list of possible values.  **Example:** - &#x60;?locale&#x3D;us&#x60; to get all US tickers - &#x60;?locale&#x3D;g&#x60; to get all Global tickers  (optional)</param>
        /// <param name="search">Search for specific tickers by name or ticker symbol.  **Example:** - &#x60;?search&#x3D;microsoft&#x60; Search tickers for microsoft  (optional)</param>
        /// <param name="perpage">The maximum number of results to be returned on each page, max 50 and default 50.  (optional)</param>
        /// <param name="page">Which page of results to return.  (optional)</param>
        /// <param name="active">Filter for only active or inactive symbols.  (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> V2ReferenceTickersGetAsync (string sort = null, string type = null, string market = null, string locale = null, string search = null, int? perpage = null, int? page = null, bool? active = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await V2ReferenceTickersGetAsyncWithHttpInfo(sort, type, market, locale, search, perpage, page, active);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tickers Query all ticker symbols which are supported by Polygon.io. Returns basic reference data for each matched ticker symbol. This API includes Crypto, Forex, and Stocks/Equities. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Which field to sort by. For desc place a &#x60;-&#x60; in front of the field name.  **Example:** - &#x60;?sort&#x3D;-ticker&#x60; to sort symbols Z-A - &#x60;?sort&#x3D;type&#x60; to sort symbols by type  (optional)</param>
        /// <param name="type">Get tickers of a certain type. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v2_reference_types_anchor\&quot; alt&#x3D;\&quot;Ticker Types\&quot;&gt;Ticker Types&lt;/a&gt; for available types.  **Example** - &#x60;?type&#x3D;etp&#x60; to get all ETFs - &#x60;?type&#x3D;cs&#x60; to get all Common Stocks  (optional)</param>
        /// <param name="market">Get tickers for a specific market.  **Example:** - &#x60;?market&#x3D;stocks&#x60; to get all stock tickers - &#x60;?market&#x3D;crypto&#x60; to get all crypto tickers - &#x60;?market&#x3D;fx&#x60; to get all forex tickers  (optional)</param>
        /// <param name="locale">Get tickers for a specific region/locale.  See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v2_reference_locales_anchor\&quot; alt&#x3D;\&quot;Locales\&quot;&gt;Locales&lt;/a&gt; for a list of possible values.  **Example:** - &#x60;?locale&#x3D;us&#x60; to get all US tickers - &#x60;?locale&#x3D;g&#x60; to get all Global tickers  (optional)</param>
        /// <param name="search">Search for specific tickers by name or ticker symbol.  **Example:** - &#x60;?search&#x3D;microsoft&#x60; Search tickers for microsoft  (optional)</param>
        /// <param name="perpage">The maximum number of results to be returned on each page, max 50 and default 50.  (optional)</param>
        /// <param name="page">Which page of results to return.  (optional)</param>
        /// <param name="active">Filter for only active or inactive symbols.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> V2ReferenceTickersGetAsyncWithHttpInfo (string sort = null, string type = null, string market = null, string locale = null, string search = null, int? perpage = null, int? page = null, bool? active = null)
        {

            var localVarPath = "/v2/reference/tickers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (market != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "market", market)); // query parameter
            if (locale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locale", locale)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (perpage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "perpage", perpage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2ReferenceTickersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Ticker Types Get a mapping of ticker types to their descriptive names. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 V2ReferenceTypesGet ()
        {
             ApiResponse<InlineResponse2002> localVarResponse = V2ReferenceTypesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ticker Types Get a mapping of ticker types to their descriptive names. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > V2ReferenceTypesGetWithHttpInfo ()
        {

            var localVarPath = "/v2/reference/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2ReferenceTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Ticker Types Get a mapping of ticker types to their descriptive names. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> V2ReferenceTypesGetAsync ()
        {
             ApiResponse<InlineResponse2002> localVarResponse = await V2ReferenceTypesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ticker Types Get a mapping of ticker types to their descriptive names. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> V2ReferenceTypesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/reference/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2ReferenceTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Tickers vX Query all ticker symbols which are supported by Polygon.io. This API currently includes Stocks/Equities. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Specify a ticker symbol. Defaults to empty string which queries all tickers.  (optional)</param>
        /// <param name="type">Specify the type of the tickers. Find the types that we support via our [Ticker Types API](https://polygon.io/docs/get_v2_reference_types_anchor). Defaults to empty string which queries all types.  (optional)</param>
        /// <param name="exchange">Specify the primary exchange of the asset in the ISO code format. Find more information about the ISO codes [at the ISO org website](https://www.iso20022.org/market-identifier-codes). Defaults to empty string which queries all exchanges.  (optional)</param>
        /// <param name="cusip">Specify the CUSIP code of the asset you want to search for. Find more information about CUSIP codes [at their website](https://www.cusip.com/identifiers.html#/CUSIP). Defaults to empty string which queries all CUSIPs.  (optional)</param>
        /// <param name="date">Specify a point in time to retrieve tickers available on that date. Defaults to the most recent available date.  (optional)</param>
        /// <param name="active">Specify if the tickers returned should be actively traded on the queried date. Default is true.  (optional)</param>
        /// <param name="sort">The field to sort the results on. Default is ticker.  (optional)</param>
        /// <param name="order">The order to sort the results on. Default is asc (ascending).  (optional)</param>
        /// <param name="limit">Limit the size of the response, default is 100 and max is 500. (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 VXReferenceTickersGet (string ticker = null, string type = null, string exchange = null, string cusip = null, DateTime? date = null, bool? active = null, string sort = null, string order = null, int? limit = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = VXReferenceTickersGetWithHttpInfo(ticker, type, exchange, cusip, date, active, sort, order, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tickers vX Query all ticker symbols which are supported by Polygon.io. This API currently includes Stocks/Equities. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Specify a ticker symbol. Defaults to empty string which queries all tickers.  (optional)</param>
        /// <param name="type">Specify the type of the tickers. Find the types that we support via our [Ticker Types API](https://polygon.io/docs/get_v2_reference_types_anchor). Defaults to empty string which queries all types.  (optional)</param>
        /// <param name="exchange">Specify the primary exchange of the asset in the ISO code format. Find more information about the ISO codes [at the ISO org website](https://www.iso20022.org/market-identifier-codes). Defaults to empty string which queries all exchanges.  (optional)</param>
        /// <param name="cusip">Specify the CUSIP code of the asset you want to search for. Find more information about CUSIP codes [at their website](https://www.cusip.com/identifiers.html#/CUSIP). Defaults to empty string which queries all CUSIPs.  (optional)</param>
        /// <param name="date">Specify a point in time to retrieve tickers available on that date. Defaults to the most recent available date.  (optional)</param>
        /// <param name="active">Specify if the tickers returned should be actively traded on the queried date. Default is true.  (optional)</param>
        /// <param name="sort">The field to sort the results on. Default is ticker.  (optional)</param>
        /// <param name="order">The order to sort the results on. Default is asc (ascending).  (optional)</param>
        /// <param name="limit">Limit the size of the response, default is 100 and max is 500. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > VXReferenceTickersGetWithHttpInfo (string ticker = null, string type = null, string exchange = null, string cusip = null, DateTime? date = null, bool? active = null, string sort = null, string order = null, int? limit = null)
        {

            var localVarPath = "/vX/reference/tickers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ticker", ticker)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (exchange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exchange", exchange)); // query parameter
            if (cusip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cusip", cusip)); // query parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VXReferenceTickersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Tickers vX Query all ticker symbols which are supported by Polygon.io. This API currently includes Stocks/Equities. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Specify a ticker symbol. Defaults to empty string which queries all tickers.  (optional)</param>
        /// <param name="type">Specify the type of the tickers. Find the types that we support via our [Ticker Types API](https://polygon.io/docs/get_v2_reference_types_anchor). Defaults to empty string which queries all types.  (optional)</param>
        /// <param name="exchange">Specify the primary exchange of the asset in the ISO code format. Find more information about the ISO codes [at the ISO org website](https://www.iso20022.org/market-identifier-codes). Defaults to empty string which queries all exchanges.  (optional)</param>
        /// <param name="cusip">Specify the CUSIP code of the asset you want to search for. Find more information about CUSIP codes [at their website](https://www.cusip.com/identifiers.html#/CUSIP). Defaults to empty string which queries all CUSIPs.  (optional)</param>
        /// <param name="date">Specify a point in time to retrieve tickers available on that date. Defaults to the most recent available date.  (optional)</param>
        /// <param name="active">Specify if the tickers returned should be actively traded on the queried date. Default is true.  (optional)</param>
        /// <param name="sort">The field to sort the results on. Default is ticker.  (optional)</param>
        /// <param name="order">The order to sort the results on. Default is asc (ascending).  (optional)</param>
        /// <param name="limit">Limit the size of the response, default is 100 and max is 500. (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> VXReferenceTickersGetAsync (string ticker = null, string type = null, string exchange = null, string cusip = null, DateTime? date = null, bool? active = null, string sort = null, string order = null, int? limit = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await VXReferenceTickersGetAsyncWithHttpInfo(ticker, type, exchange, cusip, date, active, sort, order, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tickers vX Query all ticker symbols which are supported by Polygon.io. This API currently includes Stocks/Equities. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Specify a ticker symbol. Defaults to empty string which queries all tickers.  (optional)</param>
        /// <param name="type">Specify the type of the tickers. Find the types that we support via our [Ticker Types API](https://polygon.io/docs/get_v2_reference_types_anchor). Defaults to empty string which queries all types.  (optional)</param>
        /// <param name="exchange">Specify the primary exchange of the asset in the ISO code format. Find more information about the ISO codes [at the ISO org website](https://www.iso20022.org/market-identifier-codes). Defaults to empty string which queries all exchanges.  (optional)</param>
        /// <param name="cusip">Specify the CUSIP code of the asset you want to search for. Find more information about CUSIP codes [at their website](https://www.cusip.com/identifiers.html#/CUSIP). Defaults to empty string which queries all CUSIPs.  (optional)</param>
        /// <param name="date">Specify a point in time to retrieve tickers available on that date. Defaults to the most recent available date.  (optional)</param>
        /// <param name="active">Specify if the tickers returned should be actively traded on the queried date. Default is true.  (optional)</param>
        /// <param name="sort">The field to sort the results on. Default is ticker.  (optional)</param>
        /// <param name="order">The order to sort the results on. Default is asc (ascending).  (optional)</param>
        /// <param name="limit">Limit the size of the response, default is 100 and max is 500. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> VXReferenceTickersGetAsyncWithHttpInfo (string ticker = null, string type = null, string exchange = null, string cusip = null, DateTime? date = null, bool? active = null, string sort = null, string order = null, int? limit = null)
        {

            var localVarPath = "/vX/reference/tickers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ticker", ticker)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (exchange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exchange", exchange)); // query parameter
            if (cusip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cusip", cusip)); // query parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VXReferenceTickersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

    }
}
