/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PolygonIO.Client;
using PolygonIO.Model;
using System.Text.RegularExpressions;

namespace PolygonIO.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IStocksEquitiesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Last Quote for a Symbol
        /// </summary>
        /// <remarks>
        /// Get the most recent quote tick for a given stock. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 V1LastQuoteStocksStocksTickerGet (string stocksTicker);

        /// <summary>
        /// Last Quote for a Symbol
        /// </summary>
        /// <remarks>
        /// Get the most recent quote tick for a given stock. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> V1LastQuoteStocksStocksTickerGetWithHttpInfo (string stocksTicker);
        /// <summary>
        /// Last Trade for a Symbol
        /// </summary>
        /// <remarks>
        /// Get the most recent trade for a given stock. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 V1LastStocksStocksTickerGet (string stocksTicker);

        /// <summary>
        /// Last Trade for a Symbol
        /// </summary>
        /// <remarks>
        /// Get the most recent trade for a given stock. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> V1LastStocksStocksTickerGetWithHttpInfo (string stocksTicker);
        /// <summary>
        /// Condition Mappings
        /// </summary>
        /// <remarks>
        /// Get a unified numerical mapping for conditions on trades and quotes.  Each feed/exchange uses its own set of codes to identify conditions, so the same condition may have a different code depending on the originator of the data. Polygon.io defines its own mapping to allow for uniformly identifying a condition across feeds/exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticktype">The type of ticks to return mappings for. </param>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 V1MetaConditionsTicktypeGet (string ticktype);

        /// <summary>
        /// Condition Mappings
        /// </summary>
        /// <remarks>
        /// Get a unified numerical mapping for conditions on trades and quotes.  Each feed/exchange uses its own set of codes to identify conditions, so the same condition may have a different code depending on the originator of the data. Polygon.io defines its own mapping to allow for uniformly identifying a condition across feeds/exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticktype">The type of ticks to return mappings for. </param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> V1MetaConditionsTicktypeGetWithHttpInfo (string ticktype);
        /// <summary>
        /// Stock Exchanges
        /// </summary>
        /// <remarks>
        /// Get a list of stock exchanges which are supported by Polygon.io. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20012&gt;</returns>
        List<InlineResponse20012> V1MetaExchangesGet ();

        /// <summary>
        /// Stock Exchanges
        /// </summary>
        /// <remarks>
        /// Get a list of stock exchanges which are supported by Polygon.io. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20012&gt;</returns>
        ApiResponse<List<InlineResponse20012>> V1MetaExchangesGetWithHttpInfo ();
        /// <summary>
        /// Daily Open/Close
        /// </summary>
        /// <remarks>
        /// Get the open, close and afterhours prices of a stock symbol on a certain date. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="date">The date of the requested open/close in the format YYYY-MM-DD.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 V1OpenCloseStocksTickerDateGet (string stocksTicker, string date, bool? unadjusted = null);

        /// <summary>
        /// Daily Open/Close
        /// </summary>
        /// <remarks>
        /// Get the open, close and afterhours prices of a stock symbol on a certain date. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="date">The date of the requested open/close in the format YYYY-MM-DD.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> V1OpenCloseStocksTickerDateGetWithHttpInfo (string stocksTicker, string date, bool? unadjusted = null);
        /// <summary>
        /// Grouped Daily (Bars)
        /// </summary>
        /// <remarks>
        /// Get the daily open, high, low, and close (OHLC) for the entire stocks/equities markets. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 V2AggsGroupedLocaleUsMarketStocksDateGet (string date, bool? unadjusted = null);

        /// <summary>
        /// Grouped Daily (Bars)
        /// </summary>
        /// <remarks>
        /// Get the daily open, high, low, and close (OHLC) for the entire stocks/equities markets. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> V2AggsGroupedLocaleUsMarketStocksDateGetWithHttpInfo (string date, bool? unadjusted = null);
        /// <summary>
        /// Previous Close
        /// </summary>
        /// <remarks>
        /// Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified stock ticker. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 V2AggsTickerStocksTickerPrevGet (string stocksTicker, bool? unadjusted = null);

        /// <summary>
        /// Previous Close
        /// </summary>
        /// <remarks>
        /// Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified stock ticker. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> V2AggsTickerStocksTickerPrevGetWithHttpInfo (string stocksTicker, bool? unadjusted = null);
        /// <summary>
        /// Aggregates (Bars)
        /// </summary>
        /// <remarks>
        /// Get aggregate bars for a stock over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet (string stocksTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null);

        /// <summary>
        /// Aggregates (Bars)
        /// </summary>
        /// <remarks>
        /// Get aggregate bars for a stock over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetWithHttpInfo (string stocksTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null);
        /// <summary>
        /// Snapshot - Gainers/Losers
        /// </summary>
        /// <remarks>
        /// Get the current top 20 gainers or losers of the day in stocks/equities markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>InlineResponse20023</returns>
        InlineResponse20023 V2SnapshotLocaleUsMarketsStocksDirectionGet (string direction);

        /// <summary>
        /// Snapshot - Gainers/Losers
        /// </summary>
        /// <remarks>
        /// Get the current top 20 gainers or losers of the day in stocks/equities markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        ApiResponse<InlineResponse20023> V2SnapshotLocaleUsMarketsStocksDirectionGetWithHttpInfo (string direction);
        /// <summary>
        /// Snapshot - All Tickers
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded stock symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 V2SnapshotLocaleUsMarketsStocksTickersGet (List<string> tickers = null);

        /// <summary>
        /// Snapshot - All Tickers
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded stock symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> V2SnapshotLocaleUsMarketsStocksTickersGetWithHttpInfo (List<string> tickers = null);
        /// <summary>
        /// Snapshot - Ticker
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded stock ticker. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGet (string stocksTicker);

        /// <summary>
        /// Snapshot - Ticker
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded stock ticker. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGetWithHttpInfo (string stocksTicker);
        /// <summary>
        /// Quotes (NBBO)
        /// </summary>
        /// <remarks>
        /// Get NBBO quotes for a given ticker symbol on a specified date. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The ticker symbol we want quotes for.</param>
        /// <param name="date">The date/day of the quotes to retrieve in the format YYYY-MM-DD.</param>
        /// <param name="timestamp">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="timestampLimit">The maximum timestamp allowed in the results.  (optional)</param>
        /// <param name="reverse">Reverse the order of the results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 50000 and default 5000. (optional)</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 V2TicksStocksNbboTickerDateGet (string ticker, string date, int? timestamp = null, int? timestampLimit = null, bool? reverse = null, int? limit = null);

        /// <summary>
        /// Quotes (NBBO)
        /// </summary>
        /// <remarks>
        /// Get NBBO quotes for a given ticker symbol on a specified date. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The ticker symbol we want quotes for.</param>
        /// <param name="date">The date/day of the quotes to retrieve in the format YYYY-MM-DD.</param>
        /// <param name="timestamp">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="timestampLimit">The maximum timestamp allowed in the results.  (optional)</param>
        /// <param name="reverse">Reverse the order of the results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 50000 and default 5000. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> V2TicksStocksNbboTickerDateGetWithHttpInfo (string ticker, string date, int? timestamp = null, int? timestampLimit = null, bool? reverse = null, int? limit = null);
        /// <summary>
        /// Trades
        /// </summary>
        /// <remarks>
        /// Get trades for a given ticker symbol on a specified date. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The ticker symbol we want trades for.</param>
        /// <param name="date">The date/day of the trades to retrieve in the format YYYY-MM-DD.</param>
        /// <param name="timestamp">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="timestampLimit">The maximum timestamp allowed in the results.  (optional)</param>
        /// <param name="reverse">Reverse the order of the results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 50000 and default 5000. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 V2TicksStocksTradesTickerDateGet (string ticker, DateTime? date, int? timestamp = null, int? timestampLimit = null, bool? reverse = null, int? limit = null);

        /// <summary>
        /// Trades
        /// </summary>
        /// <remarks>
        /// Get trades for a given ticker symbol on a specified date. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The ticker symbol we want trades for.</param>
        /// <param name="date">The date/day of the trades to retrieve in the format YYYY-MM-DD.</param>
        /// <param name="timestamp">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="timestampLimit">The maximum timestamp allowed in the results.  (optional)</param>
        /// <param name="reverse">Reverse the order of the results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 50000 and default 5000. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> V2TicksStocksTradesTickerDateGetWithHttpInfo (string ticker, DateTime? date, int? timestamp = null, int? timestampLimit = null, bool? reverse = null, int? limit = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Last Quote for a Symbol
        /// </summary>
        /// <remarks>
        /// Get the most recent quote tick for a given stock. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> V1LastQuoteStocksStocksTickerGetAsync (string stocksTicker);

        /// <summary>
        /// Last Quote for a Symbol
        /// </summary>
        /// <remarks>
        /// Get the most recent quote tick for a given stock. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> V1LastQuoteStocksStocksTickerGetAsyncWithHttpInfo (string stocksTicker);
        /// <summary>
        /// Last Trade for a Symbol
        /// </summary>
        /// <remarks>
        /// Get the most recent trade for a given stock. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> V1LastStocksStocksTickerGetAsync (string stocksTicker);

        /// <summary>
        /// Last Trade for a Symbol
        /// </summary>
        /// <remarks>
        /// Get the most recent trade for a given stock. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> V1LastStocksStocksTickerGetAsyncWithHttpInfo (string stocksTicker);
        /// <summary>
        /// Condition Mappings
        /// </summary>
        /// <remarks>
        /// Get a unified numerical mapping for conditions on trades and quotes.  Each feed/exchange uses its own set of codes to identify conditions, so the same condition may have a different code depending on the originator of the data. Polygon.io defines its own mapping to allow for uniformly identifying a condition across feeds/exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticktype">The type of ticks to return mappings for. </param>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> V1MetaConditionsTicktypeGetAsync (string ticktype);

        /// <summary>
        /// Condition Mappings
        /// </summary>
        /// <remarks>
        /// Get a unified numerical mapping for conditions on trades and quotes.  Each feed/exchange uses its own set of codes to identify conditions, so the same condition may have a different code depending on the originator of the data. Polygon.io defines its own mapping to allow for uniformly identifying a condition across feeds/exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticktype">The type of ticks to return mappings for. </param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> V1MetaConditionsTicktypeGetAsyncWithHttpInfo (string ticktype);
        /// <summary>
        /// Stock Exchanges
        /// </summary>
        /// <remarks>
        /// Get a list of stock exchanges which are supported by Polygon.io. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20012&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20012>> V1MetaExchangesGetAsync ();

        /// <summary>
        /// Stock Exchanges
        /// </summary>
        /// <remarks>
        /// Get a list of stock exchanges which are supported by Polygon.io. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20012&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20012>>> V1MetaExchangesGetAsyncWithHttpInfo ();
        /// <summary>
        /// Daily Open/Close
        /// </summary>
        /// <remarks>
        /// Get the open, close and afterhours prices of a stock symbol on a certain date. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="date">The date of the requested open/close in the format YYYY-MM-DD.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> V1OpenCloseStocksTickerDateGetAsync (string stocksTicker, string date, bool? unadjusted = null);

        /// <summary>
        /// Daily Open/Close
        /// </summary>
        /// <remarks>
        /// Get the open, close and afterhours prices of a stock symbol on a certain date. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="date">The date of the requested open/close in the format YYYY-MM-DD.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> V1OpenCloseStocksTickerDateGetAsyncWithHttpInfo (string stocksTicker, string date, bool? unadjusted = null);
        /// <summary>
        /// Grouped Daily (Bars)
        /// </summary>
        /// <remarks>
        /// Get the daily open, high, low, and close (OHLC) for the entire stocks/equities markets. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> V2AggsGroupedLocaleUsMarketStocksDateGetAsync (string date, bool? unadjusted = null);

        /// <summary>
        /// Grouped Daily (Bars)
        /// </summary>
        /// <remarks>
        /// Get the daily open, high, low, and close (OHLC) for the entire stocks/equities markets. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> V2AggsGroupedLocaleUsMarketStocksDateGetAsyncWithHttpInfo (string date, bool? unadjusted = null);
        /// <summary>
        /// Previous Close
        /// </summary>
        /// <remarks>
        /// Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified stock ticker. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> V2AggsTickerStocksTickerPrevGetAsync (string stocksTicker, bool? unadjusted = null);

        /// <summary>
        /// Previous Close
        /// </summary>
        /// <remarks>
        /// Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified stock ticker. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> V2AggsTickerStocksTickerPrevGetAsyncWithHttpInfo (string stocksTicker, bool? unadjusted = null);
        /// <summary>
        /// Aggregates (Bars)
        /// </summary>
        /// <remarks>
        /// Get aggregate bars for a stock over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetAsync (string stocksTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null);

        /// <summary>
        /// Aggregates (Bars)
        /// </summary>
        /// <remarks>
        /// Get aggregate bars for a stock over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetAsyncWithHttpInfo (string stocksTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null);
        /// <summary>
        /// Snapshot - Gainers/Losers
        /// </summary>
        /// <remarks>
        /// Get the current top 20 gainers or losers of the day in stocks/equities markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>Task of InlineResponse20023</returns>
        System.Threading.Tasks.Task<InlineResponse20023> V2SnapshotLocaleUsMarketsStocksDirectionGetAsync (string direction);

        /// <summary>
        /// Snapshot - Gainers/Losers
        /// </summary>
        /// <remarks>
        /// Get the current top 20 gainers or losers of the day in stocks/equities markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> V2SnapshotLocaleUsMarketsStocksDirectionGetAsyncWithHttpInfo (string direction);
        /// <summary>
        /// Snapshot - All Tickers
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded stock symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> V2SnapshotLocaleUsMarketsStocksTickersGetAsync (List<string> tickers = null);

        /// <summary>
        /// Snapshot - All Tickers
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded stock symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> V2SnapshotLocaleUsMarketsStocksTickersGetAsyncWithHttpInfo (List<string> tickers = null);
        /// <summary>
        /// Snapshot - Ticker
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded stock ticker. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGetAsync (string stocksTicker);

        /// <summary>
        /// Snapshot - Ticker
        /// </summary>
        /// <remarks>
        /// Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded stock ticker. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGetAsyncWithHttpInfo (string stocksTicker);
        /// <summary>
        /// Quotes (NBBO)
        /// </summary>
        /// <remarks>
        /// Get NBBO quotes for a given ticker symbol on a specified date. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The ticker symbol we want quotes for.</param>
        /// <param name="date">The date/day of the quotes to retrieve in the format YYYY-MM-DD.</param>
        /// <param name="timestamp">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="timestampLimit">The maximum timestamp allowed in the results.  (optional)</param>
        /// <param name="reverse">Reverse the order of the results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 50000 and default 5000. (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> V2TicksStocksNbboTickerDateGetAsync (string ticker, string date, int? timestamp = null, int? timestampLimit = null, bool? reverse = null, int? limit = null);

        /// <summary>
        /// Quotes (NBBO)
        /// </summary>
        /// <remarks>
        /// Get NBBO quotes for a given ticker symbol on a specified date. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The ticker symbol we want quotes for.</param>
        /// <param name="date">The date/day of the quotes to retrieve in the format YYYY-MM-DD.</param>
        /// <param name="timestamp">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="timestampLimit">The maximum timestamp allowed in the results.  (optional)</param>
        /// <param name="reverse">Reverse the order of the results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 50000 and default 5000. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> V2TicksStocksNbboTickerDateGetAsyncWithHttpInfo (string ticker, string date, int? timestamp = null, int? timestampLimit = null, bool? reverse = null, int? limit = null);
        /// <summary>
        /// Trades
        /// </summary>
        /// <remarks>
        /// Get trades for a given ticker symbol on a specified date. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The ticker symbol we want trades for.</param>
        /// <param name="date">The date/day of the trades to retrieve in the format YYYY-MM-DD.</param>
        /// <param name="timestamp">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="timestampLimit">The maximum timestamp allowed in the results.  (optional)</param>
        /// <param name="reverse">Reverse the order of the results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 50000 and default 5000. (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> V2TicksStocksTradesTickerDateGetAsync (string ticker, DateTime? date, int? timestamp = null, int? timestampLimit = null, bool? reverse = null, int? limit = null);

        /// <summary>
        /// Trades
        /// </summary>
        /// <remarks>
        /// Get trades for a given ticker symbol on a specified date. 
        /// </remarks>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The ticker symbol we want trades for.</param>
        /// <param name="date">The date/day of the trades to retrieve in the format YYYY-MM-DD.</param>
        /// <param name="timestamp">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="timestampLimit">The maximum timestamp allowed in the results.  (optional)</param>
        /// <param name="reverse">Reverse the order of the results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 50000 and default 5000. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> V2TicksStocksTradesTickerDateGetAsyncWithHttpInfo (string ticker, DateTime? date, int? timestamp = null, int? timestampLimit = null, bool? reverse = null, int? limit = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class StocksEquitiesApi : IStocksEquitiesApi
    {
        private PolygonIO.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StocksEquitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StocksEquitiesApi(String basePath)
        {
            this.Configuration = new PolygonIO.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PolygonIO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StocksEquitiesApi"/> class
        /// </summary>
        /// <returns></returns>
        public StocksEquitiesApi()
        {
            this.Configuration = PolygonIO.Client.Configuration.Default;

            ExceptionFactory = PolygonIO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StocksEquitiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StocksEquitiesApi(PolygonIO.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PolygonIO.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PolygonIO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PolygonIO.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PolygonIO.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Last Quote for a Symbol Get the most recent quote tick for a given stock. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 V1LastQuoteStocksStocksTickerGet (string stocksTicker)
        {
             ApiResponse<InlineResponse20016> localVarResponse = V1LastQuoteStocksStocksTickerGetWithHttpInfo(stocksTicker);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Last Quote for a Symbol Get the most recent quote tick for a given stock. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public ApiResponse< InlineResponse20016 > V1LastQuoteStocksStocksTickerGetWithHttpInfo (string stocksTicker)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling StocksEquitiesApi->V1LastQuoteStocksStocksTickerGet");

            var localVarPath = "/v1/last_quote/stocks/{stocksTicker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1LastQuoteStocksStocksTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20016) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        /// Last Quote for a Symbol Get the most recent quote tick for a given stock. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016> V1LastQuoteStocksStocksTickerGetAsync (string stocksTicker)
        {
             ApiResponse<InlineResponse20016> localVarResponse = await V1LastQuoteStocksStocksTickerGetAsyncWithHttpInfo(stocksTicker);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Last Quote for a Symbol Get the most recent quote tick for a given stock. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> V1LastQuoteStocksStocksTickerGetAsyncWithHttpInfo (string stocksTicker)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling StocksEquitiesApi->V1LastQuoteStocksStocksTickerGet");

            var localVarPath = "/v1/last_quote/stocks/{stocksTicker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1LastQuoteStocksStocksTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20016) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        /// Last Trade for a Symbol Get the most recent trade for a given stock. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 V1LastStocksStocksTickerGet (string stocksTicker)
        {
             ApiResponse<InlineResponse20015> localVarResponse = V1LastStocksStocksTickerGetWithHttpInfo(stocksTicker);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Last Trade for a Symbol Get the most recent trade for a given stock. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > V1LastStocksStocksTickerGetWithHttpInfo (string stocksTicker)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling StocksEquitiesApi->V1LastStocksStocksTickerGet");

            var localVarPath = "/v1/last/stocks/{stocksTicker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1LastStocksStocksTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20015) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// Last Trade for a Symbol Get the most recent trade for a given stock. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> V1LastStocksStocksTickerGetAsync (string stocksTicker)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await V1LastStocksStocksTickerGetAsyncWithHttpInfo(stocksTicker);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Last Trade for a Symbol Get the most recent trade for a given stock. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> V1LastStocksStocksTickerGetAsyncWithHttpInfo (string stocksTicker)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling StocksEquitiesApi->V1LastStocksStocksTickerGet");

            var localVarPath = "/v1/last/stocks/{stocksTicker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1LastStocksStocksTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20015) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// Condition Mappings Get a unified numerical mapping for conditions on trades and quotes.  Each feed/exchange uses its own set of codes to identify conditions, so the same condition may have a different code depending on the originator of the data. Polygon.io defines its own mapping to allow for uniformly identifying a condition across feeds/exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticktype">The type of ticks to return mappings for. </param>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 V1MetaConditionsTicktypeGet (string ticktype)
        {
             ApiResponse<InlineResponse20020> localVarResponse = V1MetaConditionsTicktypeGetWithHttpInfo(ticktype);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Condition Mappings Get a unified numerical mapping for conditions on trades and quotes.  Each feed/exchange uses its own set of codes to identify conditions, so the same condition may have a different code depending on the originator of the data. Polygon.io defines its own mapping to allow for uniformly identifying a condition across feeds/exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticktype">The type of ticks to return mappings for. </param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public ApiResponse< InlineResponse20020 > V1MetaConditionsTicktypeGetWithHttpInfo (string ticktype)
        {
            // verify the required parameter 'ticktype' is set
            if (ticktype == null)
                throw new ApiException(400, "Missing required parameter 'ticktype' when calling StocksEquitiesApi->V1MetaConditionsTicktypeGet");

            var localVarPath = "/v1/meta/conditions/{ticktype}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticktype != null) localVarPathParams.Add("ticktype", this.Configuration.ApiClient.ParameterToString(ticktype)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MetaConditionsTicktypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20020>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20020) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20020)));
        }

        /// <summary>
        /// Condition Mappings Get a unified numerical mapping for conditions on trades and quotes.  Each feed/exchange uses its own set of codes to identify conditions, so the same condition may have a different code depending on the originator of the data. Polygon.io defines its own mapping to allow for uniformly identifying a condition across feeds/exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticktype">The type of ticks to return mappings for. </param>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020> V1MetaConditionsTicktypeGetAsync (string ticktype)
        {
             ApiResponse<InlineResponse20020> localVarResponse = await V1MetaConditionsTicktypeGetAsyncWithHttpInfo(ticktype);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Condition Mappings Get a unified numerical mapping for conditions on trades and quotes.  Each feed/exchange uses its own set of codes to identify conditions, so the same condition may have a different code depending on the originator of the data. Polygon.io defines its own mapping to allow for uniformly identifying a condition across feeds/exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticktype">The type of ticks to return mappings for. </param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> V1MetaConditionsTicktypeGetAsyncWithHttpInfo (string ticktype)
        {
            // verify the required parameter 'ticktype' is set
            if (ticktype == null)
                throw new ApiException(400, "Missing required parameter 'ticktype' when calling StocksEquitiesApi->V1MetaConditionsTicktypeGet");

            var localVarPath = "/v1/meta/conditions/{ticktype}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticktype != null) localVarPathParams.Add("ticktype", this.Configuration.ApiClient.ParameterToString(ticktype)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MetaConditionsTicktypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20020>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20020) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20020)));
        }

        /// <summary>
        /// Stock Exchanges Get a list of stock exchanges which are supported by Polygon.io. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20012&gt;</returns>
        public List<InlineResponse20012> V1MetaExchangesGet ()
        {
             ApiResponse<List<InlineResponse20012>> localVarResponse = V1MetaExchangesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stock Exchanges Get a list of stock exchanges which are supported by Polygon.io. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20012&gt;</returns>
        public ApiResponse< List<InlineResponse20012> > V1MetaExchangesGetWithHttpInfo ()
        {

            var localVarPath = "/v1/meta/exchanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MetaExchangesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20012>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20012>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20012>)));
        }

        /// <summary>
        /// Stock Exchanges Get a list of stock exchanges which are supported by Polygon.io. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20012&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20012>> V1MetaExchangesGetAsync ()
        {
             ApiResponse<List<InlineResponse20012>> localVarResponse = await V1MetaExchangesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stock Exchanges Get a list of stock exchanges which are supported by Polygon.io. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20012&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20012>>> V1MetaExchangesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/meta/exchanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MetaExchangesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20012>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20012>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20012>)));
        }

        /// <summary>
        /// Daily Open/Close Get the open, close and afterhours prices of a stock symbol on a certain date. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="date">The date of the requested open/close in the format YYYY-MM-DD.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 V1OpenCloseStocksTickerDateGet (string stocksTicker, string date, bool? unadjusted = null)
        {
             ApiResponse<InlineResponse20017> localVarResponse = V1OpenCloseStocksTickerDateGetWithHttpInfo(stocksTicker, date, unadjusted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Daily Open/Close Get the open, close and afterhours prices of a stock symbol on a certain date. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="date">The date of the requested open/close in the format YYYY-MM-DD.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public ApiResponse< InlineResponse20017 > V1OpenCloseStocksTickerDateGetWithHttpInfo (string stocksTicker, string date, bool? unadjusted = null)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling StocksEquitiesApi->V1OpenCloseStocksTickerDateGet");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling StocksEquitiesApi->V1OpenCloseStocksTickerDateGet");

            var localVarPath = "/v1/open-close/{stocksTicker}/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OpenCloseStocksTickerDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20017) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        /// Daily Open/Close Get the open, close and afterhours prices of a stock symbol on a certain date. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="date">The date of the requested open/close in the format YYYY-MM-DD.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> V1OpenCloseStocksTickerDateGetAsync (string stocksTicker, string date, bool? unadjusted = null)
        {
             ApiResponse<InlineResponse20017> localVarResponse = await V1OpenCloseStocksTickerDateGetAsyncWithHttpInfo(stocksTicker, date, unadjusted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Daily Open/Close Get the open, close and afterhours prices of a stock symbol on a certain date. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="date">The date of the requested open/close in the format YYYY-MM-DD.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> V1OpenCloseStocksTickerDateGetAsyncWithHttpInfo (string stocksTicker, string date, bool? unadjusted = null)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling StocksEquitiesApi->V1OpenCloseStocksTickerDateGet");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling StocksEquitiesApi->V1OpenCloseStocksTickerDateGet");

            var localVarPath = "/v1/open-close/{stocksTicker}/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OpenCloseStocksTickerDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20017) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        /// Grouped Daily (Bars) Get the daily open, high, low, and close (OHLC) for the entire stocks/equities markets. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 V2AggsGroupedLocaleUsMarketStocksDateGet (string date, bool? unadjusted = null)
        {
             ApiResponse<InlineResponse20018> localVarResponse = V2AggsGroupedLocaleUsMarketStocksDateGetWithHttpInfo(date, unadjusted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Grouped Daily (Bars) Get the daily open, high, low, and close (OHLC) for the entire stocks/equities markets. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public ApiResponse< InlineResponse20018 > V2AggsGroupedLocaleUsMarketStocksDateGetWithHttpInfo (string date, bool? unadjusted = null)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling StocksEquitiesApi->V2AggsGroupedLocaleUsMarketStocksDateGet");

            var localVarPath = "/v2/aggs/grouped/locale/us/market/stocks/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsGroupedLocaleUsMarketStocksDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20018) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        /// Grouped Daily (Bars) Get the daily open, high, low, and close (OHLC) for the entire stocks/equities markets. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018> V2AggsGroupedLocaleUsMarketStocksDateGetAsync (string date, bool? unadjusted = null)
        {
             ApiResponse<InlineResponse20018> localVarResponse = await V2AggsGroupedLocaleUsMarketStocksDateGetAsyncWithHttpInfo(date, unadjusted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Grouped Daily (Bars) Get the daily open, high, low, and close (OHLC) for the entire stocks/equities markets. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The beginning date for the aggregate window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> V2AggsGroupedLocaleUsMarketStocksDateGetAsyncWithHttpInfo (string date, bool? unadjusted = null)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling StocksEquitiesApi->V2AggsGroupedLocaleUsMarketStocksDateGet");

            var localVarPath = "/v2/aggs/grouped/locale/us/market/stocks/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsGroupedLocaleUsMarketStocksDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20018) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        /// Previous Close Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified stock ticker. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 V2AggsTickerStocksTickerPrevGet (string stocksTicker, bool? unadjusted = null)
        {
             ApiResponse<InlineResponse20019> localVarResponse = V2AggsTickerStocksTickerPrevGetWithHttpInfo(stocksTicker, unadjusted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Previous Close Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified stock ticker. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse< InlineResponse20019 > V2AggsTickerStocksTickerPrevGetWithHttpInfo (string stocksTicker, bool? unadjusted = null)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling StocksEquitiesApi->V2AggsTickerStocksTickerPrevGet");

            var localVarPath = "/v2/aggs/ticker/{stocksTicker}/prev";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsTickerStocksTickerPrevGet", localVarResponse);
                if (exception != null) throw exception;
            }

            //remove "T" from result
            localVarResponse.Content = Regex.Replace(localVarResponse.Content, @"""T"":\s*""[\w.-]+"",?", "");

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        /// Previous Close Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified stock ticker. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> V2AggsTickerStocksTickerPrevGetAsync (string stocksTicker, bool? unadjusted = null)
        {
             ApiResponse<InlineResponse20019> localVarResponse = await V2AggsTickerStocksTickerPrevGetAsyncWithHttpInfo(stocksTicker, unadjusted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Previous Close Get the previous day&#x27;s open, high, low, and close (OHLC) for the specified stock ticker. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> V2AggsTickerStocksTickerPrevGetAsyncWithHttpInfo (string stocksTicker, bool? unadjusted = null)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling StocksEquitiesApi->V2AggsTickerStocksTickerPrevGet");

            var localVarPath = "/v2/aggs/ticker/{stocksTicker}/prev";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsTickerStocksTickerPrevGet", localVarResponse);
                if (exception != null) throw exception;
            }

            //remove "T" from result
            localVarResponse.Content = Regex.Replace(localVarResponse.Content, @"""T"":\s*""[\w.-]+"",?", "");

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        /// Aggregates (Bars) Get aggregate bars for a stock over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet (string stocksTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null)
        {
             ApiResponse<InlineResponse20019> localVarResponse = V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetWithHttpInfo(stocksTicker, multiplier, timespan, from, to, unadjusted, sort, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Aggregates (Bars) Get aggregate bars for a stock over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse< InlineResponse20019 > V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetWithHttpInfo (string stocksTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling StocksEquitiesApi->V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'multiplier' is set
            if (multiplier == null)
                throw new ApiException(400, "Missing required parameter 'multiplier' when calling StocksEquitiesApi->V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'timespan' is set
            if (timespan == null)
                throw new ApiException(400, "Missing required parameter 'timespan' when calling StocksEquitiesApi->V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling StocksEquitiesApi->V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling StocksEquitiesApi->V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet");

            var localVarPath = "/v2/aggs/ticker/{stocksTicker}/range/{multiplier}/{timespan}/{from}/{to}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            if (multiplier != null) localVarPathParams.Add("multiplier", this.Configuration.ApiClient.ParameterToString(multiplier)); // path parameter
            if (timespan != null) localVarPathParams.Add("timespan", this.Configuration.ApiClient.ParameterToString(timespan)); // path parameter
            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        /// Aggregates (Bars) Get aggregate bars for a stock over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetAsync (string stocksTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null)
        {
             ApiResponse<InlineResponse20019> localVarResponse = await V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetAsyncWithHttpInfo(stocksTicker, multiplier, timespan, from, to, unadjusted, sort, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Aggregates (Bars) Get aggregate bars for a stock over a given date range in custom time window sizes. &lt;br /&gt; &lt;br /&gt; For example, if timespan &#x3D; ‘minute’ and multiplier &#x3D; ‘5’ then 5-minute bars will be returned. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <param name="multiplier">The size of the timespan multiplier.</param>
        /// <param name="timespan">The size of the time window.</param>
        /// <param name="from">The start of the aggregate time window.</param>
        /// <param name="to">The end of the aggregate time window.</param>
        /// <param name="unadjusted">Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to true to get results that are NOT adjusted for splits.  (optional)</param>
        /// <param name="sort">Sort the results by timestamp. &#x60;asc&#x60; will return results in ascending order (oldest at the top), &#x60;desc&#x60; will return results in descending order (newest at the top).  (optional)</param>
        /// <param name="limit">Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 5000. Read more about how limit is used to calculate aggregate results in our article on  &lt;a href&#x3D;\&quot;https://polygon.io/blog/aggs-api-updates/\&quot; target&#x3D;\&quot;_blank\&quot; alt&#x3D;\&quot;Aggregate Data API Improvements\&quot;&gt;Aggregate Data API Improvements&lt;/a&gt;.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetAsyncWithHttpInfo (string stocksTicker, int? multiplier, string timespan, string from, string to, bool? unadjusted = null, string sort = null, int? limit = null)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling StocksEquitiesApi->V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'multiplier' is set
            if (multiplier == null)
                throw new ApiException(400, "Missing required parameter 'multiplier' when calling StocksEquitiesApi->V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'timespan' is set
            if (timespan == null)
                throw new ApiException(400, "Missing required parameter 'timespan' when calling StocksEquitiesApi->V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling StocksEquitiesApi->V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling StocksEquitiesApi->V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet");

            var localVarPath = "/v2/aggs/ticker/{stocksTicker}/range/{multiplier}/{timespan}/{from}/{to}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            if (multiplier != null) localVarPathParams.Add("multiplier", this.Configuration.ApiClient.ParameterToString(multiplier)); // path parameter
            if (timespan != null) localVarPathParams.Add("timespan", this.Configuration.ApiClient.ParameterToString(timespan)); // path parameter
            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (unadjusted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unadjusted", unadjusted)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet", localVarResponse);
                if (exception != null) throw exception;
            }

            //remove "T" from result
            localVarResponse.Content = Regex.Replace(localVarResponse.Content, @"""T"":\s*""[\w.-]+"",?", "");

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        /// Snapshot - Gainers/Losers Get the current top 20 gainers or losers of the day in stocks/equities markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>InlineResponse20023</returns>
        public InlineResponse20023 V2SnapshotLocaleUsMarketsStocksDirectionGet (string direction)
        {
             ApiResponse<InlineResponse20023> localVarResponse = V2SnapshotLocaleUsMarketsStocksDirectionGetWithHttpInfo(direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Snapshot - Gainers/Losers Get the current top 20 gainers or losers of the day in stocks/equities markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        public ApiResponse< InlineResponse20023 > V2SnapshotLocaleUsMarketsStocksDirectionGetWithHttpInfo (string direction)
        {
            // verify the required parameter 'direction' is set
            if (direction == null)
                throw new ApiException(400, "Missing required parameter 'direction' when calling StocksEquitiesApi->V2SnapshotLocaleUsMarketsStocksDirectionGet");

            var localVarPath = "/v2/snapshot/locale/us/markets/stocks/{direction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (direction != null) localVarPathParams.Add("direction", this.Configuration.ApiClient.ParameterToString(direction)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleUsMarketsStocksDirectionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20023) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
        }

        /// <summary>
        /// Snapshot - Gainers/Losers Get the current top 20 gainers or losers of the day in stocks/equities markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>Task of InlineResponse20023</returns>
        public async System.Threading.Tasks.Task<InlineResponse20023> V2SnapshotLocaleUsMarketsStocksDirectionGetAsync (string direction)
        {
             ApiResponse<InlineResponse20023> localVarResponse = await V2SnapshotLocaleUsMarketsStocksDirectionGetAsyncWithHttpInfo(direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Snapshot - Gainers/Losers Get the current top 20 gainers or losers of the day in stocks/equities markets. &lt;br /&gt; &lt;br /&gt; Top gainers are those tickers whose price has increased by the highest percentage since the previous day&#x27;s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day&#x27;s close. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The direction of the snapshot results to return. </param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> V2SnapshotLocaleUsMarketsStocksDirectionGetAsyncWithHttpInfo (string direction)
        {
            // verify the required parameter 'direction' is set
            if (direction == null)
                throw new ApiException(400, "Missing required parameter 'direction' when calling StocksEquitiesApi->V2SnapshotLocaleUsMarketsStocksDirectionGet");

            var localVarPath = "/v2/snapshot/locale/us/markets/stocks/{direction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (direction != null) localVarPathParams.Add("direction", this.Configuration.ApiClient.ParameterToString(direction)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleUsMarketsStocksDirectionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20023) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
        }

        /// <summary>
        /// Snapshot - All Tickers Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded stock symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 V2SnapshotLocaleUsMarketsStocksTickersGet (List<string> tickers = null)
        {
             ApiResponse<InlineResponse20021> localVarResponse = V2SnapshotLocaleUsMarketsStocksTickersGetWithHttpInfo(tickers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Snapshot - All Tickers Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded stock symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public ApiResponse< InlineResponse20021 > V2SnapshotLocaleUsMarketsStocksTickersGetWithHttpInfo (List<string> tickers = null)
        {

            var localVarPath = "/v2/snapshot/locale/us/markets/stocks/tickers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (tickers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tickers", tickers)); // query parameter
            if (tickers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tickers", string.Join(",",tickers))); // query parameter


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleUsMarketsStocksTickersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        /// Snapshot - All Tickers Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded stock symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021> V2SnapshotLocaleUsMarketsStocksTickersGetAsync (List<string> tickers = null)
        {
             ApiResponse<InlineResponse20021> localVarResponse = await V2SnapshotLocaleUsMarketsStocksTickersGetAsyncWithHttpInfo(tickers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Snapshot - All Tickers Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded stock symbols. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">A comma separated list of tickers to get snapshots for. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> V2SnapshotLocaleUsMarketsStocksTickersGetAsyncWithHttpInfo (List<string> tickers = null)
        {

            var localVarPath = "/v2/snapshot/locale/us/markets/stocks/tickers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tickers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tickers", tickers)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleUsMarketsStocksTickersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        /// Snapshot - Ticker Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded stock ticker. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGet (string stocksTicker)
        {
             ApiResponse<InlineResponse20022> localVarResponse = V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGetWithHttpInfo(stocksTicker);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Snapshot - Ticker Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded stock ticker. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public ApiResponse< InlineResponse20022 > V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGetWithHttpInfo (string stocksTicker)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling StocksEquitiesApi->V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGet");

            var localVarPath = "/v2/snapshot/locale/us/markets/stocks/tickers/{stocksTicker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20022) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        /// Snapshot - Ticker Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded stock ticker. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGetAsync (string stocksTicker)
        {
             ApiResponse<InlineResponse20022> localVarResponse = await V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGetAsyncWithHttpInfo(stocksTicker);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Snapshot - Ticker Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded stock ticker. &lt;br /&gt; &lt;br /&gt; Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocksTicker">The ticker symbol of the stock/equity.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGetAsyncWithHttpInfo (string stocksTicker)
        {
            // verify the required parameter 'stocksTicker' is set
            if (stocksTicker == null)
                throw new ApiException(400, "Missing required parameter 'stocksTicker' when calling StocksEquitiesApi->V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGet");

            var localVarPath = "/v2/snapshot/locale/us/markets/stocks/tickers/{stocksTicker}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocksTicker != null) localVarPathParams.Add("stocksTicker", this.Configuration.ApiClient.ParameterToString(stocksTicker)); // path parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20022) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        /// Quotes (NBBO) Get NBBO quotes for a given ticker symbol on a specified date. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The ticker symbol we want quotes for.</param>
        /// <param name="date">The date/day of the quotes to retrieve in the format YYYY-MM-DD.</param>
        /// <param name="timestamp">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="timestampLimit">The maximum timestamp allowed in the results.  (optional)</param>
        /// <param name="reverse">Reverse the order of the results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 50000 and default 5000. (optional)</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 V2TicksStocksNbboTickerDateGet (string ticker, string date, int? timestamp = null, int? timestampLimit = null, bool? reverse = null, int? limit = null)
        {
             ApiResponse<InlineResponse20014> localVarResponse = V2TicksStocksNbboTickerDateGetWithHttpInfo(ticker, date, timestamp, timestampLimit, reverse, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Quotes (NBBO) Get NBBO quotes for a given ticker symbol on a specified date. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The ticker symbol we want quotes for.</param>
        /// <param name="date">The date/day of the quotes to retrieve in the format YYYY-MM-DD.</param>
        /// <param name="timestamp">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="timestampLimit">The maximum timestamp allowed in the results.  (optional)</param>
        /// <param name="reverse">Reverse the order of the results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 50000 and default 5000. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse< InlineResponse20014 > V2TicksStocksNbboTickerDateGetWithHttpInfo (string ticker, string date, int? timestamp = null, int? timestampLimit = null, bool? reverse = null, int? limit = null)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling StocksEquitiesApi->V2TicksStocksNbboTickerDateGet");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling StocksEquitiesApi->V2TicksStocksNbboTickerDateGet");

            var localVarPath = "/v2/ticks/stocks/nbbo/{ticker}/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter
            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (timestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", timestamp)); // query parameter
            if (timestampLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestampLimit", timestampLimit)); // query parameter
            if (reverse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reverse", reverse)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2TicksStocksNbboTickerDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20014) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        /// Quotes (NBBO) Get NBBO quotes for a given ticker symbol on a specified date. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The ticker symbol we want quotes for.</param>
        /// <param name="date">The date/day of the quotes to retrieve in the format YYYY-MM-DD.</param>
        /// <param name="timestamp">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="timestampLimit">The maximum timestamp allowed in the results.  (optional)</param>
        /// <param name="reverse">Reverse the order of the results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 50000 and default 5000. (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> V2TicksStocksNbboTickerDateGetAsync (string ticker, string date, int? timestamp = null, int? timestampLimit = null, bool? reverse = null, int? limit = null)
        {
             ApiResponse<InlineResponse20014> localVarResponse = await V2TicksStocksNbboTickerDateGetAsyncWithHttpInfo(ticker, date, timestamp, timestampLimit, reverse, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Quotes (NBBO) Get NBBO quotes for a given ticker symbol on a specified date. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The ticker symbol we want quotes for.</param>
        /// <param name="date">The date/day of the quotes to retrieve in the format YYYY-MM-DD.</param>
        /// <param name="timestamp">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="timestampLimit">The maximum timestamp allowed in the results.  (optional)</param>
        /// <param name="reverse">Reverse the order of the results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 50000 and default 5000. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> V2TicksStocksNbboTickerDateGetAsyncWithHttpInfo (string ticker, string date, int? timestamp = null, int? timestampLimit = null, bool? reverse = null, int? limit = null)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling StocksEquitiesApi->V2TicksStocksNbboTickerDateGet");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling StocksEquitiesApi->V2TicksStocksNbboTickerDateGet");

            var localVarPath = "/v2/ticks/stocks/nbbo/{ticker}/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter
            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (timestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", timestamp)); // query parameter
            if (timestampLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestampLimit", timestampLimit)); // query parameter
            if (reverse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reverse", reverse)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2TicksStocksNbboTickerDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20014) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        /// Trades Get trades for a given ticker symbol on a specified date. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The ticker symbol we want trades for.</param>
        /// <param name="date">The date/day of the trades to retrieve in the format YYYY-MM-DD.</param>
        /// <param name="timestamp">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="timestampLimit">The maximum timestamp allowed in the results.  (optional)</param>
        /// <param name="reverse">Reverse the order of the results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 50000 and default 5000. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 V2TicksStocksTradesTickerDateGet (string ticker, DateTime? date, int? timestamp = null, int? timestampLimit = null, bool? reverse = null, int? limit = null)
        {
             ApiResponse<InlineResponse20013> localVarResponse = V2TicksStocksTradesTickerDateGetWithHttpInfo(ticker, date, timestamp, timestampLimit, reverse, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Trades Get trades for a given ticker symbol on a specified date. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The ticker symbol we want trades for.</param>
        /// <param name="date">The date/day of the trades to retrieve in the format YYYY-MM-DD.</param>
        /// <param name="timestamp">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="timestampLimit">The maximum timestamp allowed in the results.  (optional)</param>
        /// <param name="reverse">Reverse the order of the results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 50000 and default 5000. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse< InlineResponse20013 > V2TicksStocksTradesTickerDateGetWithHttpInfo (string ticker, DateTime? date, int? timestamp = null, int? timestampLimit = null, bool? reverse = null, int? limit = null)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling StocksEquitiesApi->V2TicksStocksTradesTickerDateGet");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling StocksEquitiesApi->V2TicksStocksTradesTickerDateGet");

            var localVarPath = "/v2/ticks/stocks/trades/{ticker}/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter
            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (timestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", timestamp)); // query parameter
            if (timestampLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestampLimit", timestampLimit)); // query parameter
            if (reverse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reverse", reverse)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2TicksStocksTradesTickerDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20013) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        /// Trades Get trades for a given ticker symbol on a specified date. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The ticker symbol we want trades for.</param>
        /// <param name="date">The date/day of the trades to retrieve in the format YYYY-MM-DD.</param>
        /// <param name="timestamp">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="timestampLimit">The maximum timestamp allowed in the results.  (optional)</param>
        /// <param name="reverse">Reverse the order of the results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 50000 and default 5000. (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> V2TicksStocksTradesTickerDateGetAsync (string ticker, DateTime? date, int? timestamp = null, int? timestampLimit = null, bool? reverse = null, int? limit = null)
        {
             ApiResponse<InlineResponse20013> localVarResponse = await V2TicksStocksTradesTickerDateGetAsyncWithHttpInfo(ticker, date, timestamp, timestampLimit, reverse, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Trades Get trades for a given ticker symbol on a specified date. 
        /// </summary>
        /// <exception cref="PolygonIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The ticker symbol we want trades for.</param>
        /// <param name="date">The date/day of the trades to retrieve in the format YYYY-MM-DD.</param>
        /// <param name="timestamp">The timestamp offset, used for pagination. This is the offset at which to start the results. Using the &#x60;timestamp&#x60; of the last result as the offset will give you the next page of results.  (optional)</param>
        /// <param name="timestampLimit">The maximum timestamp allowed in the results.  (optional)</param>
        /// <param name="reverse">Reverse the order of the results.  (optional)</param>
        /// <param name="limit">Limit the size of the response, max 50000 and default 5000. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> V2TicksStocksTradesTickerDateGetAsyncWithHttpInfo (string ticker, DateTime? date, int? timestamp = null, int? timestampLimit = null, bool? reverse = null, int? limit = null)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling StocksEquitiesApi->V2TicksStocksTradesTickerDateGet");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling StocksEquitiesApi->V2TicksStocksTradesTickerDateGet");

            var localVarPath = "/v2/ticks/stocks/trades/{ticker}/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarPathParams.Add("ticker", this.Configuration.ApiClient.ParameterToString(ticker)); // path parameter
            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (timestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", timestamp)); // query parameter
            if (timestampLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestampLimit", timestampLimit)); // query parameter
            if (reverse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reverse", reverse)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2TicksStocksTradesTickerDateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20013) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

    }
}
