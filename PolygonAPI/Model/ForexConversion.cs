/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// ForexConversion
    /// </summary>
    [DataContract]
        public partial class ForexConversion :  IEquatable<ForexConversion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForexConversion" /> class.
        /// </summary>
        /// <param name="last">last.</param>
        /// <param name="from">The \&quot;from\&quot; currency symbol..</param>
        /// <param name="to">The \&quot;to\&quot; currency symbol..</param>
        /// <param name="initialAmount">The amount to convert..</param>
        /// <param name="converted">The result of the conversion..</param>
        public ForexConversion(ForexConversionLast last = default(ForexConversionLast), string from = default(string), string to = default(string), double? initialAmount = default(double?), double? converted = default(double?))
        {
            this.Last = last;
            this.From = from;
            this.To = to;
            this.InitialAmount = initialAmount;
            this.Converted = converted;
        }
        
        /// <summary>
        /// Gets or Sets Last
        /// </summary>
        [DataMember(Name="last", EmitDefaultValue=false)]
        public ForexConversionLast Last { get; set; }

        /// <summary>
        /// The \&quot;from\&quot; currency symbol.
        /// </summary>
        /// <value>The \&quot;from\&quot; currency symbol.</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// The \&quot;to\&quot; currency symbol.
        /// </summary>
        /// <value>The \&quot;to\&quot; currency symbol.</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// The amount to convert.
        /// </summary>
        /// <value>The amount to convert.</value>
        [DataMember(Name="initialAmount", EmitDefaultValue=false)]
        public double? InitialAmount { get; set; }

        /// <summary>
        /// The result of the conversion.
        /// </summary>
        /// <value>The result of the conversion.</value>
        [DataMember(Name="converted", EmitDefaultValue=false)]
        public double? Converted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ForexConversion {\n");
            sb.Append("  Last: ").Append(Last).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  InitialAmount: ").Append(InitialAmount).Append("\n");
            sb.Append("  Converted: ").Append(Converted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ForexConversion);
        }

        /// <summary>
        /// Returns true if ForexConversion instances are equal
        /// </summary>
        /// <param name="input">Instance of ForexConversion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ForexConversion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Last == input.Last ||
                    (this.Last != null &&
                    this.Last.Equals(input.Last))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.InitialAmount == input.InitialAmount ||
                    (this.InitialAmount != null &&
                    this.InitialAmount.Equals(input.InitialAmount))
                ) && 
                (
                    this.Converted == input.Converted ||
                    (this.Converted != null &&
                    this.Converted.Equals(input.Converted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Last != null)
                    hashCode = hashCode * 59 + this.Last.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.InitialAmount != null)
                    hashCode = hashCode * 59 + this.InitialAmount.GetHashCode();
                if (this.Converted != null)
                    hashCode = hashCode * 59 + this.Converted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
