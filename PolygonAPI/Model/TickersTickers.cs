/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// TickersTickers
    /// </summary>
    [DataContract]
        public partial class TickersTickers :  IEquatable<TickersTickers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TickersTickers" /> class.
        /// </summary>
        /// <param name="ticker">The exchange symbol that this item is traded under..</param>
        /// <param name="name">The name of the item..</param>
        /// <param name="market">The market in which this ticker participates..</param>
        /// <param name="locale">The locale of where this ticker is traded..</param>
        /// <param name="currency">The currency this ticker is traded in..</param>
        /// <param name="active">Whether or not the ticker is active. False means the ticker has been delisted..</param>
        /// <param name="primaryExch">The listing exchange for this ticker..</param>
        /// <param name="url">A URL that can be used to get more detailed information about the ticker..</param>
        /// <param name="updated">The last time this ticker record was updated..</param>
        /// <param name="attrs">attrs.</param>
        /// <param name="codes">codes.</param>
        public TickersTickers(string ticker = default(string), string name = default(string), string market = default(string), string locale = default(string), string currency = default(string), bool? active = default(bool?), string primaryExch = default(string), string url = default(string), DateTime? updated = default(DateTime?), TickersAttrs attrs = default(TickersAttrs), TickersCodes codes = default(TickersCodes))
        {
            this.Ticker = ticker;
            this.Name = name;
            this.Market = market;
            this.Locale = locale;
            this.Currency = currency;
            this.Active = active;
            this.PrimaryExch = primaryExch;
            this.Url = url;
            this.Updated = updated;
            this.Attrs = attrs;
            this.Codes = codes;
        }
        
        /// <summary>
        /// The exchange symbol that this item is traded under.
        /// </summary>
        /// <value>The exchange symbol that this item is traded under.</value>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public string Ticker { get; set; }

        /// <summary>
        /// The name of the item.
        /// </summary>
        /// <value>The name of the item.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The market in which this ticker participates.
        /// </summary>
        /// <value>The market in which this ticker participates.</value>
        [DataMember(Name="market", EmitDefaultValue=false)]
        public string Market { get; set; }

        /// <summary>
        /// The locale of where this ticker is traded.
        /// </summary>
        /// <value>The locale of where this ticker is traded.</value>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// The currency this ticker is traded in.
        /// </summary>
        /// <value>The currency this ticker is traded in.</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Whether or not the ticker is active. False means the ticker has been delisted.
        /// </summary>
        /// <value>Whether or not the ticker is active. False means the ticker has been delisted.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// The listing exchange for this ticker.
        /// </summary>
        /// <value>The listing exchange for this ticker.</value>
        [DataMember(Name="primaryExch", EmitDefaultValue=false)]
        public string PrimaryExch { get; set; }

        /// <summary>
        /// A URL that can be used to get more detailed information about the ticker.
        /// </summary>
        /// <value>A URL that can be used to get more detailed information about the ticker.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// The last time this ticker record was updated.
        /// </summary>
        /// <value>The last time this ticker record was updated.</value>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Gets or Sets Attrs
        /// </summary>
        [DataMember(Name="attrs", EmitDefaultValue=false)]
        public TickersAttrs Attrs { get; set; }

        /// <summary>
        /// Gets or Sets Codes
        /// </summary>
        [DataMember(Name="codes", EmitDefaultValue=false)]
        public TickersCodes Codes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TickersTickers {\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  PrimaryExch: ").Append(PrimaryExch).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Attrs: ").Append(Attrs).Append("\n");
            sb.Append("  Codes: ").Append(Codes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TickersTickers);
        }

        /// <summary>
        /// Returns true if TickersTickers instances are equal
        /// </summary>
        /// <param name="input">Instance of TickersTickers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TickersTickers input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Market == input.Market ||
                    (this.Market != null &&
                    this.Market.Equals(input.Market))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.PrimaryExch == input.PrimaryExch ||
                    (this.PrimaryExch != null &&
                    this.PrimaryExch.Equals(input.PrimaryExch))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.Attrs == input.Attrs ||
                    (this.Attrs != null &&
                    this.Attrs.Equals(input.Attrs))
                ) && 
                (
                    this.Codes == input.Codes ||
                    (this.Codes != null &&
                    this.Codes.Equals(input.Codes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Market != null)
                    hashCode = hashCode * 59 + this.Market.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.PrimaryExch != null)
                    hashCode = hashCode * 59 + this.PrimaryExch.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.Attrs != null)
                    hashCode = hashCode * 59 + this.Attrs.GetHashCode();
                if (this.Codes != null)
                    hashCode = hashCode * 59 + this.Codes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
