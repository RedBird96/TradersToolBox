/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// DividendResults
    /// </summary>
    [DataContract]
        public partial class DividendResults :  IEquatable<DividendResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DividendResults" /> class.
        /// </summary>
        /// <param name="ticker">The exchange symbol that this item is traded under..</param>
        /// <param name="exDate">The execution date of the dividend..</param>
        /// <param name="paymentDate">The payment date of the dividend..</param>
        /// <param name="recordDate">The date of record for the dividend.  See &lt;a rel&#x3D;\&quot;nofollow\&quot; target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.investor.gov/introduction-investing/investing-basics/glossary/ex-dividend-dates-when-are-you-entitled-stock-and#:~:text&#x3D;The%20ex%2Ddividend%20date%20for,the%20seller%20gets%20the%20dividend.\&quot; alt&#x3D;\&quot;Investor.gov&#x27;s explanation of dividend dates\&quot;&gt;Investor.gov&lt;/a&gt; for an explanation on dividend dates and their meaning. .</param>
        /// <param name="amount">The amount of the dividend..</param>
        public DividendResults(string ticker = default(string), DateTime? exDate = default(DateTime?), DateTime? paymentDate = default(DateTime?), DateTime? recordDate = default(DateTime?), double? amount = default(double?))
        {
            this.Ticker = ticker;
            this.ExDate = exDate;
            this.PaymentDate = paymentDate;
            this.RecordDate = recordDate;
            this.Amount = amount;
        }
        
        /// <summary>
        /// The exchange symbol that this item is traded under.
        /// </summary>
        /// <value>The exchange symbol that this item is traded under.</value>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public string Ticker { get; set; }

        /// <summary>
        /// The execution date of the dividend.
        /// </summary>
        /// <value>The execution date of the dividend.</value>
        [DataMember(Name="exDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ExDate { get; set; }

        /// <summary>
        /// The payment date of the dividend.
        /// </summary>
        /// <value>The payment date of the dividend.</value>
        [DataMember(Name="paymentDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? PaymentDate { get; set; }

        /// <summary>
        /// The date of record for the dividend.  See &lt;a rel&#x3D;\&quot;nofollow\&quot; target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.investor.gov/introduction-investing/investing-basics/glossary/ex-dividend-dates-when-are-you-entitled-stock-and#:~:text&#x3D;The%20ex%2Ddividend%20date%20for,the%20seller%20gets%20the%20dividend.\&quot; alt&#x3D;\&quot;Investor.gov&#x27;s explanation of dividend dates\&quot;&gt;Investor.gov&lt;/a&gt; for an explanation on dividend dates and their meaning. 
        /// </summary>
        /// <value>The date of record for the dividend.  See &lt;a rel&#x3D;\&quot;nofollow\&quot; target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.investor.gov/introduction-investing/investing-basics/glossary/ex-dividend-dates-when-are-you-entitled-stock-and#:~:text&#x3D;The%20ex%2Ddividend%20date%20for,the%20seller%20gets%20the%20dividend.\&quot; alt&#x3D;\&quot;Investor.gov&#x27;s explanation of dividend dates\&quot;&gt;Investor.gov&lt;/a&gt; for an explanation on dividend dates and their meaning. </value>
        [DataMember(Name="recordDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? RecordDate { get; set; }

        /// <summary>
        /// The amount of the dividend.
        /// </summary>
        /// <value>The amount of the dividend.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DividendResults {\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  ExDate: ").Append(ExDate).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  RecordDate: ").Append(RecordDate).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DividendResults);
        }

        /// <summary>
        /// Returns true if DividendResults instances are equal
        /// </summary>
        /// <param name="input">Instance of DividendResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DividendResults input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.ExDate == input.ExDate ||
                    (this.ExDate != null &&
                    this.ExDate.Equals(input.ExDate))
                ) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.RecordDate == input.RecordDate ||
                    (this.RecordDate != null &&
                    this.RecordDate.Equals(input.RecordDate))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                if (this.ExDate != null)
                    hashCode = hashCode * 59 + this.ExDate.GetHashCode();
                if (this.PaymentDate != null)
                    hashCode = hashCode * 59 + this.PaymentDate.GetHashCode();
                if (this.RecordDate != null)
                    hashCode = hashCode * 59 + this.RecordDate.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
