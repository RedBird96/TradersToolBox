/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// Financial
    /// </summary>
    [DataContract]
        public partial class Financial :  IEquatable<Financial>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Financial" /> class.
        /// </summary>
        /// <param name="symbol">Stock Symbol (required).</param>
        /// <param name="reportDate">Report Date (required).</param>
        /// <param name="reportDateStr">Report date as non date format (required).</param>
        /// <param name="grossProfit">grossProfit.</param>
        /// <param name="costOfRevenue">costOfRevenue.</param>
        /// <param name="operatingRevenue">operatingRevenue.</param>
        /// <param name="totalRevenue">totalRevenue.</param>
        /// <param name="operatingIncome">operatingIncome.</param>
        /// <param name="netIncome">netIncome.</param>
        /// <param name="researchAndDevelopment">researchAndDevelopment.</param>
        /// <param name="operatingExpense">operatingExpense.</param>
        /// <param name="currentAssets">currentAssets.</param>
        /// <param name="totalAssets">totalAssets.</param>
        /// <param name="totalLiabilities">totalLiabilities.</param>
        /// <param name="currentCash">currentCash.</param>
        /// <param name="currentDebt">currentDebt.</param>
        /// <param name="totalCash">totalCash.</param>
        /// <param name="totalDebt">totalDebt.</param>
        /// <param name="shareholderEquity">shareholderEquity.</param>
        /// <param name="cashChange">cashChange.</param>
        /// <param name="cashFlow">cashFlow.</param>
        /// <param name="operatingGainsLosses">operatingGainsLosses.</param>
        public Financial(string symbol = default(string), DateTime? reportDate = default(DateTime?), string reportDateStr = default(string), int? grossProfit = default(int?), int? costOfRevenue = default(int?), int? operatingRevenue = default(int?), int? totalRevenue = default(int?), int? operatingIncome = default(int?), int? netIncome = default(int?), int? researchAndDevelopment = default(int?), int? operatingExpense = default(int?), int? currentAssets = default(int?), int? totalAssets = default(int?), int? totalLiabilities = default(int?), int? currentCash = default(int?), int? currentDebt = default(int?), int? totalCash = default(int?), int? totalDebt = default(int?), int? shareholderEquity = default(int?), int? cashChange = default(int?), int? cashFlow = default(int?), decimal? operatingGainsLosses = default(decimal?))
        {
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new InvalidDataException("symbol is a required property for Financial and cannot be null");
            }
            else
            {
                this.Symbol = symbol;
            }
            // to ensure "reportDate" is required (not null)
            if (reportDate == null)
            {
                throw new InvalidDataException("reportDate is a required property for Financial and cannot be null");
            }
            else
            {
                this.ReportDate = reportDate;
            }
            // to ensure "reportDateStr" is required (not null)
            if (reportDateStr == null)
            {
                throw new InvalidDataException("reportDateStr is a required property for Financial and cannot be null");
            }
            else
            {
                this.ReportDateStr = reportDateStr;
            }
            this.GrossProfit = grossProfit;
            this.CostOfRevenue = costOfRevenue;
            this.OperatingRevenue = operatingRevenue;
            this.TotalRevenue = totalRevenue;
            this.OperatingIncome = operatingIncome;
            this.NetIncome = netIncome;
            this.ResearchAndDevelopment = researchAndDevelopment;
            this.OperatingExpense = operatingExpense;
            this.CurrentAssets = currentAssets;
            this.TotalAssets = totalAssets;
            this.TotalLiabilities = totalLiabilities;
            this.CurrentCash = currentCash;
            this.CurrentDebt = currentDebt;
            this.TotalCash = totalCash;
            this.TotalDebt = totalDebt;
            this.ShareholderEquity = shareholderEquity;
            this.CashChange = cashChange;
            this.CashFlow = cashFlow;
            this.OperatingGainsLosses = operatingGainsLosses;
        }
        
        /// <summary>
        /// Stock Symbol
        /// </summary>
        /// <value>Stock Symbol</value>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Report Date
        /// </summary>
        /// <value>Report Date</value>
        [DataMember(Name="reportDate", EmitDefaultValue=false)]
        public DateTime? ReportDate { get; set; }

        /// <summary>
        /// Report date as non date format
        /// </summary>
        /// <value>Report date as non date format</value>
        [DataMember(Name="reportDateStr", EmitDefaultValue=false)]
        public string ReportDateStr { get; set; }

        /// <summary>
        /// Gets or Sets GrossProfit
        /// </summary>
        [DataMember(Name="grossProfit", EmitDefaultValue=false)]
        public int? GrossProfit { get; set; }

        /// <summary>
        /// Gets or Sets CostOfRevenue
        /// </summary>
        [DataMember(Name="costOfRevenue", EmitDefaultValue=false)]
        public int? CostOfRevenue { get; set; }

        /// <summary>
        /// Gets or Sets OperatingRevenue
        /// </summary>
        [DataMember(Name="operatingRevenue", EmitDefaultValue=false)]
        public int? OperatingRevenue { get; set; }

        /// <summary>
        /// Gets or Sets TotalRevenue
        /// </summary>
        [DataMember(Name="totalRevenue", EmitDefaultValue=false)]
        public int? TotalRevenue { get; set; }

        /// <summary>
        /// Gets or Sets OperatingIncome
        /// </summary>
        [DataMember(Name="operatingIncome", EmitDefaultValue=false)]
        public int? OperatingIncome { get; set; }

        /// <summary>
        /// Gets or Sets NetIncome
        /// </summary>
        [DataMember(Name="netIncome", EmitDefaultValue=false)]
        public int? NetIncome { get; set; }

        /// <summary>
        /// Gets or Sets ResearchAndDevelopment
        /// </summary>
        [DataMember(Name="researchAndDevelopment", EmitDefaultValue=false)]
        public int? ResearchAndDevelopment { get; set; }

        /// <summary>
        /// Gets or Sets OperatingExpense
        /// </summary>
        [DataMember(Name="operatingExpense", EmitDefaultValue=false)]
        public int? OperatingExpense { get; set; }

        /// <summary>
        /// Gets or Sets CurrentAssets
        /// </summary>
        [DataMember(Name="currentAssets", EmitDefaultValue=false)]
        public int? CurrentAssets { get; set; }

        /// <summary>
        /// Gets or Sets TotalAssets
        /// </summary>
        [DataMember(Name="totalAssets", EmitDefaultValue=false)]
        public int? TotalAssets { get; set; }

        /// <summary>
        /// Gets or Sets TotalLiabilities
        /// </summary>
        [DataMember(Name="totalLiabilities", EmitDefaultValue=false)]
        public int? TotalLiabilities { get; set; }

        /// <summary>
        /// Gets or Sets CurrentCash
        /// </summary>
        [DataMember(Name="currentCash", EmitDefaultValue=false)]
        public int? CurrentCash { get; set; }

        /// <summary>
        /// Gets or Sets CurrentDebt
        /// </summary>
        [DataMember(Name="currentDebt", EmitDefaultValue=false)]
        public int? CurrentDebt { get; set; }

        /// <summary>
        /// Gets or Sets TotalCash
        /// </summary>
        [DataMember(Name="totalCash", EmitDefaultValue=false)]
        public int? TotalCash { get; set; }

        /// <summary>
        /// Gets or Sets TotalDebt
        /// </summary>
        [DataMember(Name="totalDebt", EmitDefaultValue=false)]
        public int? TotalDebt { get; set; }

        /// <summary>
        /// Gets or Sets ShareholderEquity
        /// </summary>
        [DataMember(Name="shareholderEquity", EmitDefaultValue=false)]
        public int? ShareholderEquity { get; set; }

        /// <summary>
        /// Gets or Sets CashChange
        /// </summary>
        [DataMember(Name="cashChange", EmitDefaultValue=false)]
        public int? CashChange { get; set; }

        /// <summary>
        /// Gets or Sets CashFlow
        /// </summary>
        [DataMember(Name="cashFlow", EmitDefaultValue=false)]
        public int? CashFlow { get; set; }

        /// <summary>
        /// Gets or Sets OperatingGainsLosses
        /// </summary>
        [DataMember(Name="operatingGainsLosses", EmitDefaultValue=false)]
        public decimal? OperatingGainsLosses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Financial {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  ReportDate: ").Append(ReportDate).Append("\n");
            sb.Append("  ReportDateStr: ").Append(ReportDateStr).Append("\n");
            sb.Append("  GrossProfit: ").Append(GrossProfit).Append("\n");
            sb.Append("  CostOfRevenue: ").Append(CostOfRevenue).Append("\n");
            sb.Append("  OperatingRevenue: ").Append(OperatingRevenue).Append("\n");
            sb.Append("  TotalRevenue: ").Append(TotalRevenue).Append("\n");
            sb.Append("  OperatingIncome: ").Append(OperatingIncome).Append("\n");
            sb.Append("  NetIncome: ").Append(NetIncome).Append("\n");
            sb.Append("  ResearchAndDevelopment: ").Append(ResearchAndDevelopment).Append("\n");
            sb.Append("  OperatingExpense: ").Append(OperatingExpense).Append("\n");
            sb.Append("  CurrentAssets: ").Append(CurrentAssets).Append("\n");
            sb.Append("  TotalAssets: ").Append(TotalAssets).Append("\n");
            sb.Append("  TotalLiabilities: ").Append(TotalLiabilities).Append("\n");
            sb.Append("  CurrentCash: ").Append(CurrentCash).Append("\n");
            sb.Append("  CurrentDebt: ").Append(CurrentDebt).Append("\n");
            sb.Append("  TotalCash: ").Append(TotalCash).Append("\n");
            sb.Append("  TotalDebt: ").Append(TotalDebt).Append("\n");
            sb.Append("  ShareholderEquity: ").Append(ShareholderEquity).Append("\n");
            sb.Append("  CashChange: ").Append(CashChange).Append("\n");
            sb.Append("  CashFlow: ").Append(CashFlow).Append("\n");
            sb.Append("  OperatingGainsLosses: ").Append(OperatingGainsLosses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Financial);
        }

        /// <summary>
        /// Returns true if Financial instances are equal
        /// </summary>
        /// <param name="input">Instance of Financial to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Financial input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.ReportDate == input.ReportDate ||
                    (this.ReportDate != null &&
                    this.ReportDate.Equals(input.ReportDate))
                ) && 
                (
                    this.ReportDateStr == input.ReportDateStr ||
                    (this.ReportDateStr != null &&
                    this.ReportDateStr.Equals(input.ReportDateStr))
                ) && 
                (
                    this.GrossProfit == input.GrossProfit ||
                    (this.GrossProfit != null &&
                    this.GrossProfit.Equals(input.GrossProfit))
                ) && 
                (
                    this.CostOfRevenue == input.CostOfRevenue ||
                    (this.CostOfRevenue != null &&
                    this.CostOfRevenue.Equals(input.CostOfRevenue))
                ) && 
                (
                    this.OperatingRevenue == input.OperatingRevenue ||
                    (this.OperatingRevenue != null &&
                    this.OperatingRevenue.Equals(input.OperatingRevenue))
                ) && 
                (
                    this.TotalRevenue == input.TotalRevenue ||
                    (this.TotalRevenue != null &&
                    this.TotalRevenue.Equals(input.TotalRevenue))
                ) && 
                (
                    this.OperatingIncome == input.OperatingIncome ||
                    (this.OperatingIncome != null &&
                    this.OperatingIncome.Equals(input.OperatingIncome))
                ) && 
                (
                    this.NetIncome == input.NetIncome ||
                    (this.NetIncome != null &&
                    this.NetIncome.Equals(input.NetIncome))
                ) && 
                (
                    this.ResearchAndDevelopment == input.ResearchAndDevelopment ||
                    (this.ResearchAndDevelopment != null &&
                    this.ResearchAndDevelopment.Equals(input.ResearchAndDevelopment))
                ) && 
                (
                    this.OperatingExpense == input.OperatingExpense ||
                    (this.OperatingExpense != null &&
                    this.OperatingExpense.Equals(input.OperatingExpense))
                ) && 
                (
                    this.CurrentAssets == input.CurrentAssets ||
                    (this.CurrentAssets != null &&
                    this.CurrentAssets.Equals(input.CurrentAssets))
                ) && 
                (
                    this.TotalAssets == input.TotalAssets ||
                    (this.TotalAssets != null &&
                    this.TotalAssets.Equals(input.TotalAssets))
                ) && 
                (
                    this.TotalLiabilities == input.TotalLiabilities ||
                    (this.TotalLiabilities != null &&
                    this.TotalLiabilities.Equals(input.TotalLiabilities))
                ) && 
                (
                    this.CurrentCash == input.CurrentCash ||
                    (this.CurrentCash != null &&
                    this.CurrentCash.Equals(input.CurrentCash))
                ) && 
                (
                    this.CurrentDebt == input.CurrentDebt ||
                    (this.CurrentDebt != null &&
                    this.CurrentDebt.Equals(input.CurrentDebt))
                ) && 
                (
                    this.TotalCash == input.TotalCash ||
                    (this.TotalCash != null &&
                    this.TotalCash.Equals(input.TotalCash))
                ) && 
                (
                    this.TotalDebt == input.TotalDebt ||
                    (this.TotalDebt != null &&
                    this.TotalDebt.Equals(input.TotalDebt))
                ) && 
                (
                    this.ShareholderEquity == input.ShareholderEquity ||
                    (this.ShareholderEquity != null &&
                    this.ShareholderEquity.Equals(input.ShareholderEquity))
                ) && 
                (
                    this.CashChange == input.CashChange ||
                    (this.CashChange != null &&
                    this.CashChange.Equals(input.CashChange))
                ) && 
                (
                    this.CashFlow == input.CashFlow ||
                    (this.CashFlow != null &&
                    this.CashFlow.Equals(input.CashFlow))
                ) && 
                (
                    this.OperatingGainsLosses == input.OperatingGainsLosses ||
                    (this.OperatingGainsLosses != null &&
                    this.OperatingGainsLosses.Equals(input.OperatingGainsLosses))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.ReportDate != null)
                    hashCode = hashCode * 59 + this.ReportDate.GetHashCode();
                if (this.ReportDateStr != null)
                    hashCode = hashCode * 59 + this.ReportDateStr.GetHashCode();
                if (this.GrossProfit != null)
                    hashCode = hashCode * 59 + this.GrossProfit.GetHashCode();
                if (this.CostOfRevenue != null)
                    hashCode = hashCode * 59 + this.CostOfRevenue.GetHashCode();
                if (this.OperatingRevenue != null)
                    hashCode = hashCode * 59 + this.OperatingRevenue.GetHashCode();
                if (this.TotalRevenue != null)
                    hashCode = hashCode * 59 + this.TotalRevenue.GetHashCode();
                if (this.OperatingIncome != null)
                    hashCode = hashCode * 59 + this.OperatingIncome.GetHashCode();
                if (this.NetIncome != null)
                    hashCode = hashCode * 59 + this.NetIncome.GetHashCode();
                if (this.ResearchAndDevelopment != null)
                    hashCode = hashCode * 59 + this.ResearchAndDevelopment.GetHashCode();
                if (this.OperatingExpense != null)
                    hashCode = hashCode * 59 + this.OperatingExpense.GetHashCode();
                if (this.CurrentAssets != null)
                    hashCode = hashCode * 59 + this.CurrentAssets.GetHashCode();
                if (this.TotalAssets != null)
                    hashCode = hashCode * 59 + this.TotalAssets.GetHashCode();
                if (this.TotalLiabilities != null)
                    hashCode = hashCode * 59 + this.TotalLiabilities.GetHashCode();
                if (this.CurrentCash != null)
                    hashCode = hashCode * 59 + this.CurrentCash.GetHashCode();
                if (this.CurrentDebt != null)
                    hashCode = hashCode * 59 + this.CurrentDebt.GetHashCode();
                if (this.TotalCash != null)
                    hashCode = hashCode * 59 + this.TotalCash.GetHashCode();
                if (this.TotalDebt != null)
                    hashCode = hashCode * 59 + this.TotalDebt.GetHashCode();
                if (this.ShareholderEquity != null)
                    hashCode = hashCode * 59 + this.ShareholderEquity.GetHashCode();
                if (this.CashChange != null)
                    hashCode = hashCode * 59 + this.CashChange.GetHashCode();
                if (this.CashFlow != null)
                    hashCode = hashCode * 59 + this.CashFlow.GetHashCode();
                if (this.OperatingGainsLosses != null)
                    hashCode = hashCode * 59 + this.OperatingGainsLosses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
