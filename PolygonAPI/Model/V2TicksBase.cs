/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// V2TicksBase
    /// </summary>
    [DataContract]
        public partial class V2TicksBase :  IEquatable<V2TicksBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V2TicksBase" /> class.
        /// </summary>
        /// <param name="ticker">The exchange symbol that this item is traded under..</param>
        /// <param name="resultsCount">The total number of results for this request..</param>
        /// <param name="dbLatency">Latency in milliseconds for the query results from the database..</param>
        /// <param name="success">Whether or not this query was executed successfully..</param>
        public V2TicksBase(string ticker = default(string), int? resultsCount = default(int?), int? dbLatency = default(int?), bool? success = default(bool?))
        {
            this.Ticker = ticker;
            this.ResultsCount = resultsCount;
            this.DbLatency = dbLatency;
            this.Success = success;
        }
        
        /// <summary>
        /// The exchange symbol that this item is traded under.
        /// </summary>
        /// <value>The exchange symbol that this item is traded under.</value>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public string Ticker { get; set; }

        /// <summary>
        /// The total number of results for this request.
        /// </summary>
        /// <value>The total number of results for this request.</value>
        [DataMember(Name="results_count", EmitDefaultValue=false)]
        public int? ResultsCount { get; set; }

        /// <summary>
        /// Latency in milliseconds for the query results from the database.
        /// </summary>
        /// <value>Latency in milliseconds for the query results from the database.</value>
        [DataMember(Name="db_latency", EmitDefaultValue=false)]
        public int? DbLatency { get; set; }

        /// <summary>
        /// Whether or not this query was executed successfully.
        /// </summary>
        /// <value>Whether or not this query was executed successfully.</value>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V2TicksBase {\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  ResultsCount: ").Append(ResultsCount).Append("\n");
            sb.Append("  DbLatency: ").Append(DbLatency).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V2TicksBase);
        }

        /// <summary>
        /// Returns true if V2TicksBase instances are equal
        /// </summary>
        /// <param name="input">Instance of V2TicksBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V2TicksBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.ResultsCount == input.ResultsCount ||
                    (this.ResultsCount != null &&
                    this.ResultsCount.Equals(input.ResultsCount))
                ) && 
                (
                    this.DbLatency == input.DbLatency ||
                    (this.DbLatency != null &&
                    this.DbLatency.Equals(input.DbLatency))
                ) && 
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                if (this.ResultsCount != null)
                    hashCode = hashCode * 59 + this.ResultsCount.GetHashCode();
                if (this.DbLatency != null)
                    hashCode = hashCode * 59 + this.DbLatency.GetHashCode();
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
