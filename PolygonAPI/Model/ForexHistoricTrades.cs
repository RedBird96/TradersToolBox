/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// ForexHistoricTrades
    /// </summary>
    [DataContract]
        public partial class ForexHistoricTrades :  IEquatable<ForexHistoricTrades>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForexHistoricTrades" /> class.
        /// </summary>
        /// <param name="day">The date that was evaluated from the request..</param>
        /// <param name="map">A map for shortened result keys..</param>
        /// <param name="msLatency">The milliseconds of latency for the query results..</param>
        /// <param name="pair">The currency pair that was evaluated from the request..</param>
        /// <param name="ticks">ticks.</param>
        public ForexHistoricTrades(DateTime? day = default(DateTime?), Object map = default(Object), int? msLatency = default(int?), string pair = default(string), List<ForexHistoricTradesTicks> ticks = default(List<ForexHistoricTradesTicks>))
        {
            this.Day = day;
            this.Map = map;
            this.MsLatency = msLatency;
            this.Pair = pair;
            this.Ticks = ticks;
        }
        
        /// <summary>
        /// The date that was evaluated from the request.
        /// </summary>
        /// <value>The date that was evaluated from the request.</value>
        [DataMember(Name="day", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Day { get; set; }

        /// <summary>
        /// A map for shortened result keys.
        /// </summary>
        /// <value>A map for shortened result keys.</value>
        [DataMember(Name="map", EmitDefaultValue=false)]
        public Object Map { get; set; }

        /// <summary>
        /// The milliseconds of latency for the query results.
        /// </summary>
        /// <value>The milliseconds of latency for the query results.</value>
        [DataMember(Name="msLatency", EmitDefaultValue=false)]
        public int? MsLatency { get; set; }

        /// <summary>
        /// The currency pair that was evaluated from the request.
        /// </summary>
        /// <value>The currency pair that was evaluated from the request.</value>
        [DataMember(Name="pair", EmitDefaultValue=false)]
        public string Pair { get; set; }

        /// <summary>
        /// Gets or Sets Ticks
        /// </summary>
        [DataMember(Name="ticks", EmitDefaultValue=false)]
        public List<ForexHistoricTradesTicks> Ticks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ForexHistoricTrades {\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Map: ").Append(Map).Append("\n");
            sb.Append("  MsLatency: ").Append(MsLatency).Append("\n");
            sb.Append("  Pair: ").Append(Pair).Append("\n");
            sb.Append("  Ticks: ").Append(Ticks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ForexHistoricTrades);
        }

        /// <summary>
        /// Returns true if ForexHistoricTrades instances are equal
        /// </summary>
        /// <param name="input">Instance of ForexHistoricTrades to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ForexHistoricTrades input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Day == input.Day ||
                    (this.Day != null &&
                    this.Day.Equals(input.Day))
                ) && 
                (
                    this.Map == input.Map ||
                    (this.Map != null &&
                    this.Map.Equals(input.Map))
                ) && 
                (
                    this.MsLatency == input.MsLatency ||
                    (this.MsLatency != null &&
                    this.MsLatency.Equals(input.MsLatency))
                ) && 
                (
                    this.Pair == input.Pair ||
                    (this.Pair != null &&
                    this.Pair.Equals(input.Pair))
                ) && 
                (
                    this.Ticks == input.Ticks ||
                    this.Ticks != null &&
                    input.Ticks != null &&
                    this.Ticks.SequenceEqual(input.Ticks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Day != null)
                    hashCode = hashCode * 59 + this.Day.GetHashCode();
                if (this.Map != null)
                    hashCode = hashCode * 59 + this.Map.GetHashCode();
                if (this.MsLatency != null)
                    hashCode = hashCode * 59 + this.MsLatency.GetHashCode();
                if (this.Pair != null)
                    hashCode = hashCode * 59 + this.Pair.GetHashCode();
                if (this.Ticks != null)
                    hashCode = hashCode * 59 + this.Ticks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
