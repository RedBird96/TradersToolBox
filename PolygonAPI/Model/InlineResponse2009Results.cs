/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// Financials
    /// </summary>
    [DataContract]
        public partial class InlineResponse2009Results :  IEquatable<InlineResponse2009Results>, IValidatableObject
    {
        /// <summary>
        /// Reporting period.
        /// </summary>
        /// <value>Reporting period.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PeriodEnum
        {
            /// <summary>
            /// Enum Q for value: Q
            /// </summary>
            [EnumMember(Value = "Q")]
            Q = 1,
            /// <summary>
            /// Enum T for value: T
            /// </summary>
            [EnumMember(Value = "T")]
            T = 2,
            /// <summary>
            /// Enum QA for value: QA
            /// </summary>
            [EnumMember(Value = "QA")]
            QA = 3,
            /// <summary>
            /// Enum TA for value: TA
            /// </summary>
            [EnumMember(Value = "TA")]
            TA = 4,
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 5,
            /// <summary>
            /// Enum YA for value: YA
            /// </summary>
            [EnumMember(Value = "YA")]
            YA = 6        }
        /// <summary>
        /// Reporting period.
        /// </summary>
        /// <value>Reporting period.</value>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public PeriodEnum? Period { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2009Results" /> class.
        /// </summary>
        /// <param name="ticker">The exchange symbol that this item is traded under. (required).</param>
        /// <param name="period">Reporting period..</param>
        /// <param name="calendarDate">calendarDate.</param>
        /// <param name="reportPeriod">reportPeriod.</param>
        /// <param name="updated">updated.</param>
        /// <param name="accumulatedOtherComprehensiveIncome">accumulatedOtherComprehensiveIncome.</param>
        /// <param name="assets">assets.</param>
        /// <param name="assetsAverage">assetsAverage.</param>
        /// <param name="assetsCurrent">assetsCurrent.</param>
        /// <param name="assetTurnover">assetTurnover.</param>
        /// <param name="assetsNonCurrent">assetsNonCurrent.</param>
        /// <param name="bookValuePerShare">bookValuePerShare.</param>
        /// <param name="capitalExpenditure">capitalExpenditure.</param>
        /// <param name="cashAndEquivalents">cashAndEquivalents.</param>
        /// <param name="cashAndEquivalentsUSD">cashAndEquivalentsUSD.</param>
        /// <param name="costOfRevenue">costOfRevenue.</param>
        /// <param name="consolidatedIncome">consolidatedIncome.</param>
        /// <param name="currentRatio">currentRatio.</param>
        /// <param name="debtToEquityRatio">debtToEquityRatio.</param>
        /// <param name="debt">debt.</param>
        /// <param name="debtCurrent">debtCurrent.</param>
        /// <param name="debtNonCurrent">debtNonCurrent.</param>
        /// <param name="debtUSD">debtUSD.</param>
        /// <param name="deferredRevenue">deferredRevenue.</param>
        /// <param name="depreciationAmortizationAndAccretion">depreciationAmortizationAndAccretion.</param>
        /// <param name="deposits">deposits.</param>
        /// <param name="dividendYield">dividendYield.</param>
        /// <param name="dividendsPerBasicCommonShare">dividendsPerBasicCommonShare.</param>
        /// <param name="earningBeforeInterestTaxes">earningBeforeInterestTaxes.</param>
        /// <param name="earningsBeforeInterestTaxesDepreciationAmortization">earningsBeforeInterestTaxesDepreciationAmortization.</param>
        /// <param name="eBITDAMargin">eBITDAMargin.</param>
        /// <param name="earningsBeforeInterestTaxesDepreciationAmortizationUSD">earningsBeforeInterestTaxesDepreciationAmortizationUSD.</param>
        /// <param name="earningBeforeInterestTaxesUSD">earningBeforeInterestTaxesUSD.</param>
        /// <param name="earningsBeforeTax">earningsBeforeTax.</param>
        /// <param name="earningsPerBasicShare">earningsPerBasicShare.</param>
        /// <param name="earningsPerDilutedShare">earningsPerDilutedShare.</param>
        /// <param name="earningsPerBasicShareUSD">earningsPerBasicShareUSD.</param>
        /// <param name="shareholdersEquity">shareholdersEquity.</param>
        /// <param name="averageEquity">averageEquity.</param>
        /// <param name="shareholdersEquityUSD">shareholdersEquityUSD.</param>
        /// <param name="enterpriseValue">enterpriseValue.</param>
        /// <param name="enterpriseValueOverEBIT">enterpriseValueOverEBIT.</param>
        /// <param name="enterpriseValueOverEBITDA">enterpriseValueOverEBITDA.</param>
        /// <param name="freeCashFlow">freeCashFlow.</param>
        /// <param name="freeCashFlowPerShare">freeCashFlowPerShare.</param>
        /// <param name="foreignCurrencyUSDExchangeRate">foreignCurrencyUSDExchangeRate.</param>
        /// <param name="grossProfit">grossProfit.</param>
        /// <param name="grossMargin">grossMargin.</param>
        /// <param name="goodwillAndIntangibleAssets">goodwillAndIntangibleAssets.</param>
        /// <param name="interestExpense">interestExpense.</param>
        /// <param name="investedCapital">investedCapital.</param>
        /// <param name="investedCapitalAverage">investedCapitalAverage.</param>
        /// <param name="inventory">inventory.</param>
        /// <param name="investments">investments.</param>
        /// <param name="investmentsCurrent">investmentsCurrent.</param>
        /// <param name="investmentsNonCurrent">investmentsNonCurrent.</param>
        /// <param name="totalLiabilities">totalLiabilities.</param>
        /// <param name="currentLiabilities">currentLiabilities.</param>
        /// <param name="liabilitiesNonCurrent">liabilitiesNonCurrent.</param>
        /// <param name="marketCapitalization">marketCapitalization.</param>
        /// <param name="netCashFlow">netCashFlow.</param>
        /// <param name="netCashFlowBusinessAcquisitionsDisposals">netCashFlowBusinessAcquisitionsDisposals.</param>
        /// <param name="issuanceEquityShares">issuanceEquityShares.</param>
        /// <param name="issuanceDebtSecurities">issuanceDebtSecurities.</param>
        /// <param name="paymentDividendsOtherCashDistributions">paymentDividendsOtherCashDistributions.</param>
        /// <param name="netCashFlowFromFinancing">netCashFlowFromFinancing.</param>
        /// <param name="netCashFlowFromInvesting">netCashFlowFromInvesting.</param>
        /// <param name="netCashFlowInvestmentAcquisitionsDisposals">netCashFlowInvestmentAcquisitionsDisposals.</param>
        /// <param name="netCashFlowFromOperations">netCashFlowFromOperations.</param>
        /// <param name="effectOfExchangeRateChangesOnCash">effectOfExchangeRateChangesOnCash.</param>
        /// <param name="netIncome">netIncome.</param>
        /// <param name="netIncomeCommonStock">netIncomeCommonStock.</param>
        /// <param name="netIncomeCommonStockUSD">netIncomeCommonStockUSD.</param>
        /// <param name="netLossIncomeFromDiscontinuedOperations">netLossIncomeFromDiscontinuedOperations.</param>
        /// <param name="netIncomeToNonControllingInterests">netIncomeToNonControllingInterests.</param>
        /// <param name="profitMargin">profitMargin.</param>
        /// <param name="operatingExpenses">operatingExpenses.</param>
        /// <param name="operatingIncome">operatingIncome.</param>
        /// <param name="tradeAndNonTradePayables">tradeAndNonTradePayables.</param>
        /// <param name="payoutRatio">payoutRatio.</param>
        /// <param name="priceToBookValue">priceToBookValue.</param>
        /// <param name="priceEarnings">priceEarnings.</param>
        /// <param name="priceToEarningsRatio">priceToEarningsRatio.</param>
        /// <param name="propertyPlantEquipmentNet">propertyPlantEquipmentNet.</param>
        /// <param name="preferredDividendsIncomeStatementImpact">preferredDividendsIncomeStatementImpact.</param>
        /// <param name="sharePriceAdjustedClose">sharePriceAdjustedClose.</param>
        /// <param name="priceSales">priceSales.</param>
        /// <param name="priceToSalesRatio">priceToSalesRatio.</param>
        /// <param name="tradeAndNonTradeReceivables">tradeAndNonTradeReceivables.</param>
        /// <param name="accumulatedRetainedEarningsDeficit">accumulatedRetainedEarningsDeficit.</param>
        /// <param name="revenues">revenues.</param>
        /// <param name="revenuesUSD">revenuesUSD.</param>
        /// <param name="researchAndDevelopmentExpense">researchAndDevelopmentExpense.</param>
        /// <param name="returnOnAverageAssets">returnOnAverageAssets.</param>
        /// <param name="returnOnAverageEquity">returnOnAverageEquity.</param>
        /// <param name="returnOnInvestedCapital">returnOnInvestedCapital.</param>
        /// <param name="returnOnSales">returnOnSales.</param>
        /// <param name="shareBasedCompensation">shareBasedCompensation.</param>
        /// <param name="sellingGeneralAndAdministrativeExpense">sellingGeneralAndAdministrativeExpense.</param>
        /// <param name="shareFactor">shareFactor.</param>
        /// <param name="shares">shares.</param>
        /// <param name="weightedAverageShares">weightedAverageShares.</param>
        /// <param name="weightedAverageSharesDiluted">weightedAverageSharesDiluted.</param>
        /// <param name="salesPerShare">salesPerShare.</param>
        /// <param name="tangibleAssetValue">tangibleAssetValue.</param>
        /// <param name="taxAssets">taxAssets.</param>
        /// <param name="incomeTaxExpense">incomeTaxExpense.</param>
        /// <param name="taxLiabilities">taxLiabilities.</param>
        /// <param name="tangibleAssetsBookValuePerShare">tangibleAssetsBookValuePerShare.</param>
        /// <param name="workingCapital">workingCapital.</param>
        public InlineResponse2009Results(string ticker = default(string), PeriodEnum? period = default(PeriodEnum?), DateTime? calendarDate = default(DateTime?), DateTime? reportPeriod = default(DateTime?), DateTime? updated = default(DateTime?), Int64? accumulatedOtherComprehensiveIncome = default(Int64?), Int64? assets = default(Int64?), Int64? assetsAverage = default(Int64?), Int64? assetsCurrent = default(Int64?), Int64? assetTurnover = default(Int64?), Int64? assetsNonCurrent = default(Int64?), double? bookValuePerShare = default(double?), Int64? capitalExpenditure = default(Int64?), Int64? cashAndEquivalents = default(Int64?), Int64? cashAndEquivalentsUSD = default(Int64?), Int64? costOfRevenue = default(Int64?), Int64? consolidatedIncome = default(Int64?), double? currentRatio = default(double?), double? debtToEquityRatio = default(double?), Int64? debt = default(Int64?), Int64? debtCurrent = default(Int64?), Int64? debtNonCurrent = default(Int64?), Int64? debtUSD = default(Int64?), Int64? deferredRevenue = default(Int64?), Int64? depreciationAmortizationAndAccretion = default(Int64?), Int64? deposits = default(Int64?), Int64? dividendYield = default(Int64?), Int64? dividendsPerBasicCommonShare = default(Int64?), Int64? earningBeforeInterestTaxes = default(Int64?), Int64? earningsBeforeInterestTaxesDepreciationAmortization = default(Int64?), double? eBITDAMargin = default(double?), Int64? earningsBeforeInterestTaxesDepreciationAmortizationUSD = default(Int64?), Int64? earningBeforeInterestTaxesUSD = default(Int64?), Int64? earningsBeforeTax = default(Int64?), double? earningsPerBasicShare = default(double?), double? earningsPerDilutedShare = default(double?), double? earningsPerBasicShareUSD = default(double?), Int64? shareholdersEquity = default(Int64?), Int64? averageEquity = default(Int64?), Int64? shareholdersEquityUSD = default(Int64?), Int64? enterpriseValue = default(Int64?), Int64? enterpriseValueOverEBIT = default(Int64?), double? enterpriseValueOverEBITDA = default(double?), Int64? freeCashFlow = default(Int64?), double? freeCashFlowPerShare = default(double?), Int64? foreignCurrencyUSDExchangeRate = default(Int64?), Int64? grossProfit = default(Int64?), double? grossMargin = default(double?), Int64? goodwillAndIntangibleAssets = default(Int64?), Int64? interestExpense = default(Int64?), Int64? investedCapital = default(Int64?), Int64? investedCapitalAverage = default(Int64?), Int64? inventory = default(Int64?), Int64? investments = default(Int64?), Int64? investmentsCurrent = default(Int64?), Int64? investmentsNonCurrent = default(Int64?), Int64? totalLiabilities = default(Int64?), Int64? currentLiabilities = default(Int64?), Int64? liabilitiesNonCurrent = default(Int64?), Int64? marketCapitalization = default(Int64?), Int64? netCashFlow = default(Int64?), Int64? netCashFlowBusinessAcquisitionsDisposals = default(Int64?), Int64? issuanceEquityShares = default(Int64?), Int64? issuanceDebtSecurities = default(Int64?), Int64? paymentDividendsOtherCashDistributions = default(Int64?), Int64? netCashFlowFromFinancing = default(Int64?), Int64? netCashFlowFromInvesting = default(Int64?), Int64? netCashFlowInvestmentAcquisitionsDisposals = default(Int64?), Int64? netCashFlowFromOperations = default(Int64?), Int64? effectOfExchangeRateChangesOnCash = default(Int64?), Int64? netIncome = default(Int64?), Int64? netIncomeCommonStock = default(Int64?), Int64? netIncomeCommonStockUSD = default(Int64?), Int64? netLossIncomeFromDiscontinuedOperations = default(Int64?), Int64? netIncomeToNonControllingInterests = default(Int64?), double? profitMargin = default(double?), Int64? operatingExpenses = default(Int64?), Int64? operatingIncome = default(Int64?), Int64? tradeAndNonTradePayables = default(Int64?), Int64? payoutRatio = default(Int64?), double? priceToBookValue = default(double?), double? priceEarnings = default(double?), double? priceToEarningsRatio = default(double?), Int64? propertyPlantEquipmentNet = default(Int64?), Int64? preferredDividendsIncomeStatementImpact = default(Int64?), double? sharePriceAdjustedClose = default(double?), double? priceSales = default(double?), double? priceToSalesRatio = default(double?), Int64? tradeAndNonTradeReceivables = default(Int64?), Int64? accumulatedRetainedEarningsDeficit = default(Int64?), Int64? revenues = default(Int64?), Int64? revenuesUSD = default(Int64?), Int64? researchAndDevelopmentExpense = default(Int64?), double? returnOnAverageAssets = default(double?), double? returnOnAverageEquity = default(double?), double? returnOnInvestedCapital = default(double?), double? returnOnSales = default(double?), Int64? shareBasedCompensation = default(Int64?), Int64? sellingGeneralAndAdministrativeExpense = default(Int64?), double? shareFactor = default(double?), Int64? shares = default(Int64?), Int64? weightedAverageShares = default(Int64?), Int64? weightedAverageSharesDiluted = default(Int64?), double? salesPerShare = default(double?), Int64? tangibleAssetValue = default(Int64?), Int64? taxAssets = default(Int64?), Int64? incomeTaxExpense = default(Int64?), Int64? taxLiabilities = default(Int64?), double? tangibleAssetsBookValuePerShare = default(double?), Int64? workingCapital = default(Int64?))
        {
            // to ensure "ticker" is required (not null)
            if (ticker == null)
            {
                throw new InvalidDataException("ticker is a required property for InlineResponse2009Results and cannot be null");
            }
            else
            {
                this.Ticker = ticker;
            }
            this.Period = period;
            this.CalendarDate = calendarDate;
            this.ReportPeriod = reportPeriod;
            this.Updated = updated;
            this.AccumulatedOtherComprehensiveIncome = accumulatedOtherComprehensiveIncome;
            this.Assets = assets;
            this.AssetsAverage = assetsAverage;
            this.AssetsCurrent = assetsCurrent;
            this.AssetTurnover = assetTurnover;
            this.AssetsNonCurrent = assetsNonCurrent;
            this.BookValuePerShare = bookValuePerShare;
            this.CapitalExpenditure = capitalExpenditure;
            this.CashAndEquivalents = cashAndEquivalents;
            this.CashAndEquivalentsUSD = cashAndEquivalentsUSD;
            this.CostOfRevenue = costOfRevenue;
            this.ConsolidatedIncome = consolidatedIncome;
            this.CurrentRatio = currentRatio;
            this.DebtToEquityRatio = debtToEquityRatio;
            this.Debt = debt;
            this.DebtCurrent = debtCurrent;
            this.DebtNonCurrent = debtNonCurrent;
            this.DebtUSD = debtUSD;
            this.DeferredRevenue = deferredRevenue;
            this.DepreciationAmortizationAndAccretion = depreciationAmortizationAndAccretion;
            this.Deposits = deposits;
            this.DividendYield = dividendYield;
            this.DividendsPerBasicCommonShare = dividendsPerBasicCommonShare;
            this.EarningBeforeInterestTaxes = earningBeforeInterestTaxes;
            this.EarningsBeforeInterestTaxesDepreciationAmortization = earningsBeforeInterestTaxesDepreciationAmortization;
            this.EBITDAMargin = eBITDAMargin;
            this.EarningsBeforeInterestTaxesDepreciationAmortizationUSD = earningsBeforeInterestTaxesDepreciationAmortizationUSD;
            this.EarningBeforeInterestTaxesUSD = earningBeforeInterestTaxesUSD;
            this.EarningsBeforeTax = earningsBeforeTax;
            this.EarningsPerBasicShare = earningsPerBasicShare;
            this.EarningsPerDilutedShare = earningsPerDilutedShare;
            this.EarningsPerBasicShareUSD = earningsPerBasicShareUSD;
            this.ShareholdersEquity = shareholdersEquity;
            this.AverageEquity = averageEquity;
            this.ShareholdersEquityUSD = shareholdersEquityUSD;
            this.EnterpriseValue = enterpriseValue;
            this.EnterpriseValueOverEBIT = enterpriseValueOverEBIT;
            this.EnterpriseValueOverEBITDA = enterpriseValueOverEBITDA;
            this.FreeCashFlow = freeCashFlow;
            this.FreeCashFlowPerShare = freeCashFlowPerShare;
            this.ForeignCurrencyUSDExchangeRate = foreignCurrencyUSDExchangeRate;
            this.GrossProfit = grossProfit;
            this.GrossMargin = grossMargin;
            this.GoodwillAndIntangibleAssets = goodwillAndIntangibleAssets;
            this.InterestExpense = interestExpense;
            this.InvestedCapital = investedCapital;
            this.InvestedCapitalAverage = investedCapitalAverage;
            this.Inventory = inventory;
            this.Investments = investments;
            this.InvestmentsCurrent = investmentsCurrent;
            this.InvestmentsNonCurrent = investmentsNonCurrent;
            this.TotalLiabilities = totalLiabilities;
            this.CurrentLiabilities = currentLiabilities;
            this.LiabilitiesNonCurrent = liabilitiesNonCurrent;
            this.MarketCapitalization = marketCapitalization;
            this.NetCashFlow = netCashFlow;
            this.NetCashFlowBusinessAcquisitionsDisposals = netCashFlowBusinessAcquisitionsDisposals;
            this.IssuanceEquityShares = issuanceEquityShares;
            this.IssuanceDebtSecurities = issuanceDebtSecurities;
            this.PaymentDividendsOtherCashDistributions = paymentDividendsOtherCashDistributions;
            this.NetCashFlowFromFinancing = netCashFlowFromFinancing;
            this.NetCashFlowFromInvesting = netCashFlowFromInvesting;
            this.NetCashFlowInvestmentAcquisitionsDisposals = netCashFlowInvestmentAcquisitionsDisposals;
            this.NetCashFlowFromOperations = netCashFlowFromOperations;
            this.EffectOfExchangeRateChangesOnCash = effectOfExchangeRateChangesOnCash;
            this.NetIncome = netIncome;
            this.NetIncomeCommonStock = netIncomeCommonStock;
            this.NetIncomeCommonStockUSD = netIncomeCommonStockUSD;
            this.NetLossIncomeFromDiscontinuedOperations = netLossIncomeFromDiscontinuedOperations;
            this.NetIncomeToNonControllingInterests = netIncomeToNonControllingInterests;
            this.ProfitMargin = profitMargin;
            this.OperatingExpenses = operatingExpenses;
            this.OperatingIncome = operatingIncome;
            this.TradeAndNonTradePayables = tradeAndNonTradePayables;
            this.PayoutRatio = payoutRatio;
            this.PriceToBookValue = priceToBookValue;
            this.PriceEarnings = priceEarnings;
            this.PriceToEarningsRatio = priceToEarningsRatio;
            this.PropertyPlantEquipmentNet = propertyPlantEquipmentNet;
            this.PreferredDividendsIncomeStatementImpact = preferredDividendsIncomeStatementImpact;
            this.SharePriceAdjustedClose = sharePriceAdjustedClose;
            this.PriceSales = priceSales;
            this.PriceToSalesRatio = priceToSalesRatio;
            this.TradeAndNonTradeReceivables = tradeAndNonTradeReceivables;
            this.AccumulatedRetainedEarningsDeficit = accumulatedRetainedEarningsDeficit;
            this.Revenues = revenues;
            this.RevenuesUSD = revenuesUSD;
            this.ResearchAndDevelopmentExpense = researchAndDevelopmentExpense;
            this.ReturnOnAverageAssets = returnOnAverageAssets;
            this.ReturnOnAverageEquity = returnOnAverageEquity;
            this.ReturnOnInvestedCapital = returnOnInvestedCapital;
            this.ReturnOnSales = returnOnSales;
            this.ShareBasedCompensation = shareBasedCompensation;
            this.SellingGeneralAndAdministrativeExpense = sellingGeneralAndAdministrativeExpense;
            this.ShareFactor = shareFactor;
            this.Shares = shares;
            this.WeightedAverageShares = weightedAverageShares;
            this.WeightedAverageSharesDiluted = weightedAverageSharesDiluted;
            this.SalesPerShare = salesPerShare;
            this.TangibleAssetValue = tangibleAssetValue;
            this.TaxAssets = taxAssets;
            this.IncomeTaxExpense = incomeTaxExpense;
            this.TaxLiabilities = taxLiabilities;
            this.TangibleAssetsBookValuePerShare = tangibleAssetsBookValuePerShare;
            this.WorkingCapital = workingCapital;
        }
        
        /// <summary>
        /// The exchange symbol that this item is traded under.
        /// </summary>
        /// <value>The exchange symbol that this item is traded under.</value>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public string Ticker { get; set; }


        /// <summary>
        /// Gets or Sets CalendarDate
        /// </summary>
        [DataMember(Name="calendarDate", EmitDefaultValue=false)]
        public DateTime? CalendarDate { get; set; }

        /// <summary>
        /// Gets or Sets ReportPeriod
        /// </summary>
        [DataMember(Name="reportPeriod", EmitDefaultValue=false)]
        public DateTime? ReportPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Gets or Sets AccumulatedOtherComprehensiveIncome
        /// </summary>
        [DataMember(Name="accumulatedOtherComprehensiveIncome", EmitDefaultValue=false)]
        public Int64? AccumulatedOtherComprehensiveIncome { get; set; }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name="assets", EmitDefaultValue=false)]
        public Int64? Assets { get; set; }

        /// <summary>
        /// Gets or Sets AssetsAverage
        /// </summary>
        [DataMember(Name="assetsAverage", EmitDefaultValue=false)]
        public Int64? AssetsAverage { get; set; }

        /// <summary>
        /// Gets or Sets AssetsCurrent
        /// </summary>
        [DataMember(Name="assetsCurrent", EmitDefaultValue=false)]
        public Int64? AssetsCurrent { get; set; }

        /// <summary>
        /// Gets or Sets AssetTurnover
        /// </summary>
        [DataMember(Name="assetTurnover", EmitDefaultValue=false)]
        public Int64? AssetTurnover { get; set; }

        /// <summary>
        /// Gets or Sets AssetsNonCurrent
        /// </summary>
        [DataMember(Name="assetsNonCurrent", EmitDefaultValue=false)]
        public Int64? AssetsNonCurrent { get; set; }

        /// <summary>
        /// Gets or Sets BookValuePerShare
        /// </summary>
        [DataMember(Name="bookValuePerShare", EmitDefaultValue=false)]
        public double? BookValuePerShare { get; set; }

        /// <summary>
        /// Gets or Sets CapitalExpenditure
        /// </summary>
        [DataMember(Name="capitalExpenditure", EmitDefaultValue=false)]
        public Int64? CapitalExpenditure { get; set; }

        /// <summary>
        /// Gets or Sets CashAndEquivalents
        /// </summary>
        [DataMember(Name="cashAndEquivalents", EmitDefaultValue=false)]
        public Int64? CashAndEquivalents { get; set; }

        /// <summary>
        /// Gets or Sets CashAndEquivalentsUSD
        /// </summary>
        [DataMember(Name="cashAndEquivalentsUSD", EmitDefaultValue=false)]
        public Int64? CashAndEquivalentsUSD { get; set; }

        /// <summary>
        /// Gets or Sets CostOfRevenue
        /// </summary>
        [DataMember(Name="costOfRevenue", EmitDefaultValue=false)]
        public Int64? CostOfRevenue { get; set; }

        /// <summary>
        /// Gets or Sets ConsolidatedIncome
        /// </summary>
        [DataMember(Name="consolidatedIncome", EmitDefaultValue=false)]
        public Int64? ConsolidatedIncome { get; set; }

        /// <summary>
        /// Gets or Sets CurrentRatio
        /// </summary>
        [DataMember(Name="currentRatio", EmitDefaultValue=false)]
        public double? CurrentRatio { get; set; }

        /// <summary>
        /// Gets or Sets DebtToEquityRatio
        /// </summary>
        [DataMember(Name="debtToEquityRatio", EmitDefaultValue=false)]
        public double? DebtToEquityRatio { get; set; }

        /// <summary>
        /// Gets or Sets Debt
        /// </summary>
        [DataMember(Name="debt", EmitDefaultValue=false)]
        public Int64? Debt { get; set; }

        /// <summary>
        /// Gets or Sets DebtCurrent
        /// </summary>
        [DataMember(Name="debtCurrent", EmitDefaultValue=false)]
        public Int64? DebtCurrent { get; set; }

        /// <summary>
        /// Gets or Sets DebtNonCurrent
        /// </summary>
        [DataMember(Name="debtNonCurrent", EmitDefaultValue=false)]
        public Int64? DebtNonCurrent { get; set; }

        /// <summary>
        /// Gets or Sets DebtUSD
        /// </summary>
        [DataMember(Name="debtUSD", EmitDefaultValue=false)]
        public Int64? DebtUSD { get; set; }

        /// <summary>
        /// Gets or Sets DeferredRevenue
        /// </summary>
        [DataMember(Name="deferredRevenue", EmitDefaultValue=false)]
        public Int64? DeferredRevenue { get; set; }

        /// <summary>
        /// Gets or Sets DepreciationAmortizationAndAccretion
        /// </summary>
        [DataMember(Name="depreciationAmortizationAndAccretion", EmitDefaultValue=false)]
        public Int64? DepreciationAmortizationAndAccretion { get; set; }

        /// <summary>
        /// Gets or Sets Deposits
        /// </summary>
        [DataMember(Name="deposits", EmitDefaultValue=false)]
        public Int64? Deposits { get; set; }

        /// <summary>
        /// Gets or Sets DividendYield
        /// </summary>
        [DataMember(Name="dividendYield", EmitDefaultValue=false)]
        public Int64? DividendYield { get; set; }

        /// <summary>
        /// Gets or Sets DividendsPerBasicCommonShare
        /// </summary>
        [DataMember(Name="dividendsPerBasicCommonShare", EmitDefaultValue=false)]
        public Int64? DividendsPerBasicCommonShare { get; set; }

        /// <summary>
        /// Gets or Sets EarningBeforeInterestTaxes
        /// </summary>
        [DataMember(Name="earningBeforeInterestTaxes", EmitDefaultValue=false)]
        public Int64? EarningBeforeInterestTaxes { get; set; }

        /// <summary>
        /// Gets or Sets EarningsBeforeInterestTaxesDepreciationAmortization
        /// </summary>
        [DataMember(Name="earningsBeforeInterestTaxesDepreciationAmortization", EmitDefaultValue=false)]
        public Int64? EarningsBeforeInterestTaxesDepreciationAmortization { get; set; }

        /// <summary>
        /// Gets or Sets EBITDAMargin
        /// </summary>
        [DataMember(Name="EBITDAMargin", EmitDefaultValue=false)]
        public double? EBITDAMargin { get; set; }

        /// <summary>
        /// Gets or Sets EarningsBeforeInterestTaxesDepreciationAmortizationUSD
        /// </summary>
        [DataMember(Name="earningsBeforeInterestTaxesDepreciationAmortizationUSD", EmitDefaultValue=false)]
        public Int64? EarningsBeforeInterestTaxesDepreciationAmortizationUSD { get; set; }

        /// <summary>
        /// Gets or Sets EarningBeforeInterestTaxesUSD
        /// </summary>
        [DataMember(Name="earningBeforeInterestTaxesUSD", EmitDefaultValue=false)]
        public Int64? EarningBeforeInterestTaxesUSD { get; set; }

        /// <summary>
        /// Gets or Sets EarningsBeforeTax
        /// </summary>
        [DataMember(Name="earningsBeforeTax", EmitDefaultValue=false)]
        public Int64? EarningsBeforeTax { get; set; }

        /// <summary>
        /// Gets or Sets EarningsPerBasicShare
        /// </summary>
        [DataMember(Name="earningsPerBasicShare", EmitDefaultValue=false)]
        public double? EarningsPerBasicShare { get; set; }

        /// <summary>
        /// Gets or Sets EarningsPerDilutedShare
        /// </summary>
        [DataMember(Name="earningsPerDilutedShare", EmitDefaultValue=false)]
        public double? EarningsPerDilutedShare { get; set; }

        /// <summary>
        /// Gets or Sets EarningsPerBasicShareUSD
        /// </summary>
        [DataMember(Name="earningsPerBasicShareUSD", EmitDefaultValue=false)]
        public double? EarningsPerBasicShareUSD { get; set; }

        /// <summary>
        /// Gets or Sets ShareholdersEquity
        /// </summary>
        [DataMember(Name="shareholdersEquity", EmitDefaultValue=false)]
        public Int64? ShareholdersEquity { get; set; }

        /// <summary>
        /// Gets or Sets AverageEquity
        /// </summary>
        [DataMember(Name="averageEquity", EmitDefaultValue=false)]
        public Int64? AverageEquity { get; set; }

        /// <summary>
        /// Gets or Sets ShareholdersEquityUSD
        /// </summary>
        [DataMember(Name="shareholdersEquityUSD", EmitDefaultValue=false)]
        public Int64? ShareholdersEquityUSD { get; set; }

        /// <summary>
        /// Gets or Sets EnterpriseValue
        /// </summary>
        [DataMember(Name="enterpriseValue", EmitDefaultValue=false)]
        public Int64? EnterpriseValue { get; set; }

        /// <summary>
        /// Gets or Sets EnterpriseValueOverEBIT
        /// </summary>
        [DataMember(Name="enterpriseValueOverEBIT", EmitDefaultValue=false)]
        public Int64? EnterpriseValueOverEBIT { get; set; }

        /// <summary>
        /// Gets or Sets EnterpriseValueOverEBITDA
        /// </summary>
        [DataMember(Name="enterpriseValueOverEBITDA", EmitDefaultValue=false)]
        public double? EnterpriseValueOverEBITDA { get; set; }

        /// <summary>
        /// Gets or Sets FreeCashFlow
        /// </summary>
        [DataMember(Name="freeCashFlow", EmitDefaultValue=false)]
        public Int64? FreeCashFlow { get; set; }

        /// <summary>
        /// Gets or Sets FreeCashFlowPerShare
        /// </summary>
        [DataMember(Name="freeCashFlowPerShare", EmitDefaultValue=false)]
        public double? FreeCashFlowPerShare { get; set; }

        /// <summary>
        /// Gets or Sets ForeignCurrencyUSDExchangeRate
        /// </summary>
        [DataMember(Name="foreignCurrencyUSDExchangeRate", EmitDefaultValue=false)]
        public Int64? ForeignCurrencyUSDExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets GrossProfit
        /// </summary>
        [DataMember(Name="grossProfit", EmitDefaultValue=false)]
        public Int64? GrossProfit { get; set; }

        /// <summary>
        /// Gets or Sets GrossMargin
        /// </summary>
        [DataMember(Name="grossMargin", EmitDefaultValue=false)]
        public double? GrossMargin { get; set; }

        /// <summary>
        /// Gets or Sets GoodwillAndIntangibleAssets
        /// </summary>
        [DataMember(Name="goodwillAndIntangibleAssets", EmitDefaultValue=false)]
        public Int64? GoodwillAndIntangibleAssets { get; set; }

        /// <summary>
        /// Gets or Sets InterestExpense
        /// </summary>
        [DataMember(Name="interestExpense", EmitDefaultValue=false)]
        public Int64? InterestExpense { get; set; }

        /// <summary>
        /// Gets or Sets InvestedCapital
        /// </summary>
        [DataMember(Name="investedCapital", EmitDefaultValue=false)]
        public Int64? InvestedCapital { get; set; }

        /// <summary>
        /// Gets or Sets InvestedCapitalAverage
        /// </summary>
        [DataMember(Name="investedCapitalAverage", EmitDefaultValue=false)]
        public Int64? InvestedCapitalAverage { get; set; }

        /// <summary>
        /// Gets or Sets Inventory
        /// </summary>
        [DataMember(Name="inventory", EmitDefaultValue=false)]
        public Int64? Inventory { get; set; }

        /// <summary>
        /// Gets or Sets Investments
        /// </summary>
        [DataMember(Name="investments", EmitDefaultValue=false)]
        public Int64? Investments { get; set; }

        /// <summary>
        /// Gets or Sets InvestmentsCurrent
        /// </summary>
        [DataMember(Name="investmentsCurrent", EmitDefaultValue=false)]
        public Int64? InvestmentsCurrent { get; set; }

        /// <summary>
        /// Gets or Sets InvestmentsNonCurrent
        /// </summary>
        [DataMember(Name="investmentsNonCurrent", EmitDefaultValue=false)]
        public Int64? InvestmentsNonCurrent { get; set; }

        /// <summary>
        /// Gets or Sets TotalLiabilities
        /// </summary>
        [DataMember(Name="totalLiabilities", EmitDefaultValue=false)]
        public Int64? TotalLiabilities { get; set; }

        /// <summary>
        /// Gets or Sets CurrentLiabilities
        /// </summary>
        [DataMember(Name="currentLiabilities", EmitDefaultValue=false)]
        public Int64? CurrentLiabilities { get; set; }

        /// <summary>
        /// Gets or Sets LiabilitiesNonCurrent
        /// </summary>
        [DataMember(Name="liabilitiesNonCurrent", EmitDefaultValue=false)]
        public Int64? LiabilitiesNonCurrent { get; set; }

        /// <summary>
        /// Gets or Sets MarketCapitalization
        /// </summary>
        [DataMember(Name="marketCapitalization", EmitDefaultValue=false)]
        public Int64? MarketCapitalization { get; set; }

        /// <summary>
        /// Gets or Sets NetCashFlow
        /// </summary>
        [DataMember(Name="netCashFlow", EmitDefaultValue=false)]
        public Int64? NetCashFlow { get; set; }

        /// <summary>
        /// Gets or Sets NetCashFlowBusinessAcquisitionsDisposals
        /// </summary>
        [DataMember(Name="netCashFlowBusinessAcquisitionsDisposals", EmitDefaultValue=false)]
        public Int64? NetCashFlowBusinessAcquisitionsDisposals { get; set; }

        /// <summary>
        /// Gets or Sets IssuanceEquityShares
        /// </summary>
        [DataMember(Name="issuanceEquityShares", EmitDefaultValue=false)]
        public Int64? IssuanceEquityShares { get; set; }

        /// <summary>
        /// Gets or Sets IssuanceDebtSecurities
        /// </summary>
        [DataMember(Name="issuanceDebtSecurities", EmitDefaultValue=false)]
        public Int64? IssuanceDebtSecurities { get; set; }

        /// <summary>
        /// Gets or Sets PaymentDividendsOtherCashDistributions
        /// </summary>
        [DataMember(Name="paymentDividendsOtherCashDistributions", EmitDefaultValue=false)]
        public Int64? PaymentDividendsOtherCashDistributions { get; set; }

        /// <summary>
        /// Gets or Sets NetCashFlowFromFinancing
        /// </summary>
        [DataMember(Name="netCashFlowFromFinancing", EmitDefaultValue=false)]
        public Int64? NetCashFlowFromFinancing { get; set; }

        /// <summary>
        /// Gets or Sets NetCashFlowFromInvesting
        /// </summary>
        [DataMember(Name="netCashFlowFromInvesting", EmitDefaultValue=false)]
        public Int64? NetCashFlowFromInvesting { get; set; }

        /// <summary>
        /// Gets or Sets NetCashFlowInvestmentAcquisitionsDisposals
        /// </summary>
        [DataMember(Name="netCashFlowInvestmentAcquisitionsDisposals", EmitDefaultValue=false)]
        public Int64? NetCashFlowInvestmentAcquisitionsDisposals { get; set; }

        /// <summary>
        /// Gets or Sets NetCashFlowFromOperations
        /// </summary>
        [DataMember(Name="netCashFlowFromOperations", EmitDefaultValue=false)]
        public Int64? NetCashFlowFromOperations { get; set; }

        /// <summary>
        /// Gets or Sets EffectOfExchangeRateChangesOnCash
        /// </summary>
        [DataMember(Name="effectOfExchangeRateChangesOnCash", EmitDefaultValue=false)]
        public Int64? EffectOfExchangeRateChangesOnCash { get; set; }

        /// <summary>
        /// Gets or Sets NetIncome
        /// </summary>
        [DataMember(Name="netIncome", EmitDefaultValue=false)]
        public Int64? NetIncome { get; set; }

        /// <summary>
        /// Gets or Sets NetIncomeCommonStock
        /// </summary>
        [DataMember(Name="netIncomeCommonStock", EmitDefaultValue=false)]
        public Int64? NetIncomeCommonStock { get; set; }

        /// <summary>
        /// Gets or Sets NetIncomeCommonStockUSD
        /// </summary>
        [DataMember(Name="netIncomeCommonStockUSD", EmitDefaultValue=false)]
        public Int64? NetIncomeCommonStockUSD { get; set; }

        /// <summary>
        /// Gets or Sets NetLossIncomeFromDiscontinuedOperations
        /// </summary>
        [DataMember(Name="netLossIncomeFromDiscontinuedOperations", EmitDefaultValue=false)]
        public Int64? NetLossIncomeFromDiscontinuedOperations { get; set; }

        /// <summary>
        /// Gets or Sets NetIncomeToNonControllingInterests
        /// </summary>
        [DataMember(Name="netIncomeToNonControllingInterests", EmitDefaultValue=false)]
        public Int64? NetIncomeToNonControllingInterests { get; set; }

        /// <summary>
        /// Gets or Sets ProfitMargin
        /// </summary>
        [DataMember(Name="profitMargin", EmitDefaultValue=false)]
        public double? ProfitMargin { get; set; }

        /// <summary>
        /// Gets or Sets OperatingExpenses
        /// </summary>
        [DataMember(Name="operatingExpenses", EmitDefaultValue=false)]
        public Int64? OperatingExpenses { get; set; }

        /// <summary>
        /// Gets or Sets OperatingIncome
        /// </summary>
        [DataMember(Name="operatingIncome", EmitDefaultValue=false)]
        public Int64? OperatingIncome { get; set; }

        /// <summary>
        /// Gets or Sets TradeAndNonTradePayables
        /// </summary>
        [DataMember(Name="tradeAndNonTradePayables", EmitDefaultValue=false)]
        public Int64? TradeAndNonTradePayables { get; set; }

        /// <summary>
        /// Gets or Sets PayoutRatio
        /// </summary>
        [DataMember(Name="payoutRatio", EmitDefaultValue=false)]
        public Int64? PayoutRatio { get; set; }

        /// <summary>
        /// Gets or Sets PriceToBookValue
        /// </summary>
        [DataMember(Name="priceToBookValue", EmitDefaultValue=false)]
        public double? PriceToBookValue { get; set; }

        /// <summary>
        /// Gets or Sets PriceEarnings
        /// </summary>
        [DataMember(Name="priceEarnings", EmitDefaultValue=false)]
        public double? PriceEarnings { get; set; }

        /// <summary>
        /// Gets or Sets PriceToEarningsRatio
        /// </summary>
        [DataMember(Name="priceToEarningsRatio", EmitDefaultValue=false)]
        public double? PriceToEarningsRatio { get; set; }

        /// <summary>
        /// Gets or Sets PropertyPlantEquipmentNet
        /// </summary>
        [DataMember(Name="propertyPlantEquipmentNet", EmitDefaultValue=false)]
        public Int64? PropertyPlantEquipmentNet { get; set; }

        /// <summary>
        /// Gets or Sets PreferredDividendsIncomeStatementImpact
        /// </summary>
        [DataMember(Name="preferredDividendsIncomeStatementImpact", EmitDefaultValue=false)]
        public Int64? PreferredDividendsIncomeStatementImpact { get; set; }

        /// <summary>
        /// Gets or Sets SharePriceAdjustedClose
        /// </summary>
        [DataMember(Name="sharePriceAdjustedClose", EmitDefaultValue=false)]
        public double? SharePriceAdjustedClose { get; set; }

        /// <summary>
        /// Gets or Sets PriceSales
        /// </summary>
        [DataMember(Name="priceSales", EmitDefaultValue=false)]
        public double? PriceSales { get; set; }

        /// <summary>
        /// Gets or Sets PriceToSalesRatio
        /// </summary>
        [DataMember(Name="priceToSalesRatio", EmitDefaultValue=false)]
        public double? PriceToSalesRatio { get; set; }

        /// <summary>
        /// Gets or Sets TradeAndNonTradeReceivables
        /// </summary>
        [DataMember(Name="tradeAndNonTradeReceivables", EmitDefaultValue=false)]
        public Int64? TradeAndNonTradeReceivables { get; set; }

        /// <summary>
        /// Gets or Sets AccumulatedRetainedEarningsDeficit
        /// </summary>
        [DataMember(Name="accumulatedRetainedEarningsDeficit", EmitDefaultValue=false)]
        public Int64? AccumulatedRetainedEarningsDeficit { get; set; }

        /// <summary>
        /// Gets or Sets Revenues
        /// </summary>
        [DataMember(Name="revenues", EmitDefaultValue=false)]
        public Int64? Revenues { get; set; }

        /// <summary>
        /// Gets or Sets RevenuesUSD
        /// </summary>
        [DataMember(Name="revenuesUSD", EmitDefaultValue=false)]
        public Int64? RevenuesUSD { get; set; }

        /// <summary>
        /// Gets or Sets ResearchAndDevelopmentExpense
        /// </summary>
        [DataMember(Name="researchAndDevelopmentExpense", EmitDefaultValue=false)]
        public Int64? ResearchAndDevelopmentExpense { get; set; }

        /// <summary>
        /// Gets or Sets ReturnOnAverageAssets
        /// </summary>
        [DataMember(Name="returnOnAverageAssets", EmitDefaultValue=false)]
        public double? ReturnOnAverageAssets { get; set; }

        /// <summary>
        /// Gets or Sets ReturnOnAverageEquity
        /// </summary>
        [DataMember(Name="returnOnAverageEquity", EmitDefaultValue=false)]
        public double? ReturnOnAverageEquity { get; set; }

        /// <summary>
        /// Gets or Sets ReturnOnInvestedCapital
        /// </summary>
        [DataMember(Name="returnOnInvestedCapital", EmitDefaultValue=false)]
        public double? ReturnOnInvestedCapital { get; set; }

        /// <summary>
        /// Gets or Sets ReturnOnSales
        /// </summary>
        [DataMember(Name="returnOnSales", EmitDefaultValue=false)]
        public double? ReturnOnSales { get; set; }

        /// <summary>
        /// Gets or Sets ShareBasedCompensation
        /// </summary>
        [DataMember(Name="shareBasedCompensation", EmitDefaultValue=false)]
        public Int64? ShareBasedCompensation { get; set; }

        /// <summary>
        /// Gets or Sets SellingGeneralAndAdministrativeExpense
        /// </summary>
        [DataMember(Name="sellingGeneralAndAdministrativeExpense", EmitDefaultValue=false)]
        public Int64? SellingGeneralAndAdministrativeExpense { get; set; }

        /// <summary>
        /// Gets or Sets ShareFactor
        /// </summary>
        [DataMember(Name="shareFactor", EmitDefaultValue=false)]
        public double? ShareFactor { get; set; }

        /// <summary>
        /// Gets or Sets Shares
        /// </summary>
        [DataMember(Name="shares", EmitDefaultValue=false)]
        public Int64? Shares { get; set; }

        /// <summary>
        /// Gets or Sets WeightedAverageShares
        /// </summary>
        [DataMember(Name="weightedAverageShares", EmitDefaultValue=false)]
        public Int64? WeightedAverageShares { get; set; }

        /// <summary>
        /// Gets or Sets WeightedAverageSharesDiluted
        /// </summary>
        [DataMember(Name="weightedAverageSharesDiluted", EmitDefaultValue=false)]
        public Int64? WeightedAverageSharesDiluted { get; set; }

        /// <summary>
        /// Gets or Sets SalesPerShare
        /// </summary>
        [DataMember(Name="salesPerShare", EmitDefaultValue=false)]
        public double? SalesPerShare { get; set; }

        /// <summary>
        /// Gets or Sets TangibleAssetValue
        /// </summary>
        [DataMember(Name="tangibleAssetValue", EmitDefaultValue=false)]
        public Int64? TangibleAssetValue { get; set; }

        /// <summary>
        /// Gets or Sets TaxAssets
        /// </summary>
        [DataMember(Name="taxAssets", EmitDefaultValue=false)]
        public Int64? TaxAssets { get; set; }

        /// <summary>
        /// Gets or Sets IncomeTaxExpense
        /// </summary>
        [DataMember(Name="incomeTaxExpense", EmitDefaultValue=false)]
        public Int64? IncomeTaxExpense { get; set; }

        /// <summary>
        /// Gets or Sets TaxLiabilities
        /// </summary>
        [DataMember(Name="taxLiabilities", EmitDefaultValue=false)]
        public Int64? TaxLiabilities { get; set; }

        /// <summary>
        /// Gets or Sets TangibleAssetsBookValuePerShare
        /// </summary>
        [DataMember(Name="tangibleAssetsBookValuePerShare", EmitDefaultValue=false)]
        public double? TangibleAssetsBookValuePerShare { get; set; }

        /// <summary>
        /// Gets or Sets WorkingCapital
        /// </summary>
        [DataMember(Name="workingCapital", EmitDefaultValue=false)]
        public Int64? WorkingCapital { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2009Results {\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  CalendarDate: ").Append(CalendarDate).Append("\n");
            sb.Append("  ReportPeriod: ").Append(ReportPeriod).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  AccumulatedOtherComprehensiveIncome: ").Append(AccumulatedOtherComprehensiveIncome).Append("\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  AssetsAverage: ").Append(AssetsAverage).Append("\n");
            sb.Append("  AssetsCurrent: ").Append(AssetsCurrent).Append("\n");
            sb.Append("  AssetTurnover: ").Append(AssetTurnover).Append("\n");
            sb.Append("  AssetsNonCurrent: ").Append(AssetsNonCurrent).Append("\n");
            sb.Append("  BookValuePerShare: ").Append(BookValuePerShare).Append("\n");
            sb.Append("  CapitalExpenditure: ").Append(CapitalExpenditure).Append("\n");
            sb.Append("  CashAndEquivalents: ").Append(CashAndEquivalents).Append("\n");
            sb.Append("  CashAndEquivalentsUSD: ").Append(CashAndEquivalentsUSD).Append("\n");
            sb.Append("  CostOfRevenue: ").Append(CostOfRevenue).Append("\n");
            sb.Append("  ConsolidatedIncome: ").Append(ConsolidatedIncome).Append("\n");
            sb.Append("  CurrentRatio: ").Append(CurrentRatio).Append("\n");
            sb.Append("  DebtToEquityRatio: ").Append(DebtToEquityRatio).Append("\n");
            sb.Append("  Debt: ").Append(Debt).Append("\n");
            sb.Append("  DebtCurrent: ").Append(DebtCurrent).Append("\n");
            sb.Append("  DebtNonCurrent: ").Append(DebtNonCurrent).Append("\n");
            sb.Append("  DebtUSD: ").Append(DebtUSD).Append("\n");
            sb.Append("  DeferredRevenue: ").Append(DeferredRevenue).Append("\n");
            sb.Append("  DepreciationAmortizationAndAccretion: ").Append(DepreciationAmortizationAndAccretion).Append("\n");
            sb.Append("  Deposits: ").Append(Deposits).Append("\n");
            sb.Append("  DividendYield: ").Append(DividendYield).Append("\n");
            sb.Append("  DividendsPerBasicCommonShare: ").Append(DividendsPerBasicCommonShare).Append("\n");
            sb.Append("  EarningBeforeInterestTaxes: ").Append(EarningBeforeInterestTaxes).Append("\n");
            sb.Append("  EarningsBeforeInterestTaxesDepreciationAmortization: ").Append(EarningsBeforeInterestTaxesDepreciationAmortization).Append("\n");
            sb.Append("  EBITDAMargin: ").Append(EBITDAMargin).Append("\n");
            sb.Append("  EarningsBeforeInterestTaxesDepreciationAmortizationUSD: ").Append(EarningsBeforeInterestTaxesDepreciationAmortizationUSD).Append("\n");
            sb.Append("  EarningBeforeInterestTaxesUSD: ").Append(EarningBeforeInterestTaxesUSD).Append("\n");
            sb.Append("  EarningsBeforeTax: ").Append(EarningsBeforeTax).Append("\n");
            sb.Append("  EarningsPerBasicShare: ").Append(EarningsPerBasicShare).Append("\n");
            sb.Append("  EarningsPerDilutedShare: ").Append(EarningsPerDilutedShare).Append("\n");
            sb.Append("  EarningsPerBasicShareUSD: ").Append(EarningsPerBasicShareUSD).Append("\n");
            sb.Append("  ShareholdersEquity: ").Append(ShareholdersEquity).Append("\n");
            sb.Append("  AverageEquity: ").Append(AverageEquity).Append("\n");
            sb.Append("  ShareholdersEquityUSD: ").Append(ShareholdersEquityUSD).Append("\n");
            sb.Append("  EnterpriseValue: ").Append(EnterpriseValue).Append("\n");
            sb.Append("  EnterpriseValueOverEBIT: ").Append(EnterpriseValueOverEBIT).Append("\n");
            sb.Append("  EnterpriseValueOverEBITDA: ").Append(EnterpriseValueOverEBITDA).Append("\n");
            sb.Append("  FreeCashFlow: ").Append(FreeCashFlow).Append("\n");
            sb.Append("  FreeCashFlowPerShare: ").Append(FreeCashFlowPerShare).Append("\n");
            sb.Append("  ForeignCurrencyUSDExchangeRate: ").Append(ForeignCurrencyUSDExchangeRate).Append("\n");
            sb.Append("  GrossProfit: ").Append(GrossProfit).Append("\n");
            sb.Append("  GrossMargin: ").Append(GrossMargin).Append("\n");
            sb.Append("  GoodwillAndIntangibleAssets: ").Append(GoodwillAndIntangibleAssets).Append("\n");
            sb.Append("  InterestExpense: ").Append(InterestExpense).Append("\n");
            sb.Append("  InvestedCapital: ").Append(InvestedCapital).Append("\n");
            sb.Append("  InvestedCapitalAverage: ").Append(InvestedCapitalAverage).Append("\n");
            sb.Append("  Inventory: ").Append(Inventory).Append("\n");
            sb.Append("  Investments: ").Append(Investments).Append("\n");
            sb.Append("  InvestmentsCurrent: ").Append(InvestmentsCurrent).Append("\n");
            sb.Append("  InvestmentsNonCurrent: ").Append(InvestmentsNonCurrent).Append("\n");
            sb.Append("  TotalLiabilities: ").Append(TotalLiabilities).Append("\n");
            sb.Append("  CurrentLiabilities: ").Append(CurrentLiabilities).Append("\n");
            sb.Append("  LiabilitiesNonCurrent: ").Append(LiabilitiesNonCurrent).Append("\n");
            sb.Append("  MarketCapitalization: ").Append(MarketCapitalization).Append("\n");
            sb.Append("  NetCashFlow: ").Append(NetCashFlow).Append("\n");
            sb.Append("  NetCashFlowBusinessAcquisitionsDisposals: ").Append(NetCashFlowBusinessAcquisitionsDisposals).Append("\n");
            sb.Append("  IssuanceEquityShares: ").Append(IssuanceEquityShares).Append("\n");
            sb.Append("  IssuanceDebtSecurities: ").Append(IssuanceDebtSecurities).Append("\n");
            sb.Append("  PaymentDividendsOtherCashDistributions: ").Append(PaymentDividendsOtherCashDistributions).Append("\n");
            sb.Append("  NetCashFlowFromFinancing: ").Append(NetCashFlowFromFinancing).Append("\n");
            sb.Append("  NetCashFlowFromInvesting: ").Append(NetCashFlowFromInvesting).Append("\n");
            sb.Append("  NetCashFlowInvestmentAcquisitionsDisposals: ").Append(NetCashFlowInvestmentAcquisitionsDisposals).Append("\n");
            sb.Append("  NetCashFlowFromOperations: ").Append(NetCashFlowFromOperations).Append("\n");
            sb.Append("  EffectOfExchangeRateChangesOnCash: ").Append(EffectOfExchangeRateChangesOnCash).Append("\n");
            sb.Append("  NetIncome: ").Append(NetIncome).Append("\n");
            sb.Append("  NetIncomeCommonStock: ").Append(NetIncomeCommonStock).Append("\n");
            sb.Append("  NetIncomeCommonStockUSD: ").Append(NetIncomeCommonStockUSD).Append("\n");
            sb.Append("  NetLossIncomeFromDiscontinuedOperations: ").Append(NetLossIncomeFromDiscontinuedOperations).Append("\n");
            sb.Append("  NetIncomeToNonControllingInterests: ").Append(NetIncomeToNonControllingInterests).Append("\n");
            sb.Append("  ProfitMargin: ").Append(ProfitMargin).Append("\n");
            sb.Append("  OperatingExpenses: ").Append(OperatingExpenses).Append("\n");
            sb.Append("  OperatingIncome: ").Append(OperatingIncome).Append("\n");
            sb.Append("  TradeAndNonTradePayables: ").Append(TradeAndNonTradePayables).Append("\n");
            sb.Append("  PayoutRatio: ").Append(PayoutRatio).Append("\n");
            sb.Append("  PriceToBookValue: ").Append(PriceToBookValue).Append("\n");
            sb.Append("  PriceEarnings: ").Append(PriceEarnings).Append("\n");
            sb.Append("  PriceToEarningsRatio: ").Append(PriceToEarningsRatio).Append("\n");
            sb.Append("  PropertyPlantEquipmentNet: ").Append(PropertyPlantEquipmentNet).Append("\n");
            sb.Append("  PreferredDividendsIncomeStatementImpact: ").Append(PreferredDividendsIncomeStatementImpact).Append("\n");
            sb.Append("  SharePriceAdjustedClose: ").Append(SharePriceAdjustedClose).Append("\n");
            sb.Append("  PriceSales: ").Append(PriceSales).Append("\n");
            sb.Append("  PriceToSalesRatio: ").Append(PriceToSalesRatio).Append("\n");
            sb.Append("  TradeAndNonTradeReceivables: ").Append(TradeAndNonTradeReceivables).Append("\n");
            sb.Append("  AccumulatedRetainedEarningsDeficit: ").Append(AccumulatedRetainedEarningsDeficit).Append("\n");
            sb.Append("  Revenues: ").Append(Revenues).Append("\n");
            sb.Append("  RevenuesUSD: ").Append(RevenuesUSD).Append("\n");
            sb.Append("  ResearchAndDevelopmentExpense: ").Append(ResearchAndDevelopmentExpense).Append("\n");
            sb.Append("  ReturnOnAverageAssets: ").Append(ReturnOnAverageAssets).Append("\n");
            sb.Append("  ReturnOnAverageEquity: ").Append(ReturnOnAverageEquity).Append("\n");
            sb.Append("  ReturnOnInvestedCapital: ").Append(ReturnOnInvestedCapital).Append("\n");
            sb.Append("  ReturnOnSales: ").Append(ReturnOnSales).Append("\n");
            sb.Append("  ShareBasedCompensation: ").Append(ShareBasedCompensation).Append("\n");
            sb.Append("  SellingGeneralAndAdministrativeExpense: ").Append(SellingGeneralAndAdministrativeExpense).Append("\n");
            sb.Append("  ShareFactor: ").Append(ShareFactor).Append("\n");
            sb.Append("  Shares: ").Append(Shares).Append("\n");
            sb.Append("  WeightedAverageShares: ").Append(WeightedAverageShares).Append("\n");
            sb.Append("  WeightedAverageSharesDiluted: ").Append(WeightedAverageSharesDiluted).Append("\n");
            sb.Append("  SalesPerShare: ").Append(SalesPerShare).Append("\n");
            sb.Append("  TangibleAssetValue: ").Append(TangibleAssetValue).Append("\n");
            sb.Append("  TaxAssets: ").Append(TaxAssets).Append("\n");
            sb.Append("  IncomeTaxExpense: ").Append(IncomeTaxExpense).Append("\n");
            sb.Append("  TaxLiabilities: ").Append(TaxLiabilities).Append("\n");
            sb.Append("  TangibleAssetsBookValuePerShare: ").Append(TangibleAssetsBookValuePerShare).Append("\n");
            sb.Append("  WorkingCapital: ").Append(WorkingCapital).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2009Results);
        }

        /// <summary>
        /// Returns true if InlineResponse2009Results instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2009Results to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2009Results input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.CalendarDate == input.CalendarDate ||
                    (this.CalendarDate != null &&
                    this.CalendarDate.Equals(input.CalendarDate))
                ) && 
                (
                    this.ReportPeriod == input.ReportPeriod ||
                    (this.ReportPeriod != null &&
                    this.ReportPeriod.Equals(input.ReportPeriod))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.AccumulatedOtherComprehensiveIncome == input.AccumulatedOtherComprehensiveIncome ||
                    (this.AccumulatedOtherComprehensiveIncome != null &&
                    this.AccumulatedOtherComprehensiveIncome.Equals(input.AccumulatedOtherComprehensiveIncome))
                ) && 
                (
                    this.Assets == input.Assets ||
                    (this.Assets != null &&
                    this.Assets.Equals(input.Assets))
                ) && 
                (
                    this.AssetsAverage == input.AssetsAverage ||
                    (this.AssetsAverage != null &&
                    this.AssetsAverage.Equals(input.AssetsAverage))
                ) && 
                (
                    this.AssetsCurrent == input.AssetsCurrent ||
                    (this.AssetsCurrent != null &&
                    this.AssetsCurrent.Equals(input.AssetsCurrent))
                ) && 
                (
                    this.AssetTurnover == input.AssetTurnover ||
                    (this.AssetTurnover != null &&
                    this.AssetTurnover.Equals(input.AssetTurnover))
                ) && 
                (
                    this.AssetsNonCurrent == input.AssetsNonCurrent ||
                    (this.AssetsNonCurrent != null &&
                    this.AssetsNonCurrent.Equals(input.AssetsNonCurrent))
                ) && 
                (
                    this.BookValuePerShare == input.BookValuePerShare ||
                    (this.BookValuePerShare != null &&
                    this.BookValuePerShare.Equals(input.BookValuePerShare))
                ) && 
                (
                    this.CapitalExpenditure == input.CapitalExpenditure ||
                    (this.CapitalExpenditure != null &&
                    this.CapitalExpenditure.Equals(input.CapitalExpenditure))
                ) && 
                (
                    this.CashAndEquivalents == input.CashAndEquivalents ||
                    (this.CashAndEquivalents != null &&
                    this.CashAndEquivalents.Equals(input.CashAndEquivalents))
                ) && 
                (
                    this.CashAndEquivalentsUSD == input.CashAndEquivalentsUSD ||
                    (this.CashAndEquivalentsUSD != null &&
                    this.CashAndEquivalentsUSD.Equals(input.CashAndEquivalentsUSD))
                ) && 
                (
                    this.CostOfRevenue == input.CostOfRevenue ||
                    (this.CostOfRevenue != null &&
                    this.CostOfRevenue.Equals(input.CostOfRevenue))
                ) && 
                (
                    this.ConsolidatedIncome == input.ConsolidatedIncome ||
                    (this.ConsolidatedIncome != null &&
                    this.ConsolidatedIncome.Equals(input.ConsolidatedIncome))
                ) && 
                (
                    this.CurrentRatio == input.CurrentRatio ||
                    (this.CurrentRatio != null &&
                    this.CurrentRatio.Equals(input.CurrentRatio))
                ) && 
                (
                    this.DebtToEquityRatio == input.DebtToEquityRatio ||
                    (this.DebtToEquityRatio != null &&
                    this.DebtToEquityRatio.Equals(input.DebtToEquityRatio))
                ) && 
                (
                    this.Debt == input.Debt ||
                    (this.Debt != null &&
                    this.Debt.Equals(input.Debt))
                ) && 
                (
                    this.DebtCurrent == input.DebtCurrent ||
                    (this.DebtCurrent != null &&
                    this.DebtCurrent.Equals(input.DebtCurrent))
                ) && 
                (
                    this.DebtNonCurrent == input.DebtNonCurrent ||
                    (this.DebtNonCurrent != null &&
                    this.DebtNonCurrent.Equals(input.DebtNonCurrent))
                ) && 
                (
                    this.DebtUSD == input.DebtUSD ||
                    (this.DebtUSD != null &&
                    this.DebtUSD.Equals(input.DebtUSD))
                ) && 
                (
                    this.DeferredRevenue == input.DeferredRevenue ||
                    (this.DeferredRevenue != null &&
                    this.DeferredRevenue.Equals(input.DeferredRevenue))
                ) && 
                (
                    this.DepreciationAmortizationAndAccretion == input.DepreciationAmortizationAndAccretion ||
                    (this.DepreciationAmortizationAndAccretion != null &&
                    this.DepreciationAmortizationAndAccretion.Equals(input.DepreciationAmortizationAndAccretion))
                ) && 
                (
                    this.Deposits == input.Deposits ||
                    (this.Deposits != null &&
                    this.Deposits.Equals(input.Deposits))
                ) && 
                (
                    this.DividendYield == input.DividendYield ||
                    (this.DividendYield != null &&
                    this.DividendYield.Equals(input.DividendYield))
                ) && 
                (
                    this.DividendsPerBasicCommonShare == input.DividendsPerBasicCommonShare ||
                    (this.DividendsPerBasicCommonShare != null &&
                    this.DividendsPerBasicCommonShare.Equals(input.DividendsPerBasicCommonShare))
                ) && 
                (
                    this.EarningBeforeInterestTaxes == input.EarningBeforeInterestTaxes ||
                    (this.EarningBeforeInterestTaxes != null &&
                    this.EarningBeforeInterestTaxes.Equals(input.EarningBeforeInterestTaxes))
                ) && 
                (
                    this.EarningsBeforeInterestTaxesDepreciationAmortization == input.EarningsBeforeInterestTaxesDepreciationAmortization ||
                    (this.EarningsBeforeInterestTaxesDepreciationAmortization != null &&
                    this.EarningsBeforeInterestTaxesDepreciationAmortization.Equals(input.EarningsBeforeInterestTaxesDepreciationAmortization))
                ) && 
                (
                    this.EBITDAMargin == input.EBITDAMargin ||
                    (this.EBITDAMargin != null &&
                    this.EBITDAMargin.Equals(input.EBITDAMargin))
                ) && 
                (
                    this.EarningsBeforeInterestTaxesDepreciationAmortizationUSD == input.EarningsBeforeInterestTaxesDepreciationAmortizationUSD ||
                    (this.EarningsBeforeInterestTaxesDepreciationAmortizationUSD != null &&
                    this.EarningsBeforeInterestTaxesDepreciationAmortizationUSD.Equals(input.EarningsBeforeInterestTaxesDepreciationAmortizationUSD))
                ) && 
                (
                    this.EarningBeforeInterestTaxesUSD == input.EarningBeforeInterestTaxesUSD ||
                    (this.EarningBeforeInterestTaxesUSD != null &&
                    this.EarningBeforeInterestTaxesUSD.Equals(input.EarningBeforeInterestTaxesUSD))
                ) && 
                (
                    this.EarningsBeforeTax == input.EarningsBeforeTax ||
                    (this.EarningsBeforeTax != null &&
                    this.EarningsBeforeTax.Equals(input.EarningsBeforeTax))
                ) && 
                (
                    this.EarningsPerBasicShare == input.EarningsPerBasicShare ||
                    (this.EarningsPerBasicShare != null &&
                    this.EarningsPerBasicShare.Equals(input.EarningsPerBasicShare))
                ) && 
                (
                    this.EarningsPerDilutedShare == input.EarningsPerDilutedShare ||
                    (this.EarningsPerDilutedShare != null &&
                    this.EarningsPerDilutedShare.Equals(input.EarningsPerDilutedShare))
                ) && 
                (
                    this.EarningsPerBasicShareUSD == input.EarningsPerBasicShareUSD ||
                    (this.EarningsPerBasicShareUSD != null &&
                    this.EarningsPerBasicShareUSD.Equals(input.EarningsPerBasicShareUSD))
                ) && 
                (
                    this.ShareholdersEquity == input.ShareholdersEquity ||
                    (this.ShareholdersEquity != null &&
                    this.ShareholdersEquity.Equals(input.ShareholdersEquity))
                ) && 
                (
                    this.AverageEquity == input.AverageEquity ||
                    (this.AverageEquity != null &&
                    this.AverageEquity.Equals(input.AverageEquity))
                ) && 
                (
                    this.ShareholdersEquityUSD == input.ShareholdersEquityUSD ||
                    (this.ShareholdersEquityUSD != null &&
                    this.ShareholdersEquityUSD.Equals(input.ShareholdersEquityUSD))
                ) && 
                (
                    this.EnterpriseValue == input.EnterpriseValue ||
                    (this.EnterpriseValue != null &&
                    this.EnterpriseValue.Equals(input.EnterpriseValue))
                ) && 
                (
                    this.EnterpriseValueOverEBIT == input.EnterpriseValueOverEBIT ||
                    (this.EnterpriseValueOverEBIT != null &&
                    this.EnterpriseValueOverEBIT.Equals(input.EnterpriseValueOverEBIT))
                ) && 
                (
                    this.EnterpriseValueOverEBITDA == input.EnterpriseValueOverEBITDA ||
                    (this.EnterpriseValueOverEBITDA != null &&
                    this.EnterpriseValueOverEBITDA.Equals(input.EnterpriseValueOverEBITDA))
                ) && 
                (
                    this.FreeCashFlow == input.FreeCashFlow ||
                    (this.FreeCashFlow != null &&
                    this.FreeCashFlow.Equals(input.FreeCashFlow))
                ) && 
                (
                    this.FreeCashFlowPerShare == input.FreeCashFlowPerShare ||
                    (this.FreeCashFlowPerShare != null &&
                    this.FreeCashFlowPerShare.Equals(input.FreeCashFlowPerShare))
                ) && 
                (
                    this.ForeignCurrencyUSDExchangeRate == input.ForeignCurrencyUSDExchangeRate ||
                    (this.ForeignCurrencyUSDExchangeRate != null &&
                    this.ForeignCurrencyUSDExchangeRate.Equals(input.ForeignCurrencyUSDExchangeRate))
                ) && 
                (
                    this.GrossProfit == input.GrossProfit ||
                    (this.GrossProfit != null &&
                    this.GrossProfit.Equals(input.GrossProfit))
                ) && 
                (
                    this.GrossMargin == input.GrossMargin ||
                    (this.GrossMargin != null &&
                    this.GrossMargin.Equals(input.GrossMargin))
                ) && 
                (
                    this.GoodwillAndIntangibleAssets == input.GoodwillAndIntangibleAssets ||
                    (this.GoodwillAndIntangibleAssets != null &&
                    this.GoodwillAndIntangibleAssets.Equals(input.GoodwillAndIntangibleAssets))
                ) && 
                (
                    this.InterestExpense == input.InterestExpense ||
                    (this.InterestExpense != null &&
                    this.InterestExpense.Equals(input.InterestExpense))
                ) && 
                (
                    this.InvestedCapital == input.InvestedCapital ||
                    (this.InvestedCapital != null &&
                    this.InvestedCapital.Equals(input.InvestedCapital))
                ) && 
                (
                    this.InvestedCapitalAverage == input.InvestedCapitalAverage ||
                    (this.InvestedCapitalAverage != null &&
                    this.InvestedCapitalAverage.Equals(input.InvestedCapitalAverage))
                ) && 
                (
                    this.Inventory == input.Inventory ||
                    (this.Inventory != null &&
                    this.Inventory.Equals(input.Inventory))
                ) && 
                (
                    this.Investments == input.Investments ||
                    (this.Investments != null &&
                    this.Investments.Equals(input.Investments))
                ) && 
                (
                    this.InvestmentsCurrent == input.InvestmentsCurrent ||
                    (this.InvestmentsCurrent != null &&
                    this.InvestmentsCurrent.Equals(input.InvestmentsCurrent))
                ) && 
                (
                    this.InvestmentsNonCurrent == input.InvestmentsNonCurrent ||
                    (this.InvestmentsNonCurrent != null &&
                    this.InvestmentsNonCurrent.Equals(input.InvestmentsNonCurrent))
                ) && 
                (
                    this.TotalLiabilities == input.TotalLiabilities ||
                    (this.TotalLiabilities != null &&
                    this.TotalLiabilities.Equals(input.TotalLiabilities))
                ) && 
                (
                    this.CurrentLiabilities == input.CurrentLiabilities ||
                    (this.CurrentLiabilities != null &&
                    this.CurrentLiabilities.Equals(input.CurrentLiabilities))
                ) && 
                (
                    this.LiabilitiesNonCurrent == input.LiabilitiesNonCurrent ||
                    (this.LiabilitiesNonCurrent != null &&
                    this.LiabilitiesNonCurrent.Equals(input.LiabilitiesNonCurrent))
                ) && 
                (
                    this.MarketCapitalization == input.MarketCapitalization ||
                    (this.MarketCapitalization != null &&
                    this.MarketCapitalization.Equals(input.MarketCapitalization))
                ) && 
                (
                    this.NetCashFlow == input.NetCashFlow ||
                    (this.NetCashFlow != null &&
                    this.NetCashFlow.Equals(input.NetCashFlow))
                ) && 
                (
                    this.NetCashFlowBusinessAcquisitionsDisposals == input.NetCashFlowBusinessAcquisitionsDisposals ||
                    (this.NetCashFlowBusinessAcquisitionsDisposals != null &&
                    this.NetCashFlowBusinessAcquisitionsDisposals.Equals(input.NetCashFlowBusinessAcquisitionsDisposals))
                ) && 
                (
                    this.IssuanceEquityShares == input.IssuanceEquityShares ||
                    (this.IssuanceEquityShares != null &&
                    this.IssuanceEquityShares.Equals(input.IssuanceEquityShares))
                ) && 
                (
                    this.IssuanceDebtSecurities == input.IssuanceDebtSecurities ||
                    (this.IssuanceDebtSecurities != null &&
                    this.IssuanceDebtSecurities.Equals(input.IssuanceDebtSecurities))
                ) && 
                (
                    this.PaymentDividendsOtherCashDistributions == input.PaymentDividendsOtherCashDistributions ||
                    (this.PaymentDividendsOtherCashDistributions != null &&
                    this.PaymentDividendsOtherCashDistributions.Equals(input.PaymentDividendsOtherCashDistributions))
                ) && 
                (
                    this.NetCashFlowFromFinancing == input.NetCashFlowFromFinancing ||
                    (this.NetCashFlowFromFinancing != null &&
                    this.NetCashFlowFromFinancing.Equals(input.NetCashFlowFromFinancing))
                ) && 
                (
                    this.NetCashFlowFromInvesting == input.NetCashFlowFromInvesting ||
                    (this.NetCashFlowFromInvesting != null &&
                    this.NetCashFlowFromInvesting.Equals(input.NetCashFlowFromInvesting))
                ) && 
                (
                    this.NetCashFlowInvestmentAcquisitionsDisposals == input.NetCashFlowInvestmentAcquisitionsDisposals ||
                    (this.NetCashFlowInvestmentAcquisitionsDisposals != null &&
                    this.NetCashFlowInvestmentAcquisitionsDisposals.Equals(input.NetCashFlowInvestmentAcquisitionsDisposals))
                ) && 
                (
                    this.NetCashFlowFromOperations == input.NetCashFlowFromOperations ||
                    (this.NetCashFlowFromOperations != null &&
                    this.NetCashFlowFromOperations.Equals(input.NetCashFlowFromOperations))
                ) && 
                (
                    this.EffectOfExchangeRateChangesOnCash == input.EffectOfExchangeRateChangesOnCash ||
                    (this.EffectOfExchangeRateChangesOnCash != null &&
                    this.EffectOfExchangeRateChangesOnCash.Equals(input.EffectOfExchangeRateChangesOnCash))
                ) && 
                (
                    this.NetIncome == input.NetIncome ||
                    (this.NetIncome != null &&
                    this.NetIncome.Equals(input.NetIncome))
                ) && 
                (
                    this.NetIncomeCommonStock == input.NetIncomeCommonStock ||
                    (this.NetIncomeCommonStock != null &&
                    this.NetIncomeCommonStock.Equals(input.NetIncomeCommonStock))
                ) && 
                (
                    this.NetIncomeCommonStockUSD == input.NetIncomeCommonStockUSD ||
                    (this.NetIncomeCommonStockUSD != null &&
                    this.NetIncomeCommonStockUSD.Equals(input.NetIncomeCommonStockUSD))
                ) && 
                (
                    this.NetLossIncomeFromDiscontinuedOperations == input.NetLossIncomeFromDiscontinuedOperations ||
                    (this.NetLossIncomeFromDiscontinuedOperations != null &&
                    this.NetLossIncomeFromDiscontinuedOperations.Equals(input.NetLossIncomeFromDiscontinuedOperations))
                ) && 
                (
                    this.NetIncomeToNonControllingInterests == input.NetIncomeToNonControllingInterests ||
                    (this.NetIncomeToNonControllingInterests != null &&
                    this.NetIncomeToNonControllingInterests.Equals(input.NetIncomeToNonControllingInterests))
                ) && 
                (
                    this.ProfitMargin == input.ProfitMargin ||
                    (this.ProfitMargin != null &&
                    this.ProfitMargin.Equals(input.ProfitMargin))
                ) && 
                (
                    this.OperatingExpenses == input.OperatingExpenses ||
                    (this.OperatingExpenses != null &&
                    this.OperatingExpenses.Equals(input.OperatingExpenses))
                ) && 
                (
                    this.OperatingIncome == input.OperatingIncome ||
                    (this.OperatingIncome != null &&
                    this.OperatingIncome.Equals(input.OperatingIncome))
                ) && 
                (
                    this.TradeAndNonTradePayables == input.TradeAndNonTradePayables ||
                    (this.TradeAndNonTradePayables != null &&
                    this.TradeAndNonTradePayables.Equals(input.TradeAndNonTradePayables))
                ) && 
                (
                    this.PayoutRatio == input.PayoutRatio ||
                    (this.PayoutRatio != null &&
                    this.PayoutRatio.Equals(input.PayoutRatio))
                ) && 
                (
                    this.PriceToBookValue == input.PriceToBookValue ||
                    (this.PriceToBookValue != null &&
                    this.PriceToBookValue.Equals(input.PriceToBookValue))
                ) && 
                (
                    this.PriceEarnings == input.PriceEarnings ||
                    (this.PriceEarnings != null &&
                    this.PriceEarnings.Equals(input.PriceEarnings))
                ) && 
                (
                    this.PriceToEarningsRatio == input.PriceToEarningsRatio ||
                    (this.PriceToEarningsRatio != null &&
                    this.PriceToEarningsRatio.Equals(input.PriceToEarningsRatio))
                ) && 
                (
                    this.PropertyPlantEquipmentNet == input.PropertyPlantEquipmentNet ||
                    (this.PropertyPlantEquipmentNet != null &&
                    this.PropertyPlantEquipmentNet.Equals(input.PropertyPlantEquipmentNet))
                ) && 
                (
                    this.PreferredDividendsIncomeStatementImpact == input.PreferredDividendsIncomeStatementImpact ||
                    (this.PreferredDividendsIncomeStatementImpact != null &&
                    this.PreferredDividendsIncomeStatementImpact.Equals(input.PreferredDividendsIncomeStatementImpact))
                ) && 
                (
                    this.SharePriceAdjustedClose == input.SharePriceAdjustedClose ||
                    (this.SharePriceAdjustedClose != null &&
                    this.SharePriceAdjustedClose.Equals(input.SharePriceAdjustedClose))
                ) && 
                (
                    this.PriceSales == input.PriceSales ||
                    (this.PriceSales != null &&
                    this.PriceSales.Equals(input.PriceSales))
                ) && 
                (
                    this.PriceToSalesRatio == input.PriceToSalesRatio ||
                    (this.PriceToSalesRatio != null &&
                    this.PriceToSalesRatio.Equals(input.PriceToSalesRatio))
                ) && 
                (
                    this.TradeAndNonTradeReceivables == input.TradeAndNonTradeReceivables ||
                    (this.TradeAndNonTradeReceivables != null &&
                    this.TradeAndNonTradeReceivables.Equals(input.TradeAndNonTradeReceivables))
                ) && 
                (
                    this.AccumulatedRetainedEarningsDeficit == input.AccumulatedRetainedEarningsDeficit ||
                    (this.AccumulatedRetainedEarningsDeficit != null &&
                    this.AccumulatedRetainedEarningsDeficit.Equals(input.AccumulatedRetainedEarningsDeficit))
                ) && 
                (
                    this.Revenues == input.Revenues ||
                    (this.Revenues != null &&
                    this.Revenues.Equals(input.Revenues))
                ) && 
                (
                    this.RevenuesUSD == input.RevenuesUSD ||
                    (this.RevenuesUSD != null &&
                    this.RevenuesUSD.Equals(input.RevenuesUSD))
                ) && 
                (
                    this.ResearchAndDevelopmentExpense == input.ResearchAndDevelopmentExpense ||
                    (this.ResearchAndDevelopmentExpense != null &&
                    this.ResearchAndDevelopmentExpense.Equals(input.ResearchAndDevelopmentExpense))
                ) && 
                (
                    this.ReturnOnAverageAssets == input.ReturnOnAverageAssets ||
                    (this.ReturnOnAverageAssets != null &&
                    this.ReturnOnAverageAssets.Equals(input.ReturnOnAverageAssets))
                ) && 
                (
                    this.ReturnOnAverageEquity == input.ReturnOnAverageEquity ||
                    (this.ReturnOnAverageEquity != null &&
                    this.ReturnOnAverageEquity.Equals(input.ReturnOnAverageEquity))
                ) && 
                (
                    this.ReturnOnInvestedCapital == input.ReturnOnInvestedCapital ||
                    (this.ReturnOnInvestedCapital != null &&
                    this.ReturnOnInvestedCapital.Equals(input.ReturnOnInvestedCapital))
                ) && 
                (
                    this.ReturnOnSales == input.ReturnOnSales ||
                    (this.ReturnOnSales != null &&
                    this.ReturnOnSales.Equals(input.ReturnOnSales))
                ) && 
                (
                    this.ShareBasedCompensation == input.ShareBasedCompensation ||
                    (this.ShareBasedCompensation != null &&
                    this.ShareBasedCompensation.Equals(input.ShareBasedCompensation))
                ) && 
                (
                    this.SellingGeneralAndAdministrativeExpense == input.SellingGeneralAndAdministrativeExpense ||
                    (this.SellingGeneralAndAdministrativeExpense != null &&
                    this.SellingGeneralAndAdministrativeExpense.Equals(input.SellingGeneralAndAdministrativeExpense))
                ) && 
                (
                    this.ShareFactor == input.ShareFactor ||
                    (this.ShareFactor != null &&
                    this.ShareFactor.Equals(input.ShareFactor))
                ) && 
                (
                    this.Shares == input.Shares ||
                    (this.Shares != null &&
                    this.Shares.Equals(input.Shares))
                ) && 
                (
                    this.WeightedAverageShares == input.WeightedAverageShares ||
                    (this.WeightedAverageShares != null &&
                    this.WeightedAverageShares.Equals(input.WeightedAverageShares))
                ) && 
                (
                    this.WeightedAverageSharesDiluted == input.WeightedAverageSharesDiluted ||
                    (this.WeightedAverageSharesDiluted != null &&
                    this.WeightedAverageSharesDiluted.Equals(input.WeightedAverageSharesDiluted))
                ) && 
                (
                    this.SalesPerShare == input.SalesPerShare ||
                    (this.SalesPerShare != null &&
                    this.SalesPerShare.Equals(input.SalesPerShare))
                ) && 
                (
                    this.TangibleAssetValue == input.TangibleAssetValue ||
                    (this.TangibleAssetValue != null &&
                    this.TangibleAssetValue.Equals(input.TangibleAssetValue))
                ) && 
                (
                    this.TaxAssets == input.TaxAssets ||
                    (this.TaxAssets != null &&
                    this.TaxAssets.Equals(input.TaxAssets))
                ) && 
                (
                    this.IncomeTaxExpense == input.IncomeTaxExpense ||
                    (this.IncomeTaxExpense != null &&
                    this.IncomeTaxExpense.Equals(input.IncomeTaxExpense))
                ) && 
                (
                    this.TaxLiabilities == input.TaxLiabilities ||
                    (this.TaxLiabilities != null &&
                    this.TaxLiabilities.Equals(input.TaxLiabilities))
                ) && 
                (
                    this.TangibleAssetsBookValuePerShare == input.TangibleAssetsBookValuePerShare ||
                    (this.TangibleAssetsBookValuePerShare != null &&
                    this.TangibleAssetsBookValuePerShare.Equals(input.TangibleAssetsBookValuePerShare))
                ) && 
                (
                    this.WorkingCapital == input.WorkingCapital ||
                    (this.WorkingCapital != null &&
                    this.WorkingCapital.Equals(input.WorkingCapital))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                Int64 hashCode = 41;
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.CalendarDate != null)
                    hashCode = hashCode * 59 + this.CalendarDate.GetHashCode();
                if (this.ReportPeriod != null)
                    hashCode = hashCode * 59 + this.ReportPeriod.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.AccumulatedOtherComprehensiveIncome != null)
                    hashCode = hashCode * 59 + this.AccumulatedOtherComprehensiveIncome.GetHashCode();
                if (this.Assets != null)
                    hashCode = hashCode * 59 + this.Assets.GetHashCode();
                if (this.AssetsAverage != null)
                    hashCode = hashCode * 59 + this.AssetsAverage.GetHashCode();
                if (this.AssetsCurrent != null)
                    hashCode = hashCode * 59 + this.AssetsCurrent.GetHashCode();
                if (this.AssetTurnover != null)
                    hashCode = hashCode * 59 + this.AssetTurnover.GetHashCode();
                if (this.AssetsNonCurrent != null)
                    hashCode = hashCode * 59 + this.AssetsNonCurrent.GetHashCode();
                if (this.BookValuePerShare != null)
                    hashCode = hashCode * 59 + this.BookValuePerShare.GetHashCode();
                if (this.CapitalExpenditure != null)
                    hashCode = hashCode * 59 + this.CapitalExpenditure.GetHashCode();
                if (this.CashAndEquivalents != null)
                    hashCode = hashCode * 59 + this.CashAndEquivalents.GetHashCode();
                if (this.CashAndEquivalentsUSD != null)
                    hashCode = hashCode * 59 + this.CashAndEquivalentsUSD.GetHashCode();
                if (this.CostOfRevenue != null)
                    hashCode = hashCode * 59 + this.CostOfRevenue.GetHashCode();
                if (this.ConsolidatedIncome != null)
                    hashCode = hashCode * 59 + this.ConsolidatedIncome.GetHashCode();
                if (this.CurrentRatio != null)
                    hashCode = hashCode * 59 + this.CurrentRatio.GetHashCode();
                if (this.DebtToEquityRatio != null)
                    hashCode = hashCode * 59 + this.DebtToEquityRatio.GetHashCode();
                if (this.Debt != null)
                    hashCode = hashCode * 59 + this.Debt.GetHashCode();
                if (this.DebtCurrent != null)
                    hashCode = hashCode * 59 + this.DebtCurrent.GetHashCode();
                if (this.DebtNonCurrent != null)
                    hashCode = hashCode * 59 + this.DebtNonCurrent.GetHashCode();
                if (this.DebtUSD != null)
                    hashCode = hashCode * 59 + this.DebtUSD.GetHashCode();
                if (this.DeferredRevenue != null)
                    hashCode = hashCode * 59 + this.DeferredRevenue.GetHashCode();
                if (this.DepreciationAmortizationAndAccretion != null)
                    hashCode = hashCode * 59 + this.DepreciationAmortizationAndAccretion.GetHashCode();
                if (this.Deposits != null)
                    hashCode = hashCode * 59 + this.Deposits.GetHashCode();
                if (this.DividendYield != null)
                    hashCode = hashCode * 59 + this.DividendYield.GetHashCode();
                if (this.DividendsPerBasicCommonShare != null)
                    hashCode = hashCode * 59 + this.DividendsPerBasicCommonShare.GetHashCode();
                if (this.EarningBeforeInterestTaxes != null)
                    hashCode = hashCode * 59 + this.EarningBeforeInterestTaxes.GetHashCode();
                if (this.EarningsBeforeInterestTaxesDepreciationAmortization != null)
                    hashCode = hashCode * 59 + this.EarningsBeforeInterestTaxesDepreciationAmortization.GetHashCode();
                if (this.EBITDAMargin != null)
                    hashCode = hashCode * 59 + this.EBITDAMargin.GetHashCode();
                if (this.EarningsBeforeInterestTaxesDepreciationAmortizationUSD != null)
                    hashCode = hashCode * 59 + this.EarningsBeforeInterestTaxesDepreciationAmortizationUSD.GetHashCode();
                if (this.EarningBeforeInterestTaxesUSD != null)
                    hashCode = hashCode * 59 + this.EarningBeforeInterestTaxesUSD.GetHashCode();
                if (this.EarningsBeforeTax != null)
                    hashCode = hashCode * 59 + this.EarningsBeforeTax.GetHashCode();
                if (this.EarningsPerBasicShare != null)
                    hashCode = hashCode * 59 + this.EarningsPerBasicShare.GetHashCode();
                if (this.EarningsPerDilutedShare != null)
                    hashCode = hashCode * 59 + this.EarningsPerDilutedShare.GetHashCode();
                if (this.EarningsPerBasicShareUSD != null)
                    hashCode = hashCode * 59 + this.EarningsPerBasicShareUSD.GetHashCode();
                if (this.ShareholdersEquity != null)
                    hashCode = hashCode * 59 + this.ShareholdersEquity.GetHashCode();
                if (this.AverageEquity != null)
                    hashCode = hashCode * 59 + this.AverageEquity.GetHashCode();
                if (this.ShareholdersEquityUSD != null)
                    hashCode = hashCode * 59 + this.ShareholdersEquityUSD.GetHashCode();
                if (this.EnterpriseValue != null)
                    hashCode = hashCode * 59 + this.EnterpriseValue.GetHashCode();
                if (this.EnterpriseValueOverEBIT != null)
                    hashCode = hashCode * 59 + this.EnterpriseValueOverEBIT.GetHashCode();
                if (this.EnterpriseValueOverEBITDA != null)
                    hashCode = hashCode * 59 + this.EnterpriseValueOverEBITDA.GetHashCode();
                if (this.FreeCashFlow != null)
                    hashCode = hashCode * 59 + this.FreeCashFlow.GetHashCode();
                if (this.FreeCashFlowPerShare != null)
                    hashCode = hashCode * 59 + this.FreeCashFlowPerShare.GetHashCode();
                if (this.ForeignCurrencyUSDExchangeRate != null)
                    hashCode = hashCode * 59 + this.ForeignCurrencyUSDExchangeRate.GetHashCode();
                if (this.GrossProfit != null)
                    hashCode = hashCode * 59 + this.GrossProfit.GetHashCode();
                if (this.GrossMargin != null)
                    hashCode = hashCode * 59 + this.GrossMargin.GetHashCode();
                if (this.GoodwillAndIntangibleAssets != null)
                    hashCode = hashCode * 59 + this.GoodwillAndIntangibleAssets.GetHashCode();
                if (this.InterestExpense != null)
                    hashCode = hashCode * 59 + this.InterestExpense.GetHashCode();
                if (this.InvestedCapital != null)
                    hashCode = hashCode * 59 + this.InvestedCapital.GetHashCode();
                if (this.InvestedCapitalAverage != null)
                    hashCode = hashCode * 59 + this.InvestedCapitalAverage.GetHashCode();
                if (this.Inventory != null)
                    hashCode = hashCode * 59 + this.Inventory.GetHashCode();
                if (this.Investments != null)
                    hashCode = hashCode * 59 + this.Investments.GetHashCode();
                if (this.InvestmentsCurrent != null)
                    hashCode = hashCode * 59 + this.InvestmentsCurrent.GetHashCode();
                if (this.InvestmentsNonCurrent != null)
                    hashCode = hashCode * 59 + this.InvestmentsNonCurrent.GetHashCode();
                if (this.TotalLiabilities != null)
                    hashCode = hashCode * 59 + this.TotalLiabilities.GetHashCode();
                if (this.CurrentLiabilities != null)
                    hashCode = hashCode * 59 + this.CurrentLiabilities.GetHashCode();
                if (this.LiabilitiesNonCurrent != null)
                    hashCode = hashCode * 59 + this.LiabilitiesNonCurrent.GetHashCode();
                if (this.MarketCapitalization != null)
                    hashCode = hashCode * 59 + this.MarketCapitalization.GetHashCode();
                if (this.NetCashFlow != null)
                    hashCode = hashCode * 59 + this.NetCashFlow.GetHashCode();
                if (this.NetCashFlowBusinessAcquisitionsDisposals != null)
                    hashCode = hashCode * 59 + this.NetCashFlowBusinessAcquisitionsDisposals.GetHashCode();
                if (this.IssuanceEquityShares != null)
                    hashCode = hashCode * 59 + this.IssuanceEquityShares.GetHashCode();
                if (this.IssuanceDebtSecurities != null)
                    hashCode = hashCode * 59 + this.IssuanceDebtSecurities.GetHashCode();
                if (this.PaymentDividendsOtherCashDistributions != null)
                    hashCode = hashCode * 59 + this.PaymentDividendsOtherCashDistributions.GetHashCode();
                if (this.NetCashFlowFromFinancing != null)
                    hashCode = hashCode * 59 + this.NetCashFlowFromFinancing.GetHashCode();
                if (this.NetCashFlowFromInvesting != null)
                    hashCode = hashCode * 59 + this.NetCashFlowFromInvesting.GetHashCode();
                if (this.NetCashFlowInvestmentAcquisitionsDisposals != null)
                    hashCode = hashCode * 59 + this.NetCashFlowInvestmentAcquisitionsDisposals.GetHashCode();
                if (this.NetCashFlowFromOperations != null)
                    hashCode = hashCode * 59 + this.NetCashFlowFromOperations.GetHashCode();
                if (this.EffectOfExchangeRateChangesOnCash != null)
                    hashCode = hashCode * 59 + this.EffectOfExchangeRateChangesOnCash.GetHashCode();
                if (this.NetIncome != null)
                    hashCode = hashCode * 59 + this.NetIncome.GetHashCode();
                if (this.NetIncomeCommonStock != null)
                    hashCode = hashCode * 59 + this.NetIncomeCommonStock.GetHashCode();
                if (this.NetIncomeCommonStockUSD != null)
                    hashCode = hashCode * 59 + this.NetIncomeCommonStockUSD.GetHashCode();
                if (this.NetLossIncomeFromDiscontinuedOperations != null)
                    hashCode = hashCode * 59 + this.NetLossIncomeFromDiscontinuedOperations.GetHashCode();
                if (this.NetIncomeToNonControllingInterests != null)
                    hashCode = hashCode * 59 + this.NetIncomeToNonControllingInterests.GetHashCode();
                if (this.ProfitMargin != null)
                    hashCode = hashCode * 59 + this.ProfitMargin.GetHashCode();
                if (this.OperatingExpenses != null)
                    hashCode = hashCode * 59 + this.OperatingExpenses.GetHashCode();
                if (this.OperatingIncome != null)
                    hashCode = hashCode * 59 + this.OperatingIncome.GetHashCode();
                if (this.TradeAndNonTradePayables != null)
                    hashCode = hashCode * 59 + this.TradeAndNonTradePayables.GetHashCode();
                if (this.PayoutRatio != null)
                    hashCode = hashCode * 59 + this.PayoutRatio.GetHashCode();
                if (this.PriceToBookValue != null)
                    hashCode = hashCode * 59 + this.PriceToBookValue.GetHashCode();
                if (this.PriceEarnings != null)
                    hashCode = hashCode * 59 + this.PriceEarnings.GetHashCode();
                if (this.PriceToEarningsRatio != null)
                    hashCode = hashCode * 59 + this.PriceToEarningsRatio.GetHashCode();
                if (this.PropertyPlantEquipmentNet != null)
                    hashCode = hashCode * 59 + this.PropertyPlantEquipmentNet.GetHashCode();
                if (this.PreferredDividendsIncomeStatementImpact != null)
                    hashCode = hashCode * 59 + this.PreferredDividendsIncomeStatementImpact.GetHashCode();
                if (this.SharePriceAdjustedClose != null)
                    hashCode = hashCode * 59 + this.SharePriceAdjustedClose.GetHashCode();
                if (this.PriceSales != null)
                    hashCode = hashCode * 59 + this.PriceSales.GetHashCode();
                if (this.PriceToSalesRatio != null)
                    hashCode = hashCode * 59 + this.PriceToSalesRatio.GetHashCode();
                if (this.TradeAndNonTradeReceivables != null)
                    hashCode = hashCode * 59 + this.TradeAndNonTradeReceivables.GetHashCode();
                if (this.AccumulatedRetainedEarningsDeficit != null)
                    hashCode = hashCode * 59 + this.AccumulatedRetainedEarningsDeficit.GetHashCode();
                if (this.Revenues != null)
                    hashCode = hashCode * 59 + this.Revenues.GetHashCode();
                if (this.RevenuesUSD != null)
                    hashCode = hashCode * 59 + this.RevenuesUSD.GetHashCode();
                if (this.ResearchAndDevelopmentExpense != null)
                    hashCode = hashCode * 59 + this.ResearchAndDevelopmentExpense.GetHashCode();
                if (this.ReturnOnAverageAssets != null)
                    hashCode = hashCode * 59 + this.ReturnOnAverageAssets.GetHashCode();
                if (this.ReturnOnAverageEquity != null)
                    hashCode = hashCode * 59 + this.ReturnOnAverageEquity.GetHashCode();
                if (this.ReturnOnInvestedCapital != null)
                    hashCode = hashCode * 59 + this.ReturnOnInvestedCapital.GetHashCode();
                if (this.ReturnOnSales != null)
                    hashCode = hashCode * 59 + this.ReturnOnSales.GetHashCode();
                if (this.ShareBasedCompensation != null)
                    hashCode = hashCode * 59 + this.ShareBasedCompensation.GetHashCode();
                if (this.SellingGeneralAndAdministrativeExpense != null)
                    hashCode = hashCode * 59 + this.SellingGeneralAndAdministrativeExpense.GetHashCode();
                if (this.ShareFactor != null)
                    hashCode = hashCode * 59 + this.ShareFactor.GetHashCode();
                if (this.Shares != null)
                    hashCode = hashCode * 59 + this.Shares.GetHashCode();
                if (this.WeightedAverageShares != null)
                    hashCode = hashCode * 59 + this.WeightedAverageShares.GetHashCode();
                if (this.WeightedAverageSharesDiluted != null)
                    hashCode = hashCode * 59 + this.WeightedAverageSharesDiluted.GetHashCode();
                if (this.SalesPerShare != null)
                    hashCode = hashCode * 59 + this.SalesPerShare.GetHashCode();
                if (this.TangibleAssetValue != null)
                    hashCode = hashCode * 59 + this.TangibleAssetValue.GetHashCode();
                if (this.TaxAssets != null)
                    hashCode = hashCode * 59 + this.TaxAssets.GetHashCode();
                if (this.IncomeTaxExpense != null)
                    hashCode = hashCode * 59 + this.IncomeTaxExpense.GetHashCode();
                if (this.TaxLiabilities != null)
                    hashCode = hashCode * 59 + this.TaxLiabilities.GetHashCode();
                if (this.TangibleAssetsBookValuePerShare != null)
                    hashCode = hashCode * 59 + this.TangibleAssetsBookValuePerShare.GetHashCode();
                if (this.WorkingCapital != null)
                    hashCode = hashCode * 59 + this.WorkingCapital.GetHashCode();
                return (int)hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
