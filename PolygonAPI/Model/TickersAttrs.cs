/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// TickersAttrs
    /// </summary>
    [DataContract]
        public partial class TickersAttrs :  IEquatable<TickersAttrs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TickersAttrs" /> class.
        /// </summary>
        /// <param name="currencyName">The name of the variable/quote currency..</param>
        /// <param name="currency">The currency code of the variable/quote currency..</param>
        /// <param name="baseName">The name of the base currency..</param>
        /// <param name="_base">The currency code of the base currency..</param>
        public TickersAttrs(string currencyName = default(string), string currency = default(string), string baseName = default(string), string _base = default(string))
        {
            this.CurrencyName = currencyName;
            this.Currency = currency;
            this.BaseName = baseName;
            this.Base = _base;
        }
        
        /// <summary>
        /// The name of the variable/quote currency.
        /// </summary>
        /// <value>The name of the variable/quote currency.</value>
        [DataMember(Name="currencyName", EmitDefaultValue=false)]
        public string CurrencyName { get; set; }

        /// <summary>
        /// The currency code of the variable/quote currency.
        /// </summary>
        /// <value>The currency code of the variable/quote currency.</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// The name of the base currency.
        /// </summary>
        /// <value>The name of the base currency.</value>
        [DataMember(Name="baseName", EmitDefaultValue=false)]
        public string BaseName { get; set; }

        /// <summary>
        /// The currency code of the base currency.
        /// </summary>
        /// <value>The currency code of the base currency.</value>
        [DataMember(Name="base", EmitDefaultValue=false)]
        public string Base { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TickersAttrs {\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  BaseName: ").Append(BaseName).Append("\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TickersAttrs);
        }

        /// <summary>
        /// Returns true if TickersAttrs instances are equal
        /// </summary>
        /// <param name="input">Instance of TickersAttrs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TickersAttrs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyName == input.CurrencyName ||
                    (this.CurrencyName != null &&
                    this.CurrencyName.Equals(input.CurrencyName))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.BaseName == input.BaseName ||
                    (this.BaseName != null &&
                    this.BaseName.Equals(input.BaseName))
                ) && 
                (
                    this.Base == input.Base ||
                    (this.Base != null &&
                    this.Base.Equals(input.Base))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyName != null)
                    hashCode = hashCode * 59 + this.CurrencyName.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.BaseName != null)
                    hashCode = hashCode * 59 + this.BaseName.GetHashCode();
                if (this.Base != null)
                    hashCode = hashCode * 59 + this.Base.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
