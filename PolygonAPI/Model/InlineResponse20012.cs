/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// InlineResponse20012
    /// </summary>
    [DataContract]
        public partial class InlineResponse20012 :  IEquatable<InlineResponse20012>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20012" /> class.
        /// </summary>
        /// <param name="id">The ID of the exchange..</param>
        /// <param name="type">The type of exchange. - TRF &#x3D; Trade Reporting Facility - exchange &#x3D; Reporting exchange on the tape .</param>
        /// <param name="market">The market data type that this exchange contains..</param>
        /// <param name="mic">The Market Identification Code or MIC as defined in ISO 10383 (&lt;a rel&#x3D;\&quot;nofollow\&quot; target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://en.wikipedia.org/wiki/Market_Identifier_Code\&quot;&gt;https://en.wikipedia.org/wiki/Market_Identifier_Code&lt;/a&gt;)..</param>
        /// <param name="name">The name of the exchange..</param>
        /// <param name="tape">The tape id of the exchange..</param>
        /// <param name="code">A unique identifier for the exchange internal to Polygon.io.  This is not an industry code or ISO standard..</param>
        public InlineResponse20012(decimal? id = default(decimal?), string type = default(string), string market = default(string), string mic = default(string), string name = default(string), string tape = default(string), string code = default(string))
        {
            this.Id = id;
            this.Type = type;
            this.Market = market;
            this.Mic = mic;
            this.Name = name;
            this.Tape = tape;
            this.Code = code;
        }
        
        /// <summary>
        /// The ID of the exchange.
        /// </summary>
        /// <value>The ID of the exchange.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public decimal? Id { get; set; }

        /// <summary>
        /// The type of exchange. - TRF &#x3D; Trade Reporting Facility - exchange &#x3D; Reporting exchange on the tape 
        /// </summary>
        /// <value>The type of exchange. - TRF &#x3D; Trade Reporting Facility - exchange &#x3D; Reporting exchange on the tape </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The market data type that this exchange contains.
        /// </summary>
        /// <value>The market data type that this exchange contains.</value>
        [DataMember(Name="market", EmitDefaultValue=false)]
        public string Market { get; set; }

        /// <summary>
        /// The Market Identification Code or MIC as defined in ISO 10383 (&lt;a rel&#x3D;\&quot;nofollow\&quot; target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://en.wikipedia.org/wiki/Market_Identifier_Code\&quot;&gt;https://en.wikipedia.org/wiki/Market_Identifier_Code&lt;/a&gt;).
        /// </summary>
        /// <value>The Market Identification Code or MIC as defined in ISO 10383 (&lt;a rel&#x3D;\&quot;nofollow\&quot; target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://en.wikipedia.org/wiki/Market_Identifier_Code\&quot;&gt;https://en.wikipedia.org/wiki/Market_Identifier_Code&lt;/a&gt;).</value>
        [DataMember(Name="mic", EmitDefaultValue=false)]
        public string Mic { get; set; }

        /// <summary>
        /// The name of the exchange.
        /// </summary>
        /// <value>The name of the exchange.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The tape id of the exchange.
        /// </summary>
        /// <value>The tape id of the exchange.</value>
        [DataMember(Name="tape", EmitDefaultValue=false)]
        public string Tape { get; set; }

        /// <summary>
        /// A unique identifier for the exchange internal to Polygon.io.  This is not an industry code or ISO standard.
        /// </summary>
        /// <value>A unique identifier for the exchange internal to Polygon.io.  This is not an industry code or ISO standard.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20012 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  Mic: ").Append(Mic).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tape: ").Append(Tape).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20012);
        }

        /// <summary>
        /// Returns true if InlineResponse20012 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20012 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20012 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Market == input.Market ||
                    (this.Market != null &&
                    this.Market.Equals(input.Market))
                ) && 
                (
                    this.Mic == input.Mic ||
                    (this.Mic != null &&
                    this.Mic.Equals(input.Mic))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Tape == input.Tape ||
                    (this.Tape != null &&
                    this.Tape.Equals(input.Tape))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Market != null)
                    hashCode = hashCode * 59 + this.Market.GetHashCode();
                if (this.Mic != null)
                    hashCode = hashCode * 59 + this.Mic.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Tape != null)
                    hashCode = hashCode * 59 + this.Tape.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
