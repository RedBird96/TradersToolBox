/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// CryptoSnapshotTickerFullBook
    /// </summary>
    [DataContract]
        public partial class CryptoSnapshotTickerFullBook :  IEquatable<CryptoSnapshotTickerFullBook>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoSnapshotTickerFullBook" /> class.
        /// </summary>
        /// <param name="ticker">The exchange symbol that this item is traded under..</param>
        /// <param name="bids">bids.</param>
        /// <param name="asks">asks.</param>
        /// <param name="bidCount">The combined total number of bids in the book..</param>
        /// <param name="askCount">The combined total number of asks in the book..</param>
        /// <param name="spread">The difference between the best bid and the best ask price accross exchanges..</param>
        /// <param name="updated">The last updated timestamp..</param>
        public CryptoSnapshotTickerFullBook(string ticker = default, List<CryptoSnapshotTickerFullBookBids> bids = default,
            List<CryptoSnapshotTickerFullBookBids> asks = default, double? bidCount = default, double? askCount = default, double? spread = default, int? updated = default)
        {
            this.Ticker = ticker;
            this.Bids = bids;
            this.Asks = asks;
            this.BidCount = bidCount;
            this.AskCount = askCount;
            this.Spread = spread;
            this.Updated = updated;
        }
        
        /// <summary>
        /// The exchange symbol that this item is traded under.
        /// </summary>
        /// <value>The exchange symbol that this item is traded under.</value>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public string Ticker { get; set; }

        /// <summary>
        /// Gets or Sets Bids
        /// </summary>
        [DataMember(Name="bids", EmitDefaultValue=false)]
        public List<CryptoSnapshotTickerFullBookBids> Bids { get; set; }

        /// <summary>
        /// Gets or Sets Asks
        /// </summary>
        [DataMember(Name="asks", EmitDefaultValue=false)]
        public List<CryptoSnapshotTickerFullBookBids> Asks { get; set; }

        /// <summary>
        /// The combined total number of bids in the book.
        /// </summary>
        /// <value>The combined total number of bids in the book.</value>
        [DataMember(Name="bidCount", EmitDefaultValue=false)]
        public double? BidCount { get; set; }

        /// <summary>
        /// The combined total number of asks in the book.
        /// </summary>
        /// <value>The combined total number of asks in the book.</value>
        [DataMember(Name="askCount", EmitDefaultValue=false)]
        public double? AskCount { get; set; }

        /// <summary>
        /// The difference between the best bid and the best ask price accross exchanges.
        /// </summary>
        /// <value>The difference between the best bid and the best ask price accross exchanges.</value>
        [DataMember(Name="spread", EmitDefaultValue=false)]
        public double? Spread { get; set; }

        /// <summary>
        /// The last updated timestamp.
        /// </summary>
        /// <value>The last updated timestamp.</value>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public int? Updated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CryptoSnapshotTickerFullBook {\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  Bids: ").Append(Bids).Append("\n");
            sb.Append("  Asks: ").Append(Asks).Append("\n");
            sb.Append("  BidCount: ").Append(BidCount).Append("\n");
            sb.Append("  AskCount: ").Append(AskCount).Append("\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CryptoSnapshotTickerFullBook);
        }

        /// <summary>
        /// Returns true if CryptoSnapshotTickerFullBook instances are equal
        /// </summary>
        /// <param name="input">Instance of CryptoSnapshotTickerFullBook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CryptoSnapshotTickerFullBook input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.Bids == input.Bids ||
                    this.Bids != null &&
                    input.Bids != null &&
                    this.Bids.SequenceEqual(input.Bids)
                ) && 
                (
                    this.Asks == input.Asks ||
                    this.Asks != null &&
                    input.Asks != null &&
                    this.Asks.SequenceEqual(input.Asks)
                ) && 
                (
                    this.BidCount == input.BidCount ||
                    (this.BidCount != null &&
                    this.BidCount.Equals(input.BidCount))
                ) && 
                (
                    this.AskCount == input.AskCount ||
                    (this.AskCount != null &&
                    this.AskCount.Equals(input.AskCount))
                ) && 
                (
                    this.Spread == input.Spread ||
                    (this.Spread != null &&
                    this.Spread.Equals(input.Spread))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                if (this.Bids != null)
                    hashCode = hashCode * 59 + this.Bids.GetHashCode();
                if (this.Asks != null)
                    hashCode = hashCode * 59 + this.Asks.GetHashCode();
                if (this.BidCount != null)
                    hashCode = hashCode * 59 + this.BidCount.GetHashCode();
                if (this.AskCount != null)
                    hashCode = hashCode * 59 + this.AskCount.GetHashCode();
                if (this.Spread != null)
                    hashCode = hashCode * 59 + this.Spread.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
