/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// InlineResponse20034
    /// </summary>
    [DataContract]
        public partial class InlineResponse20034 :  IEquatable<InlineResponse20034>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20034" /> class.
        /// </summary>
        /// <param name="symbol">The symbol pair that was evaluated from the request..</param>
        /// <param name="isUTC">Whether or not the timestamps are in UTC timezone..</param>
        /// <param name="day">The date requested..</param>
        /// <param name="open">The open price for the symbol in the given time period..</param>
        /// <param name="close">The close price for the symbol in the given time period..</param>
        /// <param name="openTrades">openTrades.</param>
        /// <param name="closingTrades">closingTrades.</param>
        public InlineResponse20034(string symbol = default(string), bool? isUTC = default(bool?), DateTime? day = default(DateTime?), double? open = default(double?), double? close = default(double?), List<CryptoHistoricTradesTicks> openTrades = default(List<CryptoHistoricTradesTicks>), List<CryptoHistoricTradesTicks> closingTrades = default(List<CryptoHistoricTradesTicks>))
        {
            this.Symbol = symbol;
            this.IsUTC = isUTC;
            this.Day = day;
            this.Open = open;
            this.Close = close;
            this.OpenTrades = openTrades;
            this.ClosingTrades = closingTrades;
        }
        
        /// <summary>
        /// The symbol pair that was evaluated from the request.
        /// </summary>
        /// <value>The symbol pair that was evaluated from the request.</value>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Whether or not the timestamps are in UTC timezone.
        /// </summary>
        /// <value>Whether or not the timestamps are in UTC timezone.</value>
        [DataMember(Name="isUTC", EmitDefaultValue=false)]
        public bool? IsUTC { get; set; }

        /// <summary>
        /// The date requested.
        /// </summary>
        /// <value>The date requested.</value>
        [DataMember(Name="day", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Day { get; set; }

        /// <summary>
        /// The open price for the symbol in the given time period.
        /// </summary>
        /// <value>The open price for the symbol in the given time period.</value>
        [DataMember(Name="open", EmitDefaultValue=false)]
        public double? Open { get; set; }

        /// <summary>
        /// The close price for the symbol in the given time period.
        /// </summary>
        /// <value>The close price for the symbol in the given time period.</value>
        [DataMember(Name="close", EmitDefaultValue=false)]
        public double? Close { get; set; }

        /// <summary>
        /// Gets or Sets OpenTrades
        /// </summary>
        [DataMember(Name="openTrades", EmitDefaultValue=false)]
        public List<CryptoHistoricTradesTicks> OpenTrades { get; set; }

        /// <summary>
        /// Gets or Sets ClosingTrades
        /// </summary>
        [DataMember(Name="closingTrades", EmitDefaultValue=false)]
        public List<CryptoHistoricTradesTicks> ClosingTrades { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20034 {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  IsUTC: ").Append(IsUTC).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  Close: ").Append(Close).Append("\n");
            sb.Append("  OpenTrades: ").Append(OpenTrades).Append("\n");
            sb.Append("  ClosingTrades: ").Append(ClosingTrades).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20034);
        }

        /// <summary>
        /// Returns true if InlineResponse20034 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20034 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20034 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.IsUTC == input.IsUTC ||
                    (this.IsUTC != null &&
                    this.IsUTC.Equals(input.IsUTC))
                ) && 
                (
                    this.Day == input.Day ||
                    (this.Day != null &&
                    this.Day.Equals(input.Day))
                ) && 
                (
                    this.Open == input.Open ||
                    (this.Open != null &&
                    this.Open.Equals(input.Open))
                ) && 
                (
                    this.Close == input.Close ||
                    (this.Close != null &&
                    this.Close.Equals(input.Close))
                ) && 
                (
                    this.OpenTrades == input.OpenTrades ||
                    this.OpenTrades != null &&
                    input.OpenTrades != null &&
                    this.OpenTrades.SequenceEqual(input.OpenTrades)
                ) && 
                (
                    this.ClosingTrades == input.ClosingTrades ||
                    this.ClosingTrades != null &&
                    input.ClosingTrades != null &&
                    this.ClosingTrades.SequenceEqual(input.ClosingTrades)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.IsUTC != null)
                    hashCode = hashCode * 59 + this.IsUTC.GetHashCode();
                if (this.Day != null)
                    hashCode = hashCode * 59 + this.Day.GetHashCode();
                if (this.Open != null)
                    hashCode = hashCode * 59 + this.Open.GetHashCode();
                if (this.Close != null)
                    hashCode = hashCode * 59 + this.Close.GetHashCode();
                if (this.OpenTrades != null)
                    hashCode = hashCode * 59 + this.OpenTrades.GetHashCode();
                if (this.ClosingTrades != null)
                    hashCode = hashCode * 59 + this.ClosingTrades.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
