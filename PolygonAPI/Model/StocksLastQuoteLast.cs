/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// StocksLastQuoteLast
    /// </summary>
    [DataContract]
        public partial class StocksLastQuoteLast :  IEquatable<StocksLastQuoteLast>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StocksLastQuoteLast" /> class.
        /// </summary>
        /// <param name="askprice">The ask price..</param>
        /// <param name="asksize">The ask size. This represents the number of round lot orders at the given ask price. The normal round lot size is 100 shares. An ask size of 2 means there are 200 shares available to purchase at the given ask price..</param>
        /// <param name="askexchange">The exchange ID that this liquidity is available on. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_exchanges_anchor\&quot; alt&#x3D;\&quot;Exchanges\&quot;&gt;Exchanges&lt;/a&gt; for Polygon.io&#x27;s mapping of exchange IDs..</param>
        /// <param name="bidprice">The bid price..</param>
        /// <param name="bidsize">The bid size. This represents the number of round lot orders at the given bid price. The normal round lot size is 100 shares. A bid size of 2 means there are 200 shares for purchase at the given bid price..</param>
        /// <param name="bidexchange">The exchange ID that this liquidity is available on. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_exchanges_anchor\&quot; alt&#x3D;\&quot;Exchanges\&quot;&gt;Exchanges&lt;/a&gt; for Polygon.io&#x27;s mapping of exchange IDs..</param>
        /// <param name="timestamp">The Unix Msec timestamp for the start of the aggregate window..</param>
        public StocksLastQuoteLast(double? askprice = default, int? asksize = default, int? askexchange = default, double? bidprice = default,
            int? bidsize = default, int? bidexchange = default, long? timestamp = default)
        {
            this.Askprice = askprice;
            this.Asksize = asksize;
            this.Askexchange = askexchange;
            this.Bidprice = bidprice;
            this.Bidsize = bidsize;
            this.Bidexchange = bidexchange;
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// The ask price.
        /// </summary>
        /// <value>The ask price.</value>
        [DataMember(Name="askprice", EmitDefaultValue=false)]
        public double? Askprice { get; set; }

        /// <summary>
        /// The ask size. This represents the number of round lot orders at the given ask price. The normal round lot size is 100 shares. An ask size of 2 means there are 200 shares available to purchase at the given ask price.
        /// </summary>
        /// <value>The ask size. This represents the number of round lot orders at the given ask price. The normal round lot size is 100 shares. An ask size of 2 means there are 200 shares available to purchase at the given ask price.</value>
        [DataMember(Name="asksize", EmitDefaultValue=false)]
        public int? Asksize { get; set; }

        /// <summary>
        /// The exchange ID that this liquidity is available on. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_exchanges_anchor\&quot; alt&#x3D;\&quot;Exchanges\&quot;&gt;Exchanges&lt;/a&gt; for Polygon.io&#x27;s mapping of exchange IDs.
        /// </summary>
        /// <value>The exchange ID that this liquidity is available on. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_exchanges_anchor\&quot; alt&#x3D;\&quot;Exchanges\&quot;&gt;Exchanges&lt;/a&gt; for Polygon.io&#x27;s mapping of exchange IDs.</value>
        [DataMember(Name="askexchange", EmitDefaultValue=false)]
        public int? Askexchange { get; set; }

        /// <summary>
        /// The bid price.
        /// </summary>
        /// <value>The bid price.</value>
        [DataMember(Name="bidprice", EmitDefaultValue=false)]
        public double? Bidprice { get; set; }

        /// <summary>
        /// The bid size. This represents the number of round lot orders at the given bid price. The normal round lot size is 100 shares. A bid size of 2 means there are 200 shares for purchase at the given bid price.
        /// </summary>
        /// <value>The bid size. This represents the number of round lot orders at the given bid price. The normal round lot size is 100 shares. A bid size of 2 means there are 200 shares for purchase at the given bid price.</value>
        [DataMember(Name="bidsize", EmitDefaultValue=false)]
        public int? Bidsize { get; set; }

        /// <summary>
        /// The exchange ID that this liquidity is available on. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_exchanges_anchor\&quot; alt&#x3D;\&quot;Exchanges\&quot;&gt;Exchanges&lt;/a&gt; for Polygon.io&#x27;s mapping of exchange IDs.
        /// </summary>
        /// <value>The exchange ID that this liquidity is available on. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_exchanges_anchor\&quot; alt&#x3D;\&quot;Exchanges\&quot;&gt;Exchanges&lt;/a&gt; for Polygon.io&#x27;s mapping of exchange IDs.</value>
        [DataMember(Name="bidexchange", EmitDefaultValue=false)]
        public int? Bidexchange { get; set; }

        /// <summary>
        /// The Unix Msec timestamp for the start of the aggregate window.
        /// </summary>
        /// <value>The Unix Msec timestamp for the start of the aggregate window.</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StocksLastQuoteLast {\n");
            sb.Append("  Askprice: ").Append(Askprice).Append("\n");
            sb.Append("  Asksize: ").Append(Asksize).Append("\n");
            sb.Append("  Askexchange: ").Append(Askexchange).Append("\n");
            sb.Append("  Bidprice: ").Append(Bidprice).Append("\n");
            sb.Append("  Bidsize: ").Append(Bidsize).Append("\n");
            sb.Append("  Bidexchange: ").Append(Bidexchange).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StocksLastQuoteLast);
        }

        /// <summary>
        /// Returns true if StocksLastQuoteLast instances are equal
        /// </summary>
        /// <param name="input">Instance of StocksLastQuoteLast to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StocksLastQuoteLast input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Askprice == input.Askprice ||
                    (this.Askprice != null &&
                    this.Askprice.Equals(input.Askprice))
                ) && 
                (
                    this.Asksize == input.Asksize ||
                    (this.Asksize != null &&
                    this.Asksize.Equals(input.Asksize))
                ) && 
                (
                    this.Askexchange == input.Askexchange ||
                    (this.Askexchange != null &&
                    this.Askexchange.Equals(input.Askexchange))
                ) && 
                (
                    this.Bidprice == input.Bidprice ||
                    (this.Bidprice != null &&
                    this.Bidprice.Equals(input.Bidprice))
                ) && 
                (
                    this.Bidsize == input.Bidsize ||
                    (this.Bidsize != null &&
                    this.Bidsize.Equals(input.Bidsize))
                ) && 
                (
                    this.Bidexchange == input.Bidexchange ||
                    (this.Bidexchange != null &&
                    this.Bidexchange.Equals(input.Bidexchange))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Askprice != null)
                    hashCode = hashCode * 59 + this.Askprice.GetHashCode();
                if (this.Asksize != null)
                    hashCode = hashCode * 59 + this.Asksize.GetHashCode();
                if (this.Askexchange != null)
                    hashCode = hashCode * 59 + this.Askexchange.GetHashCode();
                if (this.Bidprice != null)
                    hashCode = hashCode * 59 + this.Bidprice.GetHashCode();
                if (this.Bidsize != null)
                    hashCode = hashCode * 59 + this.Bidsize.GetHashCode();
                if (this.Bidexchange != null)
                    hashCode = hashCode * 59 + this.Bidexchange.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
