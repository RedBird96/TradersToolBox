/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// StocksSnapshotTickersLastTrade
    /// </summary>
    [DataContract]
        public partial class StocksSnapshotTickersLastTrade :  IEquatable<StocksSnapshotTickersLastTrade>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StocksSnapshotTickersLastTrade" /> class.
        /// </summary>
        /// <param name="c">The trade conditions..</param>
        /// <param name="i">The trade ID..</param>
        /// <param name="p">The price of the trade..</param>
        /// <param name="s">The size (volume) of the trade..</param>
        /// <param name="t">The Unix Msec timestamp for the start of the aggregate window..</param>
        /// <param name="x">The exchange ID. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_exchanges_anchor\&quot; alt&#x3D;\&quot;Exchanges\&quot;&gt;Exchanges&lt;/a&gt; for Polygon.io&#x27;s mapping of exchange IDs..</param>
        public StocksSnapshotTickersLastTrade(List<string> c = default, string i = default, double? p = default, int? s = default, long? t = default, int? x = default)
        {
            this.C = c;
            this.I = i;
            this.P = p;
            this.S = s;
            this.T = t;
            this.X = x;
        }
        
        /// <summary>
        /// The trade conditions.
        /// </summary>
        /// <value>The trade conditions.</value>
        [DataMember(Name="c", EmitDefaultValue=false)]
        public List<string> C { get; set; }

        /// <summary>
        /// The trade ID.
        /// </summary>
        /// <value>The trade ID.</value>
        [DataMember(Name="i", EmitDefaultValue=false)]
        public string I { get; set; }

        /// <summary>
        /// The price of the trade.
        /// </summary>
        /// <value>The price of the trade.</value>
        [DataMember(Name="p", EmitDefaultValue=false)]
        public double? P { get; set; }

        /// <summary>
        /// The size (volume) of the trade.
        /// </summary>
        /// <value>The size (volume) of the trade.</value>
        [DataMember(Name="s", EmitDefaultValue=false)]
        public int? S { get; set; }

        /// <summary>
        /// The Unix Msec timestamp for the start of the aggregate window.
        /// </summary>
        /// <value>The Unix Msec timestamp for the start of the aggregate window.</value>
        [DataMember(Name="t", EmitDefaultValue=false)]
        public long? T { get; set; }

        /// <summary>
        /// The exchange ID. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_exchanges_anchor\&quot; alt&#x3D;\&quot;Exchanges\&quot;&gt;Exchanges&lt;/a&gt; for Polygon.io&#x27;s mapping of exchange IDs.
        /// </summary>
        /// <value>The exchange ID. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_exchanges_anchor\&quot; alt&#x3D;\&quot;Exchanges\&quot;&gt;Exchanges&lt;/a&gt; for Polygon.io&#x27;s mapping of exchange IDs.</value>
        [DataMember(Name="x", EmitDefaultValue=false)]
        public int? X { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StocksSnapshotTickersLastTrade {\n");
            sb.Append("  C: ").Append(C).Append("\n");
            sb.Append("  I: ").Append(I).Append("\n");
            sb.Append("  P: ").Append(P).Append("\n");
            sb.Append("  S: ").Append(S).Append("\n");
            sb.Append("  T: ").Append(T).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StocksSnapshotTickersLastTrade);
        }

        /// <summary>
        /// Returns true if StocksSnapshotTickersLastTrade instances are equal
        /// </summary>
        /// <param name="input">Instance of StocksSnapshotTickersLastTrade to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StocksSnapshotTickersLastTrade input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.C == input.C ||
                    this.C != null &&
                    input.C != null &&
                    this.C.SequenceEqual(input.C)
                ) && 
                (
                    this.I == input.I ||
                    (this.I != null &&
                    this.I.Equals(input.I))
                ) && 
                (
                    this.P == input.P ||
                    (this.P != null &&
                    this.P.Equals(input.P))
                ) && 
                (
                    this.S == input.S ||
                    (this.S != null &&
                    this.S.Equals(input.S))
                ) && 
                (
                    this.T == input.T ||
                    (this.T != null &&
                    this.T.Equals(input.T))
                ) && 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.C != null)
                    hashCode = hashCode * 59 + this.C.GetHashCode();
                if (this.I != null)
                    hashCode = hashCode * 59 + this.I.GetHashCode();
                if (this.P != null)
                    hashCode = hashCode * 59 + this.P.GetHashCode();
                if (this.S != null)
                    hashCode = hashCode * 59 + this.S.GetHashCode();
                if (this.T != null)
                    hashCode = hashCode * 59 + this.T.GetHashCode();
                if (this.X != null)
                    hashCode = hashCode * 59 + this.X.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
