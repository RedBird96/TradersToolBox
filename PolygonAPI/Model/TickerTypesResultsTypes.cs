/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// TickerTypesResultsTypes
    /// </summary>
    [DataContract]
        public partial class TickerTypesResultsTypes :  IEquatable<TickerTypesResultsTypes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TickerTypesResultsTypes" /> class.
        /// </summary>
        /// <param name="cS">Common Stock.</param>
        /// <param name="aDR">American Depository Receipt.</param>
        /// <param name="nVDR">Non-Voting Depository Receipt.</param>
        /// <param name="gDR">Global Depositary Receipt.</param>
        /// <param name="sDR">Special Drawing Right.</param>
        /// <param name="cEF">Closed-End Fund.</param>
        /// <param name="eTP">Exchange Traded Product/Fund.</param>
        /// <param name="rEIT">Real Estate Investment Trust.</param>
        /// <param name="mLP">Master Limited Partnership.</param>
        /// <param name="wRT">Equity WRT.</param>
        /// <param name="pUB">Public.</param>
        /// <param name="nYRS">New York Registry Shares.</param>
        /// <param name="uNIT">Unit.</param>
        /// <param name="rIGHT">Right.</param>
        /// <param name="tRAK">Tracking stock or targeted stock.</param>
        /// <param name="lTDP">Limited Partnership.</param>
        /// <param name="rYLT">Royalty Trust.</param>
        /// <param name="mF">Mutual Fund.</param>
        /// <param name="pFD">Preferred Stock.</param>
        /// <param name="fDR">Foreign Ordinary Shares.</param>
        /// <param name="oST">Other Security Type.</param>
        /// <param name="fUND">Fund.</param>
        /// <param name="sP">Structured Product.</param>
        /// <param name="sI">Secondary Issue.</param>
        public TickerTypesResultsTypes(string cS = default(string), string aDR = default(string), string nVDR = default(string), string gDR = default(string), string sDR = default(string), string cEF = default(string), string eTP = default(string), string rEIT = default(string), string mLP = default(string), string wRT = default(string), string pUB = default(string), string nYRS = default(string), string uNIT = default(string), string rIGHT = default(string), string tRAK = default(string), string lTDP = default(string), string rYLT = default(string), string mF = default(string), string pFD = default(string), string fDR = default(string), string oST = default(string), string fUND = default(string), string sP = default(string), string sI = default(string))
        {
            this.CS = cS;
            this.ADR = aDR;
            this.NVDR = nVDR;
            this.GDR = gDR;
            this.SDR = sDR;
            this.CEF = cEF;
            this.ETP = eTP;
            this.REIT = rEIT;
            this.MLP = mLP;
            this.WRT = wRT;
            this.PUB = pUB;
            this.NYRS = nYRS;
            this.UNIT = uNIT;
            this.RIGHT = rIGHT;
            this.TRAK = tRAK;
            this.LTDP = lTDP;
            this.RYLT = rYLT;
            this.MF = mF;
            this.PFD = pFD;
            this.FDR = fDR;
            this.OST = oST;
            this.FUND = fUND;
            this.SP = sP;
            this.SI = sI;
        }
        
        /// <summary>
        /// Common Stock
        /// </summary>
        /// <value>Common Stock</value>
        [DataMember(Name="CS", EmitDefaultValue=false)]
        public string CS { get; set; }

        /// <summary>
        /// American Depository Receipt
        /// </summary>
        /// <value>American Depository Receipt</value>
        [DataMember(Name="ADR", EmitDefaultValue=false)]
        public string ADR { get; set; }

        /// <summary>
        /// Non-Voting Depository Receipt
        /// </summary>
        /// <value>Non-Voting Depository Receipt</value>
        [DataMember(Name="NVDR", EmitDefaultValue=false)]
        public string NVDR { get; set; }

        /// <summary>
        /// Global Depositary Receipt
        /// </summary>
        /// <value>Global Depositary Receipt</value>
        [DataMember(Name="GDR", EmitDefaultValue=false)]
        public string GDR { get; set; }

        /// <summary>
        /// Special Drawing Right
        /// </summary>
        /// <value>Special Drawing Right</value>
        [DataMember(Name="SDR", EmitDefaultValue=false)]
        public string SDR { get; set; }

        /// <summary>
        /// Closed-End Fund
        /// </summary>
        /// <value>Closed-End Fund</value>
        [DataMember(Name="CEF", EmitDefaultValue=false)]
        public string CEF { get; set; }

        /// <summary>
        /// Exchange Traded Product/Fund
        /// </summary>
        /// <value>Exchange Traded Product/Fund</value>
        [DataMember(Name="ETP", EmitDefaultValue=false)]
        public string ETP { get; set; }

        /// <summary>
        /// Real Estate Investment Trust
        /// </summary>
        /// <value>Real Estate Investment Trust</value>
        [DataMember(Name="REIT", EmitDefaultValue=false)]
        public string REIT { get; set; }

        /// <summary>
        /// Master Limited Partnership
        /// </summary>
        /// <value>Master Limited Partnership</value>
        [DataMember(Name="MLP", EmitDefaultValue=false)]
        public string MLP { get; set; }

        /// <summary>
        /// Equity WRT
        /// </summary>
        /// <value>Equity WRT</value>
        [DataMember(Name="WRT", EmitDefaultValue=false)]
        public string WRT { get; set; }

        /// <summary>
        /// Public
        /// </summary>
        /// <value>Public</value>
        [DataMember(Name="PUB", EmitDefaultValue=false)]
        public string PUB { get; set; }

        /// <summary>
        /// New York Registry Shares
        /// </summary>
        /// <value>New York Registry Shares</value>
        [DataMember(Name="NYRS", EmitDefaultValue=false)]
        public string NYRS { get; set; }

        /// <summary>
        /// Unit
        /// </summary>
        /// <value>Unit</value>
        [DataMember(Name="UNIT", EmitDefaultValue=false)]
        public string UNIT { get; set; }

        /// <summary>
        /// Right
        /// </summary>
        /// <value>Right</value>
        [DataMember(Name="RIGHT", EmitDefaultValue=false)]
        public string RIGHT { get; set; }

        /// <summary>
        /// Tracking stock or targeted stock
        /// </summary>
        /// <value>Tracking stock or targeted stock</value>
        [DataMember(Name="TRAK", EmitDefaultValue=false)]
        public string TRAK { get; set; }

        /// <summary>
        /// Limited Partnership
        /// </summary>
        /// <value>Limited Partnership</value>
        [DataMember(Name="LTDP", EmitDefaultValue=false)]
        public string LTDP { get; set; }

        /// <summary>
        /// Royalty Trust
        /// </summary>
        /// <value>Royalty Trust</value>
        [DataMember(Name="RYLT", EmitDefaultValue=false)]
        public string RYLT { get; set; }

        /// <summary>
        /// Mutual Fund
        /// </summary>
        /// <value>Mutual Fund</value>
        [DataMember(Name="MF", EmitDefaultValue=false)]
        public string MF { get; set; }

        /// <summary>
        /// Preferred Stock
        /// </summary>
        /// <value>Preferred Stock</value>
        [DataMember(Name="PFD", EmitDefaultValue=false)]
        public string PFD { get; set; }

        /// <summary>
        /// Foreign Ordinary Shares
        /// </summary>
        /// <value>Foreign Ordinary Shares</value>
        [DataMember(Name="FDR", EmitDefaultValue=false)]
        public string FDR { get; set; }

        /// <summary>
        /// Other Security Type
        /// </summary>
        /// <value>Other Security Type</value>
        [DataMember(Name="OST", EmitDefaultValue=false)]
        public string OST { get; set; }

        /// <summary>
        /// Fund
        /// </summary>
        /// <value>Fund</value>
        [DataMember(Name="FUND", EmitDefaultValue=false)]
        public string FUND { get; set; }

        /// <summary>
        /// Structured Product
        /// </summary>
        /// <value>Structured Product</value>
        [DataMember(Name="SP", EmitDefaultValue=false)]
        public string SP { get; set; }

        /// <summary>
        /// Secondary Issue
        /// </summary>
        /// <value>Secondary Issue</value>
        [DataMember(Name="SI", EmitDefaultValue=false)]
        public string SI { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TickerTypesResultsTypes {\n");
            sb.Append("  CS: ").Append(CS).Append("\n");
            sb.Append("  ADR: ").Append(ADR).Append("\n");
            sb.Append("  NVDR: ").Append(NVDR).Append("\n");
            sb.Append("  GDR: ").Append(GDR).Append("\n");
            sb.Append("  SDR: ").Append(SDR).Append("\n");
            sb.Append("  CEF: ").Append(CEF).Append("\n");
            sb.Append("  ETP: ").Append(ETP).Append("\n");
            sb.Append("  REIT: ").Append(REIT).Append("\n");
            sb.Append("  MLP: ").Append(MLP).Append("\n");
            sb.Append("  WRT: ").Append(WRT).Append("\n");
            sb.Append("  PUB: ").Append(PUB).Append("\n");
            sb.Append("  NYRS: ").Append(NYRS).Append("\n");
            sb.Append("  UNIT: ").Append(UNIT).Append("\n");
            sb.Append("  RIGHT: ").Append(RIGHT).Append("\n");
            sb.Append("  TRAK: ").Append(TRAK).Append("\n");
            sb.Append("  LTDP: ").Append(LTDP).Append("\n");
            sb.Append("  RYLT: ").Append(RYLT).Append("\n");
            sb.Append("  MF: ").Append(MF).Append("\n");
            sb.Append("  PFD: ").Append(PFD).Append("\n");
            sb.Append("  FDR: ").Append(FDR).Append("\n");
            sb.Append("  OST: ").Append(OST).Append("\n");
            sb.Append("  FUND: ").Append(FUND).Append("\n");
            sb.Append("  SP: ").Append(SP).Append("\n");
            sb.Append("  SI: ").Append(SI).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TickerTypesResultsTypes);
        }

        /// <summary>
        /// Returns true if TickerTypesResultsTypes instances are equal
        /// </summary>
        /// <param name="input">Instance of TickerTypesResultsTypes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TickerTypesResultsTypes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CS == input.CS ||
                    (this.CS != null &&
                    this.CS.Equals(input.CS))
                ) && 
                (
                    this.ADR == input.ADR ||
                    (this.ADR != null &&
                    this.ADR.Equals(input.ADR))
                ) && 
                (
                    this.NVDR == input.NVDR ||
                    (this.NVDR != null &&
                    this.NVDR.Equals(input.NVDR))
                ) && 
                (
                    this.GDR == input.GDR ||
                    (this.GDR != null &&
                    this.GDR.Equals(input.GDR))
                ) && 
                (
                    this.SDR == input.SDR ||
                    (this.SDR != null &&
                    this.SDR.Equals(input.SDR))
                ) && 
                (
                    this.CEF == input.CEF ||
                    (this.CEF != null &&
                    this.CEF.Equals(input.CEF))
                ) && 
                (
                    this.ETP == input.ETP ||
                    (this.ETP != null &&
                    this.ETP.Equals(input.ETP))
                ) && 
                (
                    this.REIT == input.REIT ||
                    (this.REIT != null &&
                    this.REIT.Equals(input.REIT))
                ) && 
                (
                    this.MLP == input.MLP ||
                    (this.MLP != null &&
                    this.MLP.Equals(input.MLP))
                ) && 
                (
                    this.WRT == input.WRT ||
                    (this.WRT != null &&
                    this.WRT.Equals(input.WRT))
                ) && 
                (
                    this.PUB == input.PUB ||
                    (this.PUB != null &&
                    this.PUB.Equals(input.PUB))
                ) && 
                (
                    this.NYRS == input.NYRS ||
                    (this.NYRS != null &&
                    this.NYRS.Equals(input.NYRS))
                ) && 
                (
                    this.UNIT == input.UNIT ||
                    (this.UNIT != null &&
                    this.UNIT.Equals(input.UNIT))
                ) && 
                (
                    this.RIGHT == input.RIGHT ||
                    (this.RIGHT != null &&
                    this.RIGHT.Equals(input.RIGHT))
                ) && 
                (
                    this.TRAK == input.TRAK ||
                    (this.TRAK != null &&
                    this.TRAK.Equals(input.TRAK))
                ) && 
                (
                    this.LTDP == input.LTDP ||
                    (this.LTDP != null &&
                    this.LTDP.Equals(input.LTDP))
                ) && 
                (
                    this.RYLT == input.RYLT ||
                    (this.RYLT != null &&
                    this.RYLT.Equals(input.RYLT))
                ) && 
                (
                    this.MF == input.MF ||
                    (this.MF != null &&
                    this.MF.Equals(input.MF))
                ) && 
                (
                    this.PFD == input.PFD ||
                    (this.PFD != null &&
                    this.PFD.Equals(input.PFD))
                ) && 
                (
                    this.FDR == input.FDR ||
                    (this.FDR != null &&
                    this.FDR.Equals(input.FDR))
                ) && 
                (
                    this.OST == input.OST ||
                    (this.OST != null &&
                    this.OST.Equals(input.OST))
                ) && 
                (
                    this.FUND == input.FUND ||
                    (this.FUND != null &&
                    this.FUND.Equals(input.FUND))
                ) && 
                (
                    this.SP == input.SP ||
                    (this.SP != null &&
                    this.SP.Equals(input.SP))
                ) && 
                (
                    this.SI == input.SI ||
                    (this.SI != null &&
                    this.SI.Equals(input.SI))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CS != null)
                    hashCode = hashCode * 59 + this.CS.GetHashCode();
                if (this.ADR != null)
                    hashCode = hashCode * 59 + this.ADR.GetHashCode();
                if (this.NVDR != null)
                    hashCode = hashCode * 59 + this.NVDR.GetHashCode();
                if (this.GDR != null)
                    hashCode = hashCode * 59 + this.GDR.GetHashCode();
                if (this.SDR != null)
                    hashCode = hashCode * 59 + this.SDR.GetHashCode();
                if (this.CEF != null)
                    hashCode = hashCode * 59 + this.CEF.GetHashCode();
                if (this.ETP != null)
                    hashCode = hashCode * 59 + this.ETP.GetHashCode();
                if (this.REIT != null)
                    hashCode = hashCode * 59 + this.REIT.GetHashCode();
                if (this.MLP != null)
                    hashCode = hashCode * 59 + this.MLP.GetHashCode();
                if (this.WRT != null)
                    hashCode = hashCode * 59 + this.WRT.GetHashCode();
                if (this.PUB != null)
                    hashCode = hashCode * 59 + this.PUB.GetHashCode();
                if (this.NYRS != null)
                    hashCode = hashCode * 59 + this.NYRS.GetHashCode();
                if (this.UNIT != null)
                    hashCode = hashCode * 59 + this.UNIT.GetHashCode();
                if (this.RIGHT != null)
                    hashCode = hashCode * 59 + this.RIGHT.GetHashCode();
                if (this.TRAK != null)
                    hashCode = hashCode * 59 + this.TRAK.GetHashCode();
                if (this.LTDP != null)
                    hashCode = hashCode * 59 + this.LTDP.GetHashCode();
                if (this.RYLT != null)
                    hashCode = hashCode * 59 + this.RYLT.GetHashCode();
                if (this.MF != null)
                    hashCode = hashCode * 59 + this.MF.GetHashCode();
                if (this.PFD != null)
                    hashCode = hashCode * 59 + this.PFD.GetHashCode();
                if (this.FDR != null)
                    hashCode = hashCode * 59 + this.FDR.GetHashCode();
                if (this.OST != null)
                    hashCode = hashCode * 59 + this.OST.GetHashCode();
                if (this.FUND != null)
                    hashCode = hashCode * 59 + this.FUND.GetHashCode();
                if (this.SP != null)
                    hashCode = hashCode * 59 + this.SP.GetHashCode();
                if (this.SI != null)
                    hashCode = hashCode * 59 + this.SI.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
