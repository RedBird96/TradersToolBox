/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// MarketStatus
    /// </summary>
    [DataContract]
        public partial class MarketStatus :  IEquatable<MarketStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketStatus" /> class.
        /// </summary>
        /// <param name="market">The status of the market as a whole..</param>
        /// <param name="serverTime">The current time of the server..</param>
        /// <param name="exchanges">exchanges.</param>
        /// <param name="currencies">currencies.</param>
        public MarketStatus(string market = default(string), DateTime? serverTime = default(DateTime?), MarketStatusExchanges exchanges = default(MarketStatusExchanges), MarketStatusCurrencies currencies = default(MarketStatusCurrencies))
        {
            this.Market = market;
            this.ServerTime = serverTime;
            this.Exchanges = exchanges;
            this.Currencies = currencies;
        }
        
        /// <summary>
        /// The status of the market as a whole.
        /// </summary>
        /// <value>The status of the market as a whole.</value>
        [DataMember(Name="market", EmitDefaultValue=false)]
        public string Market { get; set; }

        /// <summary>
        /// The current time of the server.
        /// </summary>
        /// <value>The current time of the server.</value>
        [DataMember(Name="serverTime", EmitDefaultValue=false)]
        public DateTime? ServerTime { get; set; }

        /// <summary>
        /// Gets or Sets Exchanges
        /// </summary>
        [DataMember(Name="exchanges", EmitDefaultValue=false)]
        public MarketStatusExchanges Exchanges { get; set; }

        /// <summary>
        /// Gets or Sets Currencies
        /// </summary>
        [DataMember(Name="currencies", EmitDefaultValue=false)]
        public MarketStatusCurrencies Currencies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarketStatus {\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  ServerTime: ").Append(ServerTime).Append("\n");
            sb.Append("  Exchanges: ").Append(Exchanges).Append("\n");
            sb.Append("  Currencies: ").Append(Currencies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketStatus);
        }

        /// <summary>
        /// Returns true if MarketStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Market == input.Market ||
                    (this.Market != null &&
                    this.Market.Equals(input.Market))
                ) && 
                (
                    this.ServerTime == input.ServerTime ||
                    (this.ServerTime != null &&
                    this.ServerTime.Equals(input.ServerTime))
                ) && 
                (
                    this.Exchanges == input.Exchanges ||
                    (this.Exchanges != null &&
                    this.Exchanges.Equals(input.Exchanges))
                ) && 
                (
                    this.Currencies == input.Currencies ||
                    (this.Currencies != null &&
                    this.Currencies.Equals(input.Currencies))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Market != null)
                    hashCode = hashCode * 59 + this.Market.GetHashCode();
                if (this.ServerTime != null)
                    hashCode = hashCode * 59 + this.ServerTime.GetHashCode();
                if (this.Exchanges != null)
                    hashCode = hashCode * 59 + this.Exchanges.GetHashCode();
                if (this.Currencies != null)
                    hashCode = hashCode * 59 + this.Currencies.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
