/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// TickersCodes
    /// </summary>
    [DataContract]
        public partial class TickersCodes :  IEquatable<TickersCodes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TickersCodes" /> class.
        /// </summary>
        /// <param name="cik">The CIK number for this ticker..</param>
        /// <param name="figi">The OpenFIGI number for this ticker..</param>
        /// <param name="cfigi">The composite OpenFIGI number for this ticker..</param>
        /// <param name="scfigi">The shared Class OpenFIGI number for this ticker..</param>
        /// <param name="figiuid">The unique OpenFIGI ID number for this ticker..</param>
        public TickersCodes(string cik = default(string), string figi = default(string), string cfigi = default(string), string scfigi = default(string), string figiuid = default(string))
        {
            this.Cik = cik;
            this.Figi = figi;
            this.Cfigi = cfigi;
            this.Scfigi = scfigi;
            this.Figiuid = figiuid;
        }
        
        /// <summary>
        /// The CIK number for this ticker.
        /// </summary>
        /// <value>The CIK number for this ticker.</value>
        [DataMember(Name="cik", EmitDefaultValue=false)]
        public string Cik { get; set; }

        /// <summary>
        /// The OpenFIGI number for this ticker.
        /// </summary>
        /// <value>The OpenFIGI number for this ticker.</value>
        [DataMember(Name="figi", EmitDefaultValue=false)]
        public string Figi { get; set; }

        /// <summary>
        /// The composite OpenFIGI number for this ticker.
        /// </summary>
        /// <value>The composite OpenFIGI number for this ticker.</value>
        [DataMember(Name="cfigi", EmitDefaultValue=false)]
        public string Cfigi { get; set; }

        /// <summary>
        /// The shared Class OpenFIGI number for this ticker.
        /// </summary>
        /// <value>The shared Class OpenFIGI number for this ticker.</value>
        [DataMember(Name="scfigi", EmitDefaultValue=false)]
        public string Scfigi { get; set; }

        /// <summary>
        /// The unique OpenFIGI ID number for this ticker.
        /// </summary>
        /// <value>The unique OpenFIGI ID number for this ticker.</value>
        [DataMember(Name="figiuid", EmitDefaultValue=false)]
        public string Figiuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TickersCodes {\n");
            sb.Append("  Cik: ").Append(Cik).Append("\n");
            sb.Append("  Figi: ").Append(Figi).Append("\n");
            sb.Append("  Cfigi: ").Append(Cfigi).Append("\n");
            sb.Append("  Scfigi: ").Append(Scfigi).Append("\n");
            sb.Append("  Figiuid: ").Append(Figiuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TickersCodes);
        }

        /// <summary>
        /// Returns true if TickersCodes instances are equal
        /// </summary>
        /// <param name="input">Instance of TickersCodes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TickersCodes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cik == input.Cik ||
                    (this.Cik != null &&
                    this.Cik.Equals(input.Cik))
                ) && 
                (
                    this.Figi == input.Figi ||
                    (this.Figi != null &&
                    this.Figi.Equals(input.Figi))
                ) && 
                (
                    this.Cfigi == input.Cfigi ||
                    (this.Cfigi != null &&
                    this.Cfigi.Equals(input.Cfigi))
                ) && 
                (
                    this.Scfigi == input.Scfigi ||
                    (this.Scfigi != null &&
                    this.Scfigi.Equals(input.Scfigi))
                ) && 
                (
                    this.Figiuid == input.Figiuid ||
                    (this.Figiuid != null &&
                    this.Figiuid.Equals(input.Figiuid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cik != null)
                    hashCode = hashCode * 59 + this.Cik.GetHashCode();
                if (this.Figi != null)
                    hashCode = hashCode * 59 + this.Figi.GetHashCode();
                if (this.Cfigi != null)
                    hashCode = hashCode * 59 + this.Cfigi.GetHashCode();
                if (this.Scfigi != null)
                    hashCode = hashCode * 59 + this.Scfigi.GetHashCode();
                if (this.Figiuid != null)
                    hashCode = hashCode * 59 + this.Figiuid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
