/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// StocksLastTradeLast
    /// </summary>
    [DataContract]
        public partial class StocksLastTradeLast :  IEquatable<StocksLastTradeLast>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StocksLastTradeLast" /> class.
        /// </summary>
        /// <param name="price">The price of the trade..</param>
        /// <param name="size">The size of the trade..</param>
        /// <param name="exchange">The exchange ID. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_exchanges_anchor\&quot; alt&#x3D;\&quot;Exchanges\&quot;&gt;Exchanges&lt;/a&gt; for Polygon.io&#x27;s mapping of exchange IDs..</param>
        /// <param name="cond1">Condition 1 of the trade. See Polygon.io&#x27;s &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_conditions__ticktype__anchor\&quot; alt&#x3D;\&quot;Mapping of conditions to exchange descriptions\&quot;&gt;mapping of conditions to exchange descriptions&lt;/a&gt;..</param>
        /// <param name="cond2">Condition 2 of the trade. See Polygon.io&#x27;s &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_conditions__ticktype__anchor\&quot; alt&#x3D;\&quot;Mapping of conditions to exchange descriptions\&quot;&gt;mapping of conditions to exchange descriptions&lt;/a&gt;..</param>
        /// <param name="cond3">Condition 3 of the trade. See Polygon.io&#x27;s &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_conditions__ticktype__anchor\&quot; alt&#x3D;\&quot;Mapping of conditions to exchange descriptions\&quot;&gt;mapping of conditions to exchange descriptions&lt;/a&gt;..</param>
        /// <param name="cond4">Condition 4 of the trade. See Polygon.io&#x27;s &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_conditions__ticktype__anchor\&quot; alt&#x3D;\&quot;Mapping of conditions to exchange descriptions\&quot;&gt;mapping of conditions to exchange descriptions&lt;/a&gt;..</param>
        /// <param name="timestamp">The Unix Msec timestamp for the start of the aggregate window..</param>
        public StocksLastTradeLast(double? price = default(double?), double? size = default(double?), int? exchange = default(int?), int? cond1 = default(int?), int? cond2 = default(int?), int? cond3 = default(int?), int? cond4 = default(int?), long? timestamp = default(int?))
        {
            this.Price = price;
            this.Size = size;
            this.Exchange = exchange;
            this.Cond1 = cond1;
            this.Cond2 = cond2;
            this.Cond3 = cond3;
            this.Cond4 = cond4;
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// The price of the trade.
        /// </summary>
        /// <value>The price of the trade.</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// The size of the trade.
        /// </summary>
        /// <value>The size of the trade.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public double? Size { get; set; }

        /// <summary>
        /// The exchange ID. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_exchanges_anchor\&quot; alt&#x3D;\&quot;Exchanges\&quot;&gt;Exchanges&lt;/a&gt; for Polygon.io&#x27;s mapping of exchange IDs.
        /// </summary>
        /// <value>The exchange ID. See &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_exchanges_anchor\&quot; alt&#x3D;\&quot;Exchanges\&quot;&gt;Exchanges&lt;/a&gt; for Polygon.io&#x27;s mapping of exchange IDs.</value>
        [DataMember(Name="exchange", EmitDefaultValue=false)]
        public int? Exchange { get; set; }

        /// <summary>
        /// Condition 1 of the trade. See Polygon.io&#x27;s &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_conditions__ticktype__anchor\&quot; alt&#x3D;\&quot;Mapping of conditions to exchange descriptions\&quot;&gt;mapping of conditions to exchange descriptions&lt;/a&gt;.
        /// </summary>
        /// <value>Condition 1 of the trade. See Polygon.io&#x27;s &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_conditions__ticktype__anchor\&quot; alt&#x3D;\&quot;Mapping of conditions to exchange descriptions\&quot;&gt;mapping of conditions to exchange descriptions&lt;/a&gt;.</value>
        [DataMember(Name="cond1", EmitDefaultValue=false)]
        public int? Cond1 { get; set; }

        /// <summary>
        /// Condition 2 of the trade. See Polygon.io&#x27;s &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_conditions__ticktype__anchor\&quot; alt&#x3D;\&quot;Mapping of conditions to exchange descriptions\&quot;&gt;mapping of conditions to exchange descriptions&lt;/a&gt;.
        /// </summary>
        /// <value>Condition 2 of the trade. See Polygon.io&#x27;s &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_conditions__ticktype__anchor\&quot; alt&#x3D;\&quot;Mapping of conditions to exchange descriptions\&quot;&gt;mapping of conditions to exchange descriptions&lt;/a&gt;.</value>
        [DataMember(Name="cond2", EmitDefaultValue=false)]
        public int? Cond2 { get; set; }

        /// <summary>
        /// Condition 3 of the trade. See Polygon.io&#x27;s &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_conditions__ticktype__anchor\&quot; alt&#x3D;\&quot;Mapping of conditions to exchange descriptions\&quot;&gt;mapping of conditions to exchange descriptions&lt;/a&gt;.
        /// </summary>
        /// <value>Condition 3 of the trade. See Polygon.io&#x27;s &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_conditions__ticktype__anchor\&quot; alt&#x3D;\&quot;Mapping of conditions to exchange descriptions\&quot;&gt;mapping of conditions to exchange descriptions&lt;/a&gt;.</value>
        [DataMember(Name="cond3", EmitDefaultValue=false)]
        public int? Cond3 { get; set; }

        /// <summary>
        /// Condition 4 of the trade. See Polygon.io&#x27;s &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_conditions__ticktype__anchor\&quot; alt&#x3D;\&quot;Mapping of conditions to exchange descriptions\&quot;&gt;mapping of conditions to exchange descriptions&lt;/a&gt;.
        /// </summary>
        /// <value>Condition 4 of the trade. See Polygon.io&#x27;s &lt;a href&#x3D;\&quot;https://polygon.io/docs/get_v1_meta_conditions__ticktype__anchor\&quot; alt&#x3D;\&quot;Mapping of conditions to exchange descriptions\&quot;&gt;mapping of conditions to exchange descriptions&lt;/a&gt;.</value>
        [DataMember(Name="cond4", EmitDefaultValue=false)]
        public int? Cond4 { get; set; }

        /// <summary>
        /// The Unix Msec timestamp for the start of the aggregate window.
        /// </summary>
        /// <value>The Unix Msec timestamp for the start of the aggregate window.</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StocksLastTradeLast {\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  Cond1: ").Append(Cond1).Append("\n");
            sb.Append("  Cond2: ").Append(Cond2).Append("\n");
            sb.Append("  Cond3: ").Append(Cond3).Append("\n");
            sb.Append("  Cond4: ").Append(Cond4).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StocksLastTradeLast);
        }

        /// <summary>
        /// Returns true if StocksLastTradeLast instances are equal
        /// </summary>
        /// <param name="input">Instance of StocksLastTradeLast to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StocksLastTradeLast input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.Cond1 == input.Cond1 ||
                    (this.Cond1 != null &&
                    this.Cond1.Equals(input.Cond1))
                ) && 
                (
                    this.Cond2 == input.Cond2 ||
                    (this.Cond2 != null &&
                    this.Cond2.Equals(input.Cond2))
                ) && 
                (
                    this.Cond3 == input.Cond3 ||
                    (this.Cond3 != null &&
                    this.Cond3.Equals(input.Cond3))
                ) && 
                (
                    this.Cond4 == input.Cond4 ||
                    (this.Cond4 != null &&
                    this.Cond4.Equals(input.Cond4))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Exchange != null)
                    hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                if (this.Cond1 != null)
                    hashCode = hashCode * 59 + this.Cond1.GetHashCode();
                if (this.Cond2 != null)
                    hashCode = hashCode * 59 + this.Cond2.GetHashCode();
                if (this.Cond3 != null)
                    hashCode = hashCode * 59 + this.Cond3.GetHashCode();
                if (this.Cond4 != null)
                    hashCode = hashCode * 59 + this.Cond4.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
