/* 
 * Polygon API
 *
 * The future of fintech.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = PolygonIO.Client.SwaggerDateConverter;

namespace PolygonIO.Model
{
    /// <summary>
    /// StocksOpenClose
    /// </summary>
    [DataContract]
        public partial class StocksOpenClose :  IEquatable<StocksOpenClose>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StocksOpenClose" /> class.
        /// </summary>
        /// <param name="status">The status of this request&#x27;s response..</param>
        /// <param name="from">The requested date..</param>
        /// <param name="symbol">The exchange symbol that this item is traded under..</param>
        /// <param name="open">The open price for the symbol in the given time period..</param>
        /// <param name="high">The highest price for the symbol in the given time period..</param>
        /// <param name="low">The lowest price for the symbol in the given time period..</param>
        /// <param name="close">The close price for the symbol in the given time period..</param>
        /// <param name="volume">The trading volume of the symbol in the given time period..</param>
        /// <param name="preMarket">The open price of the ticker symbol in pre-market trading..</param>
        /// <param name="afterHours">The close price of the ticker symbol in after hours trading..</param>
        public StocksOpenClose(string status = default(string), DateTime? from = default(DateTime?), string symbol = default(string), double? open = default(double?), double? high = default(double?), double? low = default(double?), double? close = default(double?), double? volume = default(double?), int? preMarket = default(int?), double? afterHours = default(double?))
        {
            this.Status = status;
            this.From = from;
            this.Symbol = symbol;
            this.Open = open;
            this.High = high;
            this.Low = low;
            this.Close = close;
            this.Volume = volume;
            this.PreMarket = preMarket;
            this.AfterHours = afterHours;
        }
        
        /// <summary>
        /// The status of this request&#x27;s response.
        /// </summary>
        /// <value>The status of this request&#x27;s response.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The requested date.
        /// </summary>
        /// <value>The requested date.</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? From { get; set; }

        /// <summary>
        /// The exchange symbol that this item is traded under.
        /// </summary>
        /// <value>The exchange symbol that this item is traded under.</value>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// The open price for the symbol in the given time period.
        /// </summary>
        /// <value>The open price for the symbol in the given time period.</value>
        [DataMember(Name="open", EmitDefaultValue=false)]
        public double? Open { get; set; }

        /// <summary>
        /// The highest price for the symbol in the given time period.
        /// </summary>
        /// <value>The highest price for the symbol in the given time period.</value>
        [DataMember(Name="high", EmitDefaultValue=false)]
        public double? High { get; set; }

        /// <summary>
        /// The lowest price for the symbol in the given time period.
        /// </summary>
        /// <value>The lowest price for the symbol in the given time period.</value>
        [DataMember(Name="low", EmitDefaultValue=false)]
        public double? Low { get; set; }

        /// <summary>
        /// The close price for the symbol in the given time period.
        /// </summary>
        /// <value>The close price for the symbol in the given time period.</value>
        [DataMember(Name="close", EmitDefaultValue=false)]
        public double? Close { get; set; }

        /// <summary>
        /// The trading volume of the symbol in the given time period.
        /// </summary>
        /// <value>The trading volume of the symbol in the given time period.</value>
        [DataMember(Name="volume", EmitDefaultValue=false)]
        public double? Volume { get; set; }

        /// <summary>
        /// The open price of the ticker symbol in pre-market trading.
        /// </summary>
        /// <value>The open price of the ticker symbol in pre-market trading.</value>
        [DataMember(Name="preMarket", EmitDefaultValue=false)]
        public int? PreMarket { get; set; }

        /// <summary>
        /// The close price of the ticker symbol in after hours trading.
        /// </summary>
        /// <value>The close price of the ticker symbol in after hours trading.</value>
        [DataMember(Name="afterHours", EmitDefaultValue=false)]
        public double? AfterHours { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StocksOpenClose {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  Close: ").Append(Close).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  PreMarket: ").Append(PreMarket).Append("\n");
            sb.Append("  AfterHours: ").Append(AfterHours).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StocksOpenClose);
        }

        /// <summary>
        /// Returns true if StocksOpenClose instances are equal
        /// </summary>
        /// <param name="input">Instance of StocksOpenClose to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StocksOpenClose input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Open == input.Open ||
                    (this.Open != null &&
                    this.Open.Equals(input.Open))
                ) && 
                (
                    this.High == input.High ||
                    (this.High != null &&
                    this.High.Equals(input.High))
                ) && 
                (
                    this.Low == input.Low ||
                    (this.Low != null &&
                    this.Low.Equals(input.Low))
                ) && 
                (
                    this.Close == input.Close ||
                    (this.Close != null &&
                    this.Close.Equals(input.Close))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                ) && 
                (
                    this.PreMarket == input.PreMarket ||
                    (this.PreMarket != null &&
                    this.PreMarket.Equals(input.PreMarket))
                ) && 
                (
                    this.AfterHours == input.AfterHours ||
                    (this.AfterHours != null &&
                    this.AfterHours.Equals(input.AfterHours))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Open != null)
                    hashCode = hashCode * 59 + this.Open.GetHashCode();
                if (this.High != null)
                    hashCode = hashCode * 59 + this.High.GetHashCode();
                if (this.Low != null)
                    hashCode = hashCode * 59 + this.Low.GetHashCode();
                if (this.Close != null)
                    hashCode = hashCode * 59 + this.Close.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                if (this.PreMarket != null)
                    hashCode = hashCode * 59 + this.PreMarket.GetHashCode();
                if (this.AfterHours != null)
                    hashCode = hashCode * 59 + this.AfterHours.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
